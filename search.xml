<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vim匹配</title>
    <url>/2021/09/12/vim/vim%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h1 id="按模式匹配还是按原义匹配"><a href="#按模式匹配还是按原义匹配" class="headerlink" title="按模式匹配还是按原义匹配"></a>按模式匹配还是按原义匹配</h1><h2 id="Tip-72-Tune-the-Case-Sensitivity-of-Search-Patterns"><a href="#Tip-72-Tune-the-Case-Sensitivity-of-Search-Patterns" class="headerlink" title="Tip 72 Tune the Case Sensitivity of Search Patterns"></a>Tip 72 Tune the Case Sensitivity of Search Patterns</h2><p>调整搜索大小写敏感度</p>
<p><strong>全局区分大小写</strong></p>
<p>通过设置 :set ignorecase 选项即可开启忽略大小写。需要注意的是, 此设置会对 Vim 关键词补全有一定的影响。</p>
<p><strong>每次搜索区分大小写</strong></p>
<p>可以使用以下选项来覆盖默认的是否忽略大小写:</p>
<ul>
<li><p>\c - 忽略大小写</p>
</li>
<li><p>\C - 区分大小写</p>
</li>
</ul>
<p>每次搜索的时候都可以强制指定是否区分大小写。注意：在替换时\c标志位为手工确认。</p>
<p><strong>启用智能大小写</strong></p>
<p>Vim 提供了预测我们大小写敏感意图的 smartcase 选项， :set smartcase</p>
<p>启用此选项后进行搜索时,</p>
<ul>
<li><p>如果输入的全部是小写字母, 那么就不区分大小写;</p>
</li>
<li><p>但只要包含大写字母, 那么就是大小写敏感的</p>
</li>
</ul>
<h2 id="Tip-73-Use-the-v-Pattern-Switch-for-Regex-Searches"><a href="#Tip-73-Use-the-v-Pattern-Switch-for-Regex-Searches" class="headerlink" title="Tip 73 Use the \v Pattern Switch for Regex Searches"></a>Tip 73 Use the \v Pattern Switch for Regex Searches</h2><p>按正则表达式查找时，使用 \v 模式开关  （开启字符的特殊含义）</p>
<p>我们可以使用 \v 模式(very magic search)开关规范所有的特殊符号, 启用之后, 除了下划线 _, 大小写字母, 和数字外, 所有的字符都具有特殊含义。</p>
<h2 id="Tip-74-Use-the-V-Literal-Switch-for-Verbatim-Searches"><a href="#Tip-74-Use-the-V-Literal-Switch-for-Verbatim-Searches" class="headerlink" title="Tip 74 Use the \V Literal Switch for Verbatim Searches"></a>Tip 74 Use the \V Literal Switch for Verbatim Searches</h2><p>按原义查找文本时，使用 \V 原义开关  (开启字符的特殊含义)</p>
<p>在正则表达式中使用的特殊字符，在按模式查找时用起来很顺手，但如果我们想</p>
<p>按原义查找文本时，它们就变成了阻碍。使用 very nomagic 原义开关，可以消除附</p>
<p>加在 .、 * 以及 ? 等大多数字符上的特殊含义。</p>
<p><strong>使用原义开关 \V，即可激活 very nomagic 搜索模式</strong></p>
<p>例如：搜索匹配“a.k.a.”字符串</p>
<p>/ \Va.k.a.</p>
<p>我们也可以使用转义的方式来消除字符的特殊含义。例如：</p>
<p>/ a.k.a.</p>
<p><strong>使用 “\V” 会使得其后的模式中只有反斜杠有特殊的意义,显然更方便。</strong></p>
<h2 id="Tip-76-Stake-the-Boundaries-of-a-Ward"><a href="#Tip-76-Stake-the-Boundaries-of-a-Ward" class="headerlink" title="Tip 76 Stake the Boundaries of a Ward"></a>Tip 76 Stake the Boundaries of a Ward</h2><p>界定单词的边界</p>
<p>定义一个搜索模型时, 指定单词的开始和结束位置可能很有用, Vim 给我们提供了单词分隔的选项。</p>
<p>例如执行搜索 /the<CR> 的时候, 是会把 these they their 等单词一起搜索出来的。</p>
<p>如果我们想只搜索 the 完整的单词, 而不需要包含 the 片段的词, 那么我们需要指定 词的边界。</p>
<p>在 \v 模式下（开启字符特殊含义）, <strong>&lt; 和 &gt;</strong> 即代表词边界的符号. 所以我们可以使用 /\v<the><CR> 来达到我们的预期。</p>
<p>需要注意的是, 如果我们在 \v 模式下需要匹配 &lt;&gt; 字符, 那么就得加反斜杠来进行转义了。</p>
<h2 id="Tip-78-Escape-Problem-Characters"><a href="#Tip-78-Escape-Problem-Characters" class="headerlink" title="Tip 78 Escape Problem Characters"></a>Tip 78 Escape Problem Characters</h2><p>转义问题字符</p>
<p>在 /V 纯文本模式下可以很容易的来进行纯文本的搜索匹配, 因为绝大部分的字符(如:. + *等)的特殊含义都被禁用了, 但是仍然有极少字符仍然有特殊的含义。</p>
<p>这时要用 \ 进行转义。</p>
<p>正向搜索转义斜杠 ‘/ ’</p>
<p>正向搜索时, 斜杠 / 字符被解释为终止符, 所有在此字符之后的内容都会被忽略，替换模式下在 \ 字符后添加标志位。</p>
<p>在 \v 和 \V 模式下, 如果要匹配 / 字符, 那么需要进行转义。</p>
<p>反向搜索转义问号 ‘ ? ’</p>
<p>当使用反向搜索的时候, 问号 ? 就是搜索的终止符。如果要匹配 ？号，需要转义 ?</p>
<p>每次都转义反斜杠 ‘ \ ’</p>
<p>\ 是需要进行转义的. 通常情况下, 反斜杠 \ 之后的那个字符表示被转义的特殊含义. 所以要匹配反斜杠字符的话就需要加转义, 也就是: \</p>
<p>而且，不管正向还是反向搜索，要匹配 \ 都是需要转义的。</p>
<p>终止符( / 或 ? )</p>
<p>Vim 允许在搜索字段终止符后面追加某些标志来调整搜索命令的行为</p>
<p>例如 /vim/e<CR> 将把光标放到高亮匹配位置的最后而不是前面</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/08/vim/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vim可视化模式</title>
    <url>/2021/09/12/vim/vim%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Visual-Mode"><a href="#Visual-Mode" class="headerlink" title="Visual Mode"></a>Visual Mode</h1><p>可视化模式</p>
<p>Vim 的可视模式允许我们选中一块文本区域并在其上进行操作，并具有 3 种不同的可视模式，分别用于操作字符文本、行文本或块文本。</p>
<p>可视化模式批量编辑或者纵向编辑模式时，可以极大的提高工作效率</p>
<h2 id="Tip-20-Grok-Visual-Mode"><a href="#Tip-20-Grok-Visual-Mode" class="headerlink" title="Tip 20 Grok Visual Mode"></a>Tip 20 Grok Visual Mode</h2><p>深入了解可视化模式</p>
<p><code>Select Mode 选择模式</code> </p>
<p>在一个典型的文本编辑器环境中，当选中一段文本后，再输入任意可见字符时，这些选中的文本将会被删除。Vim中的Select Mode类似于这样的模式。</p>
<p> 使用<code> &lt; C - g &gt;</code>，可以在可视化模式与选择模式中进行切换。不同点在于最后一行显示的是 <code>Visual</code> 以及 <code>Select</code>。</p>
<h2 id="Tip-21-Define-a-Visual-Selection"><a href="#Tip-21-Define-a-Visual-Selection" class="headerlink" title="Tip 21 Define a Visual Selection"></a>Tip 21 Define a Visual Selection</h2><p>定义高亮选区</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Effect</th>
</tr>
</thead>
<tbody><tr>
<td>v</td>
<td>激活面向字符的可视模式</td>
</tr>
<tr>
<td>V</td>
<td>激活面向行的可视模式</td>
</tr>
<tr>
<td>&lt; C - v &gt;</td>
<td>激活面向块的可视模式</td>
</tr>
<tr>
<td>gv</td>
<td>重选上次的高亮选区</td>
</tr>
<tr>
<td>o</td>
<td>切换高亮选区的活动端</td>
</tr>
</tbody></table>
<h2 id="Tip-22-Repeat-Line-wise-Visual-Command"><a href="#Tip-22-Repeat-Line-wise-Visual-Command" class="headerlink" title="Tip 22 Repeat Line-wise Visual Command"></a>Tip 22 Repeat Line-wise Visual Command</h2><p>重复执行面向行的可视化命令</p>
<p>还是<code> .</code>命令，甚至不需要进行<code>gv</code>命令重选上次的高亮选区</p>
<h2 id="Tip-23-Prefer-Operation-to-Visual-Command-Where-Possible"><a href="#Tip-23-Prefer-Operation-to-Visual-Command-Where-Possible" class="headerlink" title="Tip 23 Prefer Operation to Visual Command Where Possible"></a>Tip 23 Prefer Operation to Visual Command Where Possible</h2><p>只要可能，最好用操作符命令，而不是可视命令</p>
<p>可视模式可能比 Vim 的普通模式操作起来更自然一些，但是它有一个缺点：</p>
<ul>
<li>在这个模式下 . 命令有时会有一些异常的表现。 </li>
</ul>
<p>我们可以用普通模式下的操作符命令来规避此缺点。</p>
<h2 id="Tip-24-Edit-Tabular-Data-with-Visual-Block-Mode"><a href="#Tip-24-Edit-Tabular-Data-with-Visual-Block-Mode" class="headerlink" title="Tip 24 Edit Tabular Data with Visual-Block Mode"></a>Tip 24 Edit Tabular Data with Visual-Block Mode</h2><p>用面向列块的可视化模式编辑表格数据</p>
<p>以在列间增加分隔竖线 为例：</p>
<p><img src="vim%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A8%A1%E5%BC%8F_01.JPG" alt="img"></p>
<h2 id="Tip-25-Change-Columns-of-Text"><a href="#Tip-25-Change-Columns-of-Text" class="headerlink" title="Tip 25 Change Columns of Text"></a>Tip 25 Change Columns of Text</h2><p>修改列文本</p>
<p>用列块可视模式可以同时往若干行中插入文本。列块可视模式不仅仅对表格数据有用，在编程时我们也时常受惠于此功能。  </p>
<p><strong>使用<code> &lt; C – v &gt;</code> 模式选中块，可同时修改多行中同一列的数据。</strong></p>
<h2 id="Tip-26-Append-After-a-Ragged-Visual-Block"><a href="#Tip-26-Append-After-a-Ragged-Visual-Block" class="headerlink" title="Tip 26 Append After a Ragged Visual Block"></a>Tip 26 Append After a Ragged Visual Block</h2><p>在<strong>长短不一</strong>的高亮块后添加文本。</p>
<p>以在块可视化模式中为多行添加分号为例：</p>
<p><img src="vim%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A8%A1%E5%BC%8F_02.JPG" alt="img"></p>
<p>处于插入模式期间，任何输入的内容只出现在顶行，然而一旦返回到普通模式，这些修改就会被扩散到其余选中的行上。</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim命令行模式</title>
    <url>/2021/09/12/vim/vim%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Command-Line-Mode"><a href="#Command-Line-Mode" class="headerlink" title="Command-Line Mode"></a>Command-Line Mode</h1><p>命令行模式</p>
<p>Vim 的先祖是 vi，正是 vi 开创了区分模式编辑的范例。而 vi 则奉一个名为 ex的行编辑器为先祖，这就是为什么称在命令行模式输入为<code>Ex</code>命令。</p>
<h2 id="Tip-27-Meet-Command-Line-Mode"><a href="#Tip-27-Meet-Command-Line-Mode" class="headerlink" title="Tip 27 Meet Command-Line Mode"></a>Tip 27 Meet Command-Line Mode</h2><p>结识命令行模式</p>
<p>命令行模式会提示我们输入</p>
<ol>
<li>一条 <code>Ex</code> 命令</li>
<li>一个查找模式</li>
<li>一个表达式。</li>
</ol>
<p>按下<code> ：</code>键进入命令行模式，输入一条命令按<code>&lt; CR &gt;</code>执行它。</p>
<p>常用Ex命令: 读写文件<code> :edit 和 :write</code>，创建新标签页<code>:tabnew</code>及分割窗口<code> :split</code>， 或是操作参数列表<code>:prev/:next</code>及缓冲区列表<code> :bprev/:bnext</code>。事实上， Vim 为几乎所有功能都提供了相应的 Ex 命令。</p>
<p>操作缓冲区文本的 Ex 命令</p>
<table>
<thead>
<tr>
<th><strong>Command</strong></th>
<th><strong>Effect</strong></th>
</tr>
</thead>
<tbody><tr>
<td>:[range]delete [x]</td>
<td>行区间删除 [内容存入寄存器 x]</td>
</tr>
<tr>
<td>:[range]yank [x]</td>
<td>行区间拷贝 [内容存入寄存器 x]</td>
</tr>
<tr>
<td>:[line]put [x]</td>
<td>指定行追加寄存器 x 的内容</td>
</tr>
<tr>
<td>:[range]copy {address}</td>
<td>行区间拷贝后并张贴到指定的位置</td>
</tr>
<tr>
<td>:[range]move {address}</td>
<td>行区间移动到指定的位置</td>
</tr>
<tr>
<td>:[range]join</td>
<td>合并行，连接指定范围内的行</td>
</tr>
<tr>
<td>:[range]normal  {commands}</td>
<td>区间内执行常规模式的命令</td>
</tr>
<tr>
<td>:[range]substitute/{pattern}/{string}/[flags]</td>
<td>区间内按匹配的替换</td>
</tr>
<tr>
<td>:[range]global/{pattern}/[cmd]</td>
<td>区间内匹配的行里执行 Ex 命令: cmd</td>
</tr>
</tbody></table>
<p>在命令行模式中，文本出现在命令行上。命令行模式中也可以用组合键触发命令。</p>
<p>有些命令在插入模式和命令行模式中通用。例如，可以用<code>&lt;C-w&gt;</code>和 <code>&lt;C-u&gt;</code>分别删除至上个单词的开头及行首，也可以用 <code>&lt;C-v&gt;</code> 或<code>&lt;C-k&gt;</code>来插入键盘上找不到的字符，还可以用 <code>&lt;C-r&gt;&#123;register&#125; </code>命令把任意寄存器的内容插入到命令行。</p>
<h2 id="Tip-28-Execute-a-Command-on-One-or-More-Consececutive-Lines"><a href="#Tip-28-Execute-a-Command-on-One-or-More-Consececutive-Lines" class="headerlink" title="Tip 28 Execute a Command on One or More Consececutive Lines"></a>Tip 28 Execute a Command on One or More Consececutive Lines</h2><p>在一行或多行上执行Ex命令</p>
<p>很多<code>Ex</code>命令可以用 <strong>[range]</strong> 指定要操作的范围。我们可以用<strong>行号、位置标记或是查找模式</strong>来指定范围的开始位置及结束位置。</p>
<p><code>Ex </code>命令的优点之一是它们可以在某一范围内的所有行上执行。</p>
<p>通常，一个范围具有如下的形式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">：&#123; start &#125; , &#123; end &#125;</span><br></pre></td></tr></table></figure>

<p>定义范围的语法非常灵活，既可以混合搭配行号、位置标记以及查找模式，也可以对它们加以偏移。</p>
<p>偏移地址的一半形式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">：&#123; address &#125; + n</span><br></pre></td></tr></table></figure>

<p>如果n被省略，那么缺省的偏移量为1。例如：</p>
<table>
<thead>
<tr>
<th>.p</th>
<th>p : print ( 打印简写 )  ，打印当前行</th>
</tr>
</thead>
<tbody><tr>
<td>.+p</td>
<td>打印当前行的下一行</td>
</tr>
</tbody></table>
<p> 特殊符号</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>文件第一行</td>
</tr>
<tr>
<td>$</td>
<td>文件最后一行</td>
</tr>
<tr>
<td>0</td>
<td>虚拟行，文件第0行，位于第一行上方</td>
</tr>
<tr>
<td>.</td>
<td>文件当前行</td>
</tr>
<tr>
<td>‘m</td>
<td>包含位置标记m的行</td>
</tr>
<tr>
<td>‘&lt;</td>
<td>高亮选区的起始行</td>
</tr>
<tr>
<td>‘&gt;</td>
<td>高亮选区的结束行</td>
</tr>
<tr>
<td>%</td>
<td>当前文件中的所有行，相当于 : 1 , $</td>
</tr>
</tbody></table>
<h2 id="Tip-29-Duplicate-or-Move-Lines-Using-‘-t’-and-‘-m’-Commands"><a href="#Tip-29-Duplicate-or-Move-Lines-Using-‘-t’-and-‘-m’-Commands" class="headerlink" title="Tip 29 Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands"></a>Tip 29 Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands</h2><p>使用 <code>:t </code>和<code> :m</code> 命令来复制或移动行</p>
<p><code>:copy </code>命令（及其简写形式<code> :co</code> 以及<code> :t</code>）让我们可以把一行或多行从文档的一部分复制到另一部分。</p>
<p>而<code>:move</code>（简写形式<code> :m</code>）命令则可以让我们把文档移动到其他地方。</p>
<p>为了更好地记忆，可以把<code>：t</code>命令想成“复制到<code> copy TO</code>。</p>
<p>下表展示了<code>:t </code>命令的一些应用实例：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:6t.</td>
<td>把第6行复制到当前行下方</td>
</tr>
<tr>
<td>:t6</td>
<td>把当前行复制到第6行下方</td>
</tr>
<tr>
<td>:t.</td>
<td>为当前行创建一个副本，类似于普通模式下 yyp</td>
</tr>
<tr>
<td>:t$</td>
<td>把当前行复制到文件末尾</td>
</tr>
<tr>
<td>:’&lt;,’&gt;t0</td>
<td>把高亮选中的行复制到文件开头</td>
</tr>
</tbody></table>
<p><strong><code>:t. </code>与 <code>yyp</code> 的区别：<code>yyp</code>会使用寄存器，而 <code>:t. </code>不会</strong></p>
<p>在复制距离较远的行时，<code>:t</code>命令通常更加高效。</p>
<p><code>:move </code>命令看上去和<code>:copy </code>命令很相似，只是他是移动文本。</p>
<p>重复上次的<code> Ex</code> 命令非常简单，只需按 <code>@:</code> 即可</p>
<h2 id="Tip-30-Run-Normal-Mode-Command-Across-a-Range"><a href="#Tip-30-Run-Normal-Mode-Command-Across-a-Range" class="headerlink" title="Tip 30 Run Normal Mode Command Across a Range"></a>Tip 30 Run Normal Mode Command Across a Range</h2><p>在指定范围上执行普通模式命令</p>
<p>如果想在一系列连续行上执行一条普通模式命令，我们可以用 <code>:normal </code>命令。此命令在与<code> .</code> 命令或宏结合使用时，我们只需花费很少的努力就能完成大量重复性任务。</p>
<p>语法如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:[range]normal &#123;commands&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Tip-31-Repeat-the-Last-Ex-Command"><a href="#Tip-31-Repeat-the-Last-Ex-Command" class="headerlink" title="Tip 31 Repeat the Last Ex Command"></a>Tip 31 Repeat the Last Ex Command</h2><p>重复上一次<code>Ex</code>命令</p>
<p><code>.</code>命令可重复上次的修改。但是，<code>.</code>命令不会重复由 <strong>Vim 命令行</strong>中做出的修改。 </p>
<p>作为替代， 我们可以用 <code>@:</code> 来重复上次的 <code>Ex </code>命令</p>
<h2 id="Tip-32-Tab-Complete-Your-Ex-Commands"><a href="#Tip-32-Tab-Complete-Your-Ex-Commands" class="headerlink" title="Tip 32 Tab-Complete Your Ex Commands"></a>Tip 32 Tab-Complete Your Ex Commands</h2><p><code>Tab </code>自动补全Ex命令</p>
<p>如同在 shell 中一样，在命令行上也可以用<code>&lt;Tab&gt;</code>键自动补全命令。</p>
<p>Vim 在选取Tab 补全的补全项时非常智能，它会检查命令行上已经输入的上下文，然后再构建合适的补全列表。例如，可以这样输入：</p>
<p><img src="NO1.JPG" alt="img"></p>
<p><code>&lt;C-d&gt;</code> 命令会让 Vim 显示可用的补全列表，我们多次按<code>&lt;Tab&gt;</code>键的话，命令行上会依次显示 colder、 colorscheme，然后再回到最初的 col，如此循环往复。要想反向遍历补全列表，可以按 <code>&lt;S-Tab&gt;</code>。</p>
<p>假设我们想改配色方案，但是不太记得要用的配色方案的名称，这时可以用<code>&lt;C-d&gt;</code> 命令列出所有的可用选项。</p>
<p>不过在neovim中貌似以及封装好了</p>
<h2 id="Tip-33-Insert-the-Current-Word-at-the-Command-Prompt"><a href="#Tip-33-Insert-the-Current-Word-at-the-Command-Prompt" class="headerlink" title="Tip 33 Insert the Current Word at the Command Prompt"></a>Tip 33 Insert the Current Word at the Command Prompt</h2><p>将当前单词插入命令行</p>
<p>即使是在命令行模式下， Vim 也始终知道光标位于何处以及哪个分割窗口处于活动状态。为节省时间，我们可以把活动窗口中的当前单词（或字串）插入到命令行中。</p>
<p> 在 Vim 的命令行下，<code> &lt;C-r&gt;&lt;C-w&gt; (word)</code>映射项会复制光标下的<strong>单词</strong>并把它插入到命令行中。我们可以利用这一功能减少击键的次数。</p>
<p>而<code>&lt;C-r&gt;&lt;C-a&gt;(WORD)</code>把当前<strong>字串</strong>插入到命令行</p>
<h2 id="Tip-34-Recall-Commands-from-history"><a href="#Tip-34-Recall-Commands-from-history" class="headerlink" title="Tip 34 Recall Commands from history"></a>Tip 34 Recall Commands from history</h2><p>回溯历史命令</p>
<p>我们先按<code>:</code>键切换到命令行模式，在保持提示符为空的情况下按<code>&lt;Up&gt;</code>键，此时最后执行的那条<code>Ex</code>命令就会被填充到命令行上。再接着按 <code>&lt;Up&gt;</code> 键的话，就可以回到更早的<code> Ex</code> 历史命令；按 <code>&lt;Down&gt; </code>键的话，则会沿相反方向滚动。上下方向键也是可以。</p>
<p>结识命令行窗口</p>
<p>在命令行模式下按 <code>&lt;Ctrl-f&gt; </code>从命令行模式切换到命令行窗口。</p>
<p>​    Vim 会打开一个新的窗口，当命令行窗口处于打开状态时，它会始终拥有焦点。这意味着，除非关闭命令行窗口，否则我们无法切换到其他窗口。要想关闭命令行窗口，我们可以执行<code> :q</code> 命令（就像关闭普通 Vim 窗口那样），或是按<code> &lt;CR&gt;</code>。</p>
<p>下表总结了打开命令行窗口的几种方式</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>动作</th>
</tr>
</thead>
<tbody><tr>
<td>q/</td>
<td>打开查找命令历史的命令行窗口（注意是查找命令）</td>
</tr>
<tr>
<td>q:</td>
<td>打开Ex命令历史的命令行窗口</td>
</tr>
<tr>
<td>&lt; C - f &gt;</td>
<td>从命令行模式切换到命令行窗口</td>
</tr>
</tbody></table>
<p><code>q:</code> 命令和<code> :q</code> 命令很容易被搞混。</p>
<h2 id="Tip-35-Run-Command-in-the-shell"><a href="#Tip-35-Run-Command-in-the-shell" class="headerlink" title="Tip 35 Run Command in the shell"></a>Tip 35 Run Command in the shell</h2><p>运行shell命令</p>
<p>在 Vim 的命令行模式中，给命令加一个叹号<code>! </code>前缀就可以调用外部程序。</p>
<p>注意区分<code>:!ls</code>和<code>:ls</code>的不同之处。前者调用的是 shell 中的 ls 命令，而<code> :ls</code>调用的是 Vim 的内置命令，用来显示缓冲区列表的内容。</p>
<p><code>   :!&#123;cmd&#125;</code>这种语法适用于执行一次性命令，而<code>:shell</code>命令会启动一个交互的 shell 会话，可在 shell 中执行数条命令，用 <code>exit</code> 命令可以退出此 shell 并返回 Vim界面。</p>
<p> Vim挂起，即Vim 后台执行: 此方式比 <code>:shell </code>方式要方便一点。<code>&lt;C-z&gt; </code>会把 vim 挂起, 然后切换到终端。</p>
<p>在 Vim 中操作时，我们能很方便地调用 shell 命令  。</p>
<ul>
<li><code>:shell</code> 启动一个 shell (输入 exit 返回 Vim)  </li>
<li><code>:!&#123;cmd&#125;</code> 在 shell 中执行 {cmd}  </li>
</ul>
<p>使用缓冲区的内容进行标准输入或输出:</p>
<ul>
<li><p><code>:read !&#123;cmd&#125;</code> - 把 <em>cmd</em> 执行的结果(标准输出)写入当前文件(缓冲区) 如: :read !ls</p>
</li>
<li><p><code>:write !&#123;cmd&#125;</code> - 和上面相反, 把当前文件(缓冲区)内容当做标准输入传给了 <em>cmd</em> 命令 </p>
</li>
</ul>
<p>! 符号的位置不同有不同的含义:</p>
<ul>
<li><p><code>:[range]write ! sh</code> - 把缓冲区当做标准输入传给了 <em>sh</em> 命令</p>
</li>
<li><p><code>:[range]write! filename</code> - 表示把 <em>filename</em> 内容强制覆盖掉; 相当于内容另存为一个文件   </p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim在文件中跳转</title>
    <url>/2021/09/12/vim/vim%E5%9C%A8%E6%96%87%E4%BB%B6%E4%B8%AD%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="在文件中跳转"><a href="#在文件中跳转" class="headerlink" title="在文件中跳转"></a>在文件中跳转</h1><h2 id="Tip-55-Traverse-the-Jump-List"><a href="#Tip-55-Traverse-the-Jump-List" class="headerlink" title="Tip 55 Traverse the Jump List"></a>Tip 55 Traverse the Jump List</h2><p>遍历跳转列表</p>
<p>Vim 在跳转之前和之后记录我们的位置，并提供一些命令来回溯我们的步骤，类似于Web浏览器中的前进和后退。对vim来说：</p>
<ul>
<li><p>&lt; C - o &gt; - 后退, 跳转到上一个位置</p>
</li>
<li><p>&lt; C - i &gt; - 前进, 后退之后就可以往前了</p>
</li>
</ul>
<p><code>:jumps</code>命令可以查看跳转列表，效果类似于<code> :ls</code></p>
<blockquote>
<p>跳转位置的定义：Any command that changes the active file for the current window can be described as a jump.</p>
</blockquote>
<p>任何更改当前窗口的活动文件的命令都可以描述为跳转。Vim 会把执行跳转命令之前和之后的光标位置，记录到跳转列表中。例如：</p>
<p>如果我们运行<code>:edit</code>命令打开了一个新文件，那么就可以用 <code>&lt;C-o&gt; 和 &lt;C-i&gt; </code>命令在这个新文件以及原本的文件之间来回跳转。</p>
<p>用<code>[count]G</code>命令直接跳到指定的行号也会被当成一次跳转，但每次向上或向下移动一行则不算。面向句子的动作及面向段落的动作都算跳转，但面向字符及面向单词的动作则不算。用一句话来概括，<strong>我们可以说大范围的动作命令可能会被当成跳转，但小范围的动作命令则只能算移动。</strong></p>
<p>下表节选了一些跳转动作：</p>
<table>
<thead>
<tr>
<th>[count]G</th>
<th>行跳转</th>
</tr>
</thead>
<tbody><tr>
<td>/pattern<CR> 或  ?pattern<Cr></td>
<td>跳转到 下一个/上一个 匹配的 <em>pattern</em> 位置</td>
</tr>
<tr>
<td>n / N</td>
<td>同上</td>
</tr>
<tr>
<td>%</td>
<td>跳转到 配对的括号位置 <em>()</em> <em>[]</em> <em>{}</em> <em>&lt;&gt;</em></td>
</tr>
<tr>
<td>( / )</td>
<td>跳转到 前/后 一句内容</td>
</tr>
<tr>
<td>{ / }</td>
<td>跳转到 前/后 一段内容</td>
</tr>
<tr>
<td>H / M / L</td>
<td>跳转到 上/中/下 屏幕</td>
</tr>
<tr>
<td>gf</td>
<td>跳转到 光标处的文件</td>
</tr>
<tr>
<td>&lt;C-]&gt;</td>
<td>跳转到 光标处关键词定义的地方</td>
</tr>
<tr>
<td>`{mark} / ‘{mark}</td>
<td>跳转到 标记 / 标记非空白行首 位置</td>
</tr>
</tbody></table>
<p><C-o> 和 <C-i> 命令本身不会被当成动作命令。也就是说，我们既不能用它们扩大可视模式的选区，也不能在操作符待决模式中使用它们。</p>
<p>​    Vim 可以同时维护多份跳转列表。实际上，<strong>每个单独的窗口都拥有一份自己的跳转列表</strong>。如果你正在使用分割窗口或多标签页，那么 <C-o> 和 <C-i> 命令会<strong>始终在当前活动窗口的跳转列表范围内进行跳转</strong>。</p>
<p>注意：试着在插入模式中按一下 &lt; C- i &gt;，你会发现这和按 <Tab> 键的效果是一样的，</p>
<p>因为 Vim 本来就把 <C-i> 和 <Tab> 当成同一个东西。如果重新映射 <Tab> 键的话，那么也应该意识到，当你按下 <C-i> 时，该映射项也会被触发（反之亦然）。跳转的缺省行为将会被改变，只能单向遍历。</p>
<h2 id="Tip-56-Traverse-the-Change-List"><a href="#Tip-56-Traverse-the-Change-List" class="headerlink" title="Tip 56 Traverse the Change List"></a>Tip 56 Traverse the Change List</h2><p>遍历改变列表</p>
<p>每当对文档做出修改后， Vim 都会记录当时光标所在的位置。遍历改变列表的方法很简单，并且这大概是跳到你要去的地方的最快方式。</p>
<p>撤销/重做 命令：</p>
<ul>
<li><p>u - 撤销变更 （相当于 win &lt;C - z&gt;）</p>
</li>
<li><p><C-r> - 撤销之前的撤销  （相当于 win &lt;C - y&gt;）</p>
</li>
</ul>
<p>Vim 会在编辑会话期间维护一张表，里面记载我们对每个缓冲区所做的修改，此表就是所谓的改变列表，使用 <code>:change </code>命令可以查看其内容。</p>
<p>Vim 为每次修改都记录了行号与列号，我们可以用<code> g; 和 g,</code>命令反向或正向遍历改变列表。可以拿<code>; 和 ,</code>命令当参考，来帮你记忆 g; 与 g, 命令。前两条命令分别用来正向及反向重复 f{char} 命令，加上<strong>g前缀</strong>。</p>
<p>标识上次修改方位的位置标记，Vim 会自动创建一些位置标记，它们是对改变列表的一个有用补充。</p>
<ul>
<li><p>`. 标记总是指向上次修改的位置</p>
</li>
<li><p><strong>`^ 标记则会指向上次退出插入模式时光标所在的位置  ( gi 命令)</strong></p>
</li>
</ul>
<p>Vim 会为编辑会话中的每个单独缓冲区维护一个改变列表，而与之不同的是，每个窗口都会创建一个单独的跳转列表。</p>
<p>在大多数场景下，跳转到 `` . <code>的效果与使用</code> g; <code>命令相同。不过位置标记只指向最后修改的位置，而改变列表中则保存了多组位置。我们可以多次按 g; 命令，每次它都会把我们带到改变列表中较早的一个位置，而 </code> . 则总是把我们带到改变列表的最后一项。</p>
<p>​    ``^ <code>标记指向上次插入的位置，它比上次修改的位置更具体一点。如果我们先退出插入模式，接着又在文档中四处移动，然后，当我们又想快速回到退出的地方继续编辑时，用 **gi （g前缀 i插入**）命令就行了。此命令会用 </code>^ 标记恢复光标位置，并切换到插入模式，这真是省时省力的好办法！</p>
<h2 id="Tip-57-Jump-to-the-Filename-Under-the-Cursor"><a href="#Tip-57-Jump-to-the-Filename-Under-the-Cursor" class="headerlink" title="Tip 57 Jump to the Filename Under the Cursor"></a>Tip 57 Jump to the Filename Under the Cursor</h2><p> 跳转到光标下的文件</p>
<p>Vim 将文档中的文件名视为一种超链接。如果配置正确, 我们可以使用 <code>gf</code> 命令转到光标下的文件名。</p>
<p>指定文件的扩展名</p>
<p>​    <code>suffixesadd</code> 选项允许我们指定一个或多个文件扩展名，当 Vim 用 <code>gf </code>命令搜寻文件名时，会尝试使用这些扩展名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set suffixesadd+=.rb      //添加.rb的文件扩展名</span><br></pre></td></tr></table></figure>

<p>每次用 gf 命令时， Vim 都会在跳转列表中增添一条记录，因此我们总是可以用**<C-o> 命令返回原处**。</p>
<p>指定要搜寻的目录</p>
<p>​    引用的文件不位于工作目录的相对路径中，要引用第三方库的时候，需添加路径<code>path</code>。我们可以把它配置成一个以逗号分隔的目录列表。 当使用 <code>gf </code>命令时， Vim 会检查<code>path</code>列表中的每一个目录，看看该目录中是否包含一个匹配光标下文本的文件名。<code>path</code>设置也会作用域 <code>:find </code>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set path+=app/**   //添加路径</span><br><span class="line"></span><br><span class="line">:set path?            //查看路径</span><br><span class="line"></span><br><span class="line">❮ path=.,/usr/include, ,</span><br><span class="line"></span><br><span class="line">. : 表示 当前文件所在目录</span><br><span class="line"></span><br><span class="line">/usr/include : 这个很明显了</span><br><span class="line"></span><br><span class="line">空 : 两个 , , 中间的空 就表示当前工作目录 （注意，一个文件所在，一个当前工作）</span><br></pre></td></tr></table></figure>


<h2 id="Tip-58-Snap-Between-Files-Using-Global-Marks"><a href="#Tip-58-Snap-Between-Files-Using-Global-Marks" class="headerlink" title="Tip 58 Snap Between Files Using Global Marks"></a>Tip 58 Snap Between Files Using Global Marks</h2><p>用全局位置标记在文件间快速跳转</p>
<p><strong>标记语法 m{letter}</strong></p>
<ul>
<li>m[a-z] - 小写字母的, 创建一个可以在当前文件(缓冲区)进行跳转的标签</li>
<li>m[A-Z] - 大写字母的, 创建一个可以全局的标签, 可以在多个文件之前跳转</li>
</ul>
<p><strong>跳转语法 `{letter}</strong> </p>
<p><strong>编码之前设置全局标记，全局标记在多个文件切换时非常有用。</strong></p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim插入模式</title>
    <url>/2021/09/12/vim/vim%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Tip13-Make-Corrections-Instantly-from-Insert-Mode"><a href="#Tip13-Make-Corrections-Instantly-from-Insert-Mode" class="headerlink" title="Tip13 Make Corrections Instantly from Insert Mode"></a>Tip13 Make Corrections Instantly from Insert Mode</h1><p>插入模式下进行更正</p>
<p>在插入模式下更正错误首先想到退格键，它删除光标前的字符。另外还有使用以下组合键：</p>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>&lt; C – h &gt;</td>
<td>删除前一个字符（同退格键）</td>
</tr>
<tr>
<td>&lt; C - w &gt;</td>
<td>删除前一个单词</td>
</tr>
<tr>
<td>&lt; C - u &gt;</td>
<td>删至行首</td>
</tr>
</tbody></table>
<p>​    注：这些快捷键不是插入模式独有的，甚至不是vim独有的，在vim命令行模式，以及<code>bash shell , cmd, powershell </code>中也可以使用他们。</p>
<h1 id="Tip14-Get-Back-to-Normal-Mode"><a href="#Tip14-Get-Back-to-Normal-Mode" class="headerlink" title="Tip14 Get Back to Normal Mode"></a>Tip14 Get Back to Normal Mode</h1><p>返回普通模式</p>
<p>插入模式只专注于一件事，就是<strong>输入文字</strong>。<strong>普通模式才是我们大部分时间所用的模式</strong>。</p>
<p>切换会普通模式的经典方式是 <code>&lt;Esc&gt; </code>键，我们也可以用<code>&lt; C – [ &gt;</code>替代，效果完全一样。</p>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>&lt; Esc &gt;</td>
<td>切换回普通模式</td>
</tr>
<tr>
<td>&lt; C – [ &gt;</td>
<td>切换回普通模式</td>
</tr>
<tr>
<td>&lt; C - o &gt;</td>
<td>切换至插入  - 普通模式</td>
</tr>
</tbody></table>
<p>插入 - 普通模式：普通模式的一个特例，它能让我们执行一次普通模式命令，执行完毕之后，马上有回到插入模式。</p>
<p>例：使用<code>zz</code>命令使光标重新位于屏幕中间。键入<code>&lt; C - o &gt; zz</code> ，在普通模式下触发命令，重绘屏幕，此操作完成后会直接回到插入模式，因此可以不中断打字。</p>
<h1 id="Tip15-Paste-from-a-Register-Without-Leaving-Insert-Mode"><a href="#Tip15-Paste-from-a-Register-Without-Leaving-Insert-Mode" class="headerlink" title="Tip15 Paste from a Register Without Leaving Insert Mode"></a>Tip15 Paste from a Register Without Leaving Insert Mode</h1><p>不离开插入模式，粘贴寄存器中的文本</p>
<table>
<thead>
<tr>
<th>Keystrokes</th>
<th>Buffer Contents</th>
</tr>
</thead>
<tbody><tr>
<td>yt,</td>
<td>Practical  Vim, by Drew Neil  Read Drew Neil’s</td>
</tr>
<tr>
<td>jA␣</td>
<td>Practical Vim, by Drew Neil  Read Drew Neil’s</td>
</tr>
<tr>
<td>&lt; C – r &gt;0</td>
<td>Practical Vim, by Drew Neil  Read Drew Neil’s Practical Vim</td>
</tr>
<tr>
<td>.<Esc></td>
<td>Practical Vim, by Drew Neil  Read Drew Neil’s Practical Vim.</td>
</tr>
</tbody></table>
<p>yt, - 光标到第一个 “,” 之间的文本放入寄存器</p>
<p>jA␣ - 光标移动到下一行, 然后定位到行末并切换为插入模式, 再输入一个空格</p>
<p><C-r>0 - 插入寄存器 0 里的内容, 即刚刚放到寄存器的内容 (:h i_CTRL-R)</p>
<p>.<Esc> - 句号结尾后退出插入模式 </p>
<h1 id="Tip-16-Do-Back-of-the-Envelope-Calculations-in-Place"><a href="#Tip-16-Do-Back-of-the-Envelope-Calculations-in-Place" class="headerlink" title="Tip 16 Do Back-of-the-Envelope Calculations in Place"></a>Tip 16 Do Back-of-the-Envelope Calculations in Place</h1><p>数学计算</p>
<table>
<thead>
<tr>
<th><strong>Keystrokes</strong></th>
<th><strong>Buffer   Contents</strong></th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>6 chairs, each  costing $35, totals $</td>
</tr>
<tr>
<td><C-r>=6*35<CR></td>
<td>6 chairs, each  costing $35, totals $210.</td>
</tr>
</tbody></table>
<h1 id="Tip-17-Insert-Unusual-Characters-by-Character-Code"><a href="#Tip-17-Insert-Unusual-Characters-by-Character-Code" class="headerlink" title="Tip 17 Insert Unusual Characters by Character Code"></a>Tip 17 Insert Unusual Characters by Character Code</h1><p>用字符编码插入非常用字符。插入一些无法通过键盘输入的字符（目前需求不大）</p>
<h1 id="Tip-18-Insert-Unusual-Characters-by-Digraph"><a href="#Tip-18-Insert-Unusual-Characters-by-Digraph" class="headerlink" title="Tip 18 Insert Unusual Characters by Digraph"></a>Tip 18 Insert Unusual Characters by Digraph</h1><p>用二合字母插入非常用字符。插入一些无法通过键盘输入的字符（目前需求不大）</p>
<h1 id="Tip-19-Overwrite-Existing-Text-with-Replace-Mode"><a href="#Tip-19-Overwrite-Existing-Text-with-Replace-Mode" class="headerlink" title="Tip 19 Overwrite Existing Text with Replace Mode"></a>Tip 19 Overwrite Existing Text with Replace Mode</h1><p>覆盖模式</p>
<p>普通模式下按 <code>R </code>即可开启覆盖模式;  <code>r / gr</code> 仅覆盖一个字符</p>
<p>用虚拟替换模式替换制表符:</p>
<p>一些字符使替换模式变得复杂化。以制表符为例，在文件中它以单个字符表示，但在屏幕上它却会占据若干列的宽度，此宽度由 ‘tabstop’ 设置决定。如果把光标移到制表符上，然后进入替换模式，那么我们所输入的下一个字符将会替换制表符。假设 ‘tabstop’ 选项设置为 8（这是缺省值），那么该操作的结果就是把 8 个字符替换成了一个字符，这将大幅缩短当前行的长度。</p>
<p>Vim 还有另外一种替换模式，称为<strong>虚拟替换模式（Virtual Replace mode）</strong>。该模式可由 <code>gR 命令触发</code>，它会把制表符当成一组空格进行处理。假设我们把光标移到一个占屏幕 8 列宽的制表符上，然后切换到虚拟替换模式，在输入前 7 个字符时，每个字符都会被插入到制表符之前；最后，当输入了第 8 个字符时，该字符将会替换制表符。</p>
<p>在虚拟替换模式中，我们是按屏幕上实际显示的宽度来替换字符的，而不是按文件中所保存的字符进行替换。这会减少意外情况的发生，因此建议在可能的情况下尽量使用虚拟替换模式。</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim替换</title>
    <url>/2021/09/12/vim/vim%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><h2 id="Tip-87-Meet-the-Substitute-Command"><a href="#Tip-87-Meet-the-Substitute-Command" class="headerlink" title="Tip 87 Meet the Substitute Command"></a>Tip 87 Meet the Substitute Command</h2><p>结识替换命令，<code>:substitute </code>命令。其允许我们查找和替换一个文本块，语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]</span><br></pre></td></tr></table></figure>

<p>​    命令很复杂.，除了要提供搜索模式和替换文本之外, 还需要指定执行的范围。另外, 还可以提供额外的标识符来调整其行为。</p>
<p><code>[range]</code> 的使用和其他 Ex 命令一样，以逗号分隔</p>
<p><code>&#123;pattern&#125; </code>指代要查找的部分</p>
<p><strong>Flags，标志位调整替换行为</strong></p>
<p>几种常用的 flag 标志符:</p>
<ul>
<li><p>g - 让替换命令应用到全局,可修改一行内的匹配项， 而不是仅改变第一个匹配项. </p>
</li>
<li><p>c -替换前手工确认或拒绝每一处修改, </p>
</li>
<li><p>n - 禁止替换行为, 此功能可用于统计匹配文本的数量 </p>
</li>
<li><p>e - 忽略错误信息. 例如搜索没有匹配项时, 替换命令会提示一个错误信息 “E486: Pattern not found.”</p>
</li>
<li><p>&amp; - 告知 Vim 重用上一次替换命令中的相同标志. </p>
</li>
</ul>
<p><strong>替换域中的特殊字符</strong></p>
<p>查找模式时某些字符是有特殊意义的. 而替换字段也是有一些特殊字符的</p>
<table>
<thead>
<tr>
<th><strong>Symbol</strong></th>
<th><strong>Represents</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\r</td>
<td>插入回车(而不是\n)</td>
</tr>
<tr>
<td>\t</td>
<td>插入 tab 键</td>
</tr>
<tr>
<td>\</td>
<td>插入反斜杠 \</td>
</tr>
<tr>
<td>\1</td>
<td>插入第一个子匹配</td>
</tr>
<tr>
<td>\2</td>
<td>插入第二个只匹配 (依次到 \9)</td>
</tr>
<tr>
<td>\0</td>
<td>插入整个匹配的文本</td>
</tr>
<tr>
<td>&amp;</td>
<td>插入整个匹配的文本</td>
</tr>
<tr>
<td>~</td>
<td>使用上次的 {string} 替换文本</td>
</tr>
<tr>
<td>={Vim  script}</td>
<td>执行 {Vim脚本} 表达式, 把结果结果作为 {string} 替换文本</td>
</tr>
</tbody></table>
<h2 id="Tip-88-Find-and-Replace-Every-Match-in-a-File"><a href="#Tip-88-Find-and-Replace-Every-Match-in-a-File" class="headerlink" title="Tip 88 Find and Replace Every Match in a File"></a>Tip 88 Find and Replace Every Match in a File</h2><p>在文件范围内查找并替换每一处匹配</p>
<ul>
<li><p>标志位 g 处理横轴字符，当前行所有匹配</p>
</li>
<li><p>地址符 % 处理纵轴的文本行，可理解为处理整个文件的匹配项</p>
</li>
</ul>
<p>语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s/content/copy/g</span><br></pre></td></tr></table></figure>



<h2 id="Tip-89-Eyeball-Each-Substitution"><a href="#Tip-89-Eyeball-Each-Substitution" class="headerlink" title="Tip 89 Eyeball Each Substitution"></a>Tip 89 Eyeball Each Substitution</h2><p>手动控制每一次替换操作</p>
<p>标志位 <code>c </code> 手工确认每一处修改</p>
<p>语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s/content/copy/gc</span><br></pre></td></tr></table></figure>

<p>​    引入标志位 c 后，Vim 会在每处匹配体贴地为我们提示所有的选项<code>y/n/a/q/l/^E/^Y</code>。下表展示了每种答案的含义：</p>
<table>
<thead>
<tr>
<th><strong>Keystrokes</strong></th>
<th><strong>Buffer Contents</strong></th>
</tr>
</thead>
<tbody><tr>
<td>y</td>
<td><em>yes</em> 替换本次修改</td>
</tr>
<tr>
<td>n</td>
<td><em>no</em> 放弃本次修改</td>
</tr>
<tr>
<td>q</td>
<td><em>quit</em> 退出替换</td>
</tr>
<tr>
<td>l</td>
<td><em>last</em> 本次为最后一次替换, 然后退出</td>
</tr>
<tr>
<td>a</td>
<td><em>all</em> 替换本次和剩下的所有项</td>
</tr>
<tr>
<td><C-e></td>
<td>向上滚动屏幕</td>
</tr>
<tr>
<td><C-y></td>
<td>向下滚动屏幕</td>
</tr>
</tbody></table>
<p>不同于以往的是，在 Vim 的替换-确认模式下，键盘上的大多数按键都将失效。尽</p>
<p>管 <Esc> 键可以让我们像往常一样回到普通模式，但除此之外，周围的一切都使我们</p>
<p>感到陌生。</p>
<h2 id="Tip-90-Reuse-the-Last-Search-Pattern"><a href="#Tip-90-Reuse-the-Last-Search-Pattern" class="headerlink" title="Tip 90 Reuse the Last Search Pattern"></a>Tip 90 Reuse the Last Search Pattern</h2><p>重用上次的查找模式</p>
<p>如果你觉得将来会以完整形式来调用历史记录中的 substitute 命令， 就要养成在查</p>
<p>找域中填充内容的习惯。你只需在命令行中输入 <code>&lt;C-r&gt;/</code>，即可把上次的查找内容粘贴进来。</p>
<p>即留空查找域，使用<code>&lt;C-r&gt;/</code>替代</p>
<h2 id="Tip-91-Replace-with-the-Contents-of-a-Register"><a href="#Tip-91-Replace-with-the-Contents-of-a-Register" class="headerlink" title="Tip 91 Replace with the Contents of a Register"></a>Tip 91 Replace with the Contents of a Register</h2><p>用寄存器的内容替换</p>
<p>通过输入<code> &lt;C-r&gt;&#123;register&#125;</code>， 我们可以将寄存器的内容插入到命令行</p>
<h2 id="Tip-92-Repeat-the-Previous-Substitute-Command"><a href="#Tip-92-Repeat-the-Previous-Substitute-Command" class="headerlink" title="Tip 92 Repeat the Previous Substitute Command"></a>Tip 92 Repeat the Previous Substitute Command</h2><p>重复上一次 substitute 命令</p>
<p>假设我们刚刚执行完以下命令（其作用范围为当前行）:s/target/replacement/g</p>
<p>但我们失误，应该加上前缀 % 才对，接下来，我们只需输入 g&amp;，即可在整个文件的范围内重复这条命令。</p>
<p>某条 substitute 命令除了没加 % 前缀之外，其余都正确的时候，不妨试一试 g&amp;</p>
<p>​    gv 命令会激活可视模式，并重新将上次被选中的文本高亮起来（详情参考Tip 21 ）进入命令行模式，此时命令行会提示为 :’&lt;,’&gt; 键入 &amp;&amp;, 第一个 :&amp; 组合为 Ex 命令, 功能为重复最后一次替(:substitute)换命令(参考 :h :&amp;), 而第二个 &amp; 则表示使用前一个替换命令的标志符。</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim查找</title>
    <url>/2021/09/12/vim/vim%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="Tip-79-Meet-the-Search-Command"><a href="#Tip-79-Meet-the-Search-Command" class="headerlink" title="Tip 79 Meet the Search Command"></a>Tip 79 Meet the Search Command</h2><p>结识查找命令</p>
<table>
<thead>
<tr>
<th><strong>Command</strong></th>
<th><strong>Effect</strong></th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>向后搜索</td>
</tr>
<tr>
<td>?</td>
<td>向前搜索</td>
</tr>
<tr>
<td>n</td>
<td>跳转到下一个匹配位置(<em>next match</em>), 保持搜索方向和偏移</td>
</tr>
<tr>
<td>N</td>
<td>调整到上一个匹配位置, 保持搜索方向和偏移</td>
</tr>
<tr>
<td>/<CR></td>
<td>搜索模式不变, 向后跳转到下一个匹配位置</td>
</tr>
<tr>
<td>?<CR></td>
<td>搜索模式不变, 向前调整到上一个匹配位置</td>
</tr>
<tr>
<td>gn</td>
<td>启用可视化模式, 选中下一次的匹配文本</td>
</tr>
<tr>
<td>gN</td>
<td>启用可视化模式, 选中上一次的匹配文本</td>
</tr>
</tbody></table>
<p>回溯之前的查找</p>
<p>Vim 会一直记录我们执行过的查找模式，因此可以方便地重用它们。当查找提示</p>
<p>符出现时，我们可以通过 <Up> 键，滚动浏览之前的查找记录。</p>
<h2 id="Tip-80-Highlight-Search-Matches"><a href="#Tip-80-Highlight-Search-Matches" class="headerlink" title="Tip 80 Highlight Search Matches"></a>Tip 80 Highlight Search Matches</h2><p>高亮查找匹配</p>
<p>通过启用<code>hlsearch</code>选项，在配置文件中设置<code>set hlsearch</code> 可以高亮显示查找匹配。</p>
<p><strong>禁用高亮查找功能</strong></p>
<p>高亮查找有时会使得工作区内到处充斥高亮色调，Vim 提供了一种优雅的解决方案， 即通过 :nohlsearch 命令暂时关闭查找高亮功能（简写 :noh ）。此命令使得高亮功能一直处于关闭状态，直到执行新的或重复的查找命令为止。</p>
<p><strong>创建用于关闭高亮功能的快捷键</strong></p>
<p><code>:noh &lt;CR&gt; </code>虽然可以禁用查找高亮功能，但我们在键盘操作上也花费了不少功夫。</p>
<p>通过创建映射项，可以让我们加速操作，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nnoremap &lt;silent&gt; &lt;C-l&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;&lt;C-l&gt;</span><br></pre></td></tr></table></figure>

<p><C-l> 通常用于清除并重绘显示屏（参见 :h CTRL-L ）。而新的映射项，是在原有基础之上增加了暂时关闭查找高亮的功能。</p>
<h2 id="Tip-81-Preview-the-First-Match-Before-Execution"><a href="#Tip-81-Preview-the-First-Match-Before-Execution" class="headerlink" title="Tip 81 Preview the First Match Before Execution"></a>Tip 81 Preview the First Match Before Execution</h2><p>在执行查找前预览第一处匹配</p>
<p>缺省情况下， 我们在输入查找模式时， Vim 不会进行查找， 只有当我们按下 <CR> 后，它才会立即展开行动。启用‘incsearch’选项，set incsearch , 会让 Vim 根据已在查找域中输入的文本，预览第一处匹配。每当我们新输入一个字符时， Vim 会即时更新预览内容。</p>
<p><strong>根据预览结果对查找域自动补全  （</strong><C-r><C-w><strong>）</strong></p>
<p>例子：我们搜索输入 carr 就直接定位到 carrot 单词了. 假如我们需要匹配整个的 carrot 单词, 用来做替换之类的呢?</p>
<p>​    简单的方式就是手动全部敲完整个单词 carrot, 不过有快捷键可以完成此任务: <code>&lt;C-r&gt;&lt;C-w&gt;</code>. 此快捷键可以把当前预览匹配的词自动补全到搜索字段, 比较长的单词就很好用了。</p>
<p>需要注意的是 <C-r><C-w> 自动补全比较脆弱。</p>
<p>例如在使用 \v 正则模式下搜索时, <C-r><C-w> 将会补全光标处的整个单词 (那么 /\vcarr<C-r><C-w> 将会得到 /\vcarrcarrot 结果)。</p>
<p>因此，只要你找的不是模式，而是单词或词组，基于增量查找的自动补全功能真地能节省一点时间。</p>
<h2 id="Tip-82-统计当前模式的匹配个数"><a href="#Tip-82-统计当前模式的匹配个数" class="headerlink" title="Tip 82 统计当前模式的匹配个数"></a>Tip 82 统计当前模式的匹配个数</h2><p>虽然没有任何方法可以让查找命令统计当前文档中的匹配个数，但是用下面这条命令就可以做到这一点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➾:%s///gn</span><br><span class="line"> 《 117 matches on 65 lines</span><br></pre></td></tr></table></figure>

<p>​    实际上，我们调用的是 <code>:substitute </code>命令，替换命令，但标志位 <code>n </code>会抑制正常的替换动作。该命令不会对每处匹配进行替换，而是简单地统计匹配的次数，并将结果显示到命令</p>
<p>行上。</p>
<p>不管怎样，不要省略任何 / 字符。如果少加了一个/ ，即<code> :%s//gn</code>，将致使</p>
<p>“gn”替换每一处匹配。</p>
<h2 id="Tip-83-Offset-the-Cursor-to-the-End-of-a-Search-Match"><a href="#Tip-83-Offset-the-Cursor-to-the-End-of-a-Search-Match" class="headerlink" title="Tip 83 Offset the Cursor to the End of a Search Match"></a>Tip 83 Offset the Cursor to the End of a Search Match</h2><p>将光标偏移到查找匹配的结尾</p>
<p>​    每当我们执行查找命令时，光标总会被定位于匹配的首字母上。虽然这种缺省操</p>
<p>作看起来比较合理，但我们可能有时更倾向于将光标定位于查找匹配的结尾。Vim 的</p>
<p>查找偏移功能，可以将此想法变为现实。</p>
<p><strong>标志位e</strong></p>
<p>加入标志位e会把光标移到匹配项结尾</p>
<p>例如： /vim/e</p>
<h2 id="Tip-85-Create-Complex-Patterns-by-Iterating-upon-Search-History"><a href="#Tip-85-Create-Complex-Patterns-by-Iterating-upon-Search-History" class="headerlink" title="Tip 85 Create Complex Patterns by Iterating upon Search History"></a>Tip 85 Create Complex Patterns by Iterating upon Search History</h2><p>利用查找历史，迭代完成复杂的模式</p>
<p>写一个正则表达式并不简单. 通常都不是一次就能写对的, 所以如果能在上一次的基础上进行改进就显得很必要. 那么重新调用和编辑搜索历史就是必备的技巧    。</p>
<p>在查找提示符 \ 出现后，键入 <Up>会显示之前的搜索记录</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim用动作命令在文档中移动</title>
    <url>/2021/09/12/vim/vim%E7%94%A8%E5%8A%A8%E4%BD%9C%E5%91%BD%E4%BB%A4%E5%9C%A8%E6%96%87%E6%A1%A3%E4%B8%AD%E7%A7%BB%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="用动作命令在文档中移动"><a href="#用动作命令在文档中移动" class="headerlink" title="用动作命令在文档中移动"></a>用动作命令在文档中移动</h1><table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>(</td>
<td>前移一句</td>
<td>）</td>
<td>后移一句</td>
</tr>
<tr>
<td>{</td>
<td>前移一段（以空格行分辨）</td>
<td>}</td>
<td>后移一段（以空格行分辨）</td>
</tr>
</tbody></table>
<h2 id="Tip-47-Distinguish-Between-Real-Lines-and-Display-Lines"><a href="#Tip-47-Distinguish-Between-Real-Lines-and-Display-Lines" class="headerlink" title="Tip 47 Distinguish Between Real Lines and Display Lines"></a>Tip 47 Distinguish Between Real Lines and Display Lines</h2><p>区分实际行与屏幕行</p>
<p>除 Vim 以外，其他大多数文本编辑器都没有实际行的概念，它们只提供操作屏幕行的手段。 </p>
<p>vim的 j、 k、 0 和 $ 都用于操作实际行，而如果在这些键前加上 g 前缀的话，就会让 Vim 对屏幕行进行操作。</p>
<p><img src="NO1.png" alt="img"></p>
<p>以截图为例，假设我们想把光标向上移一行( k )，光标会移到单词“ac”上去，这既是所谓的<strong>实际行</strong>。</p>
<p>我们按 gk 就会移到单词“vehicula”上，目标单词位于光标之上的一个屏幕行，这就是<strong>屏幕行</strong>。</p>
<p>Vim 也提供了直接跳到行首及行尾的命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>移动</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>移动到实际行的行首</td>
</tr>
<tr>
<td>g0</td>
<td>移动到屏幕行的行首</td>
</tr>
<tr>
<td>^</td>
<td>移动到实际行的第一个非空白字符</td>
</tr>
<tr>
<td>g^</td>
<td>移动到屏幕行的第一个非空白字符</td>
</tr>
<tr>
<td>$</td>
<td>移动到实际行的行尾</td>
</tr>
<tr>
<td>g$</td>
<td>移动到屏幕行的行尾</td>
</tr>
</tbody></table>
<h2 id="Tip-48-Move-Word-Wise"><a href="#Tip-48-Move-Word-Wise" class="headerlink" title="Tip 48 Move Word-Wise"></a>Tip 48 Move Word-Wise</h2><p>基于单词的移动</p>
<p><img src="NO2.png" alt="img"></p>
<p><code>w</code> 和<code> </code>b命令，可以把它们想作“<em>word</em>”及“<em>back-word</em>”。</p>
<p><code>e </code>和 <code>ge</code> 命令是对此命令集的补充</p>
<p>vim有“单词” <em>word</em> 和“字串” <em>WORD</em> 的区分，以<strong>空白字符为间隔识别字串</strong>。<strong>每个面向单词的动作命令，都有一个面向字串的命令与其对应</strong>，这当中包括 W、 B、 E 和 gE</p>
<ul>
<li><p>“单词”（<em>word</em>）：由 字母+数字+下划线 组成。</p>
</li>
<li><p>“字串”（<em>WORD</em>）：由 一串非空白字符的字符串组成，以空格为间隔识别字串</p>
</li>
</ul>
<p>空白字符 包括： 空格, 制表符(Tab), 换行</p>
<h2 id="Tip-49-Find-by-Character"><a href="#Tip-49-Find-by-Character" class="headerlink" title="Tip 49 Find by Character"></a>Tip 49 Find by Character</h2><p>对字符进行查找</p>
<p>最常用语法 <code>f&#123;char&#125;</code></p>
<p>vim 里最快的移动技能之一; 行内按字符往后搜索, 如果匹配到, 那么光标直接定位到匹配的字符上, 没匹配就保持原状。但<strong>仅能在行内查找</strong>。</p>
<p><code>；</code>移动到下一个匹配项（正向查找） <code>，</code>移动到前一个匹配项（反向查找）</p>
<p>查找字符时，可以包含或是排除目标字符，下表列出了其中的所有命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>f{char}</td>
<td>正向移动到下一个{char}所在之处</td>
</tr>
<tr>
<td>F{char}</td>
<td>反向移动到下一个{char}所在之处</td>
</tr>
<tr>
<td>t{char}</td>
<td>正向移动到下一个{char}所在之处的前一个字符上</td>
</tr>
<tr>
<td>T{char}</td>
<td>反向移动到下一个{char}所在之处的前一个字符上</td>
</tr>
<tr>
<td>；</td>
<td>重复上一次的查找命令</td>
</tr>
<tr>
<td>，</td>
<td>反向查找上一次的字符查找命令</td>
</tr>
</tbody></table>
<h2 id="Tip-50-Search-to-Navigate"><a href="#Tip-50-Search-to-Navigate" class="headerlink" title="Tip 50 Search to Navigate"></a>Tip 50 Search to Navigate</h2><p>通过查找进行移动      </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法 /&#123;chars&#125; 或 /&#123;patterns&#125;</span><br></pre></td></tr></table></figure>

<p>普通模式下，按下 <code>/</code> 启用搜索命令,</p>
<p>键入字符后, 可以看到有多处匹配的结果, <code>&lt;CR&gt;</code> 回车定位到了第一次匹配的地方; 可以按 <code>n</code> 跳转到下一个匹配地方, 也可以按<code> N</code> 反向跳转</p>
<p>匹配到了唯一的结果时, 回车定位直接到匹配的地方</p>
<p>取消高亮选区，命令模式下，输入<code>:nohlsearch </code>也可以<code>:set nohlsearch</code>； 当然，可以简写，<code>:noh</code>或者<code>set noh</code>。</p>
<p>在vim配置文件中加入如下配置会非常实用: ~/.vimrc</p>
<p>set hlsearch  “ 搜索高亮</p>
<p>set incsearch “增量显示部分匹配</p>
<p>set ignorecase “忽略大小写</p>
<h2 id="Tip-51-Trace-Your-Selection-with-Precision-Text-Objects"><a href="#Tip-51-Trace-Your-Selection-with-Precision-Text-Objects" class="headerlink" title="Tip 51 Trace Your Selection with Precision Text Objects"></a>Tip 51 Trace Your Selection with Precision Text Objects</h2><p>用精确的文本对象选择选区</p>
<p>文本对象允许我们操作<strong>括号、 被引用的文本、 XML 标签以及其他文本</strong>中的常见结构。 </p>
<table>
<thead>
<tr>
<th><strong>文本对象</strong></th>
<th><strong>选择区域</strong></th>
<th><strong>文本对象</strong></th>
<th><strong>选择区域</strong></th>
</tr>
</thead>
<tbody><tr>
<td>a) or ab</td>
<td>一对圆括号(parentheses)</td>
<td>i) or ib</td>
<td>一对圆括号(parentheses)内部的内容</td>
</tr>
<tr>
<td>a} or aB</td>
<td>一对花括号{braces}</td>
<td>i} or iB</td>
<td>一对花括号{braces}内部的内容</td>
</tr>
<tr>
<td>a]</td>
<td>一对方括号[brackets]</td>
<td>i]</td>
<td>一对方括号[brackets]里的内容</td>
</tr>
<tr>
<td>a&gt;</td>
<td>尖括号</td>
<td>i&gt;</td>
<td>尖括号的内容</td>
</tr>
<tr>
<td>a’</td>
<td>单引号</td>
<td>i’</td>
<td>单引号的内容</td>
</tr>
<tr>
<td>a”</td>
<td>双引号</td>
<td>i”</td>
<td>双引号的内容</td>
</tr>
<tr>
<td>a`</td>
<td>反引号</td>
<td>i`</td>
<td>反引号的内容</td>
</tr>
<tr>
<td>at</td>
<td>标签</td>
<td>it</td>
<td>标签的内容</td>
</tr>
</tbody></table>
<p>为了便于记忆，可以把<code>i</code>想成<code>inside</code>，而把<code>a</code>想成<code>around</code>或<code>all</code>。</p>
<p>用文本对象执行操作</p>
<p>文本对象并不仅仅局限于可视化选择，每当在vim命令语法里出现<code>&#123;motion&#125;</code> 时，都可以在这个地方使用文本对象，常见的例子包括<code> d&#123;motion&#125;、c&#123;motion&#125;和 y&#123;motion&#125;</code>。</p>
<h2 id="Tip-52-Delete-Around-or-Change-Inside"><a href="#Tip-52-Delete-Around-or-Change-Inside" class="headerlink" title="Tip 52 Delete Around, or Change Inside"></a>Tip 52 Delete Around, or Change Inside</h2><p>删除周边，修改内部</p>
<p>Vim 的文本对象分为两类：</p>
<ul>
<li><p>一类是操作分隔符的文本对象，如 i)、 i” 和 it；另</p>
</li>
<li><p>一类用于操作文本块，如单词、句子和段落。</p>
</li>
<li><p>Tip 51总结前者，Tip 52总结后者。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>文本对象</strong></th>
<th><strong>匹配区域</strong></th>
<th><strong>文本对象</strong></th>
<th><strong>匹配区域</strong></th>
</tr>
</thead>
<tbody><tr>
<td>iw</td>
<td>一个词 <em>word</em></td>
<td>aw</td>
<td>一个词 <em>word</em> 含后面的一个空格</td>
</tr>
<tr>
<td>iW</td>
<td>一个词 <em>WORD</em></td>
<td>aW</td>
<td>一个词 <em>WORD</em> 含空格</td>
</tr>
<tr>
<td>is</td>
<td>一句话</td>
<td>as</td>
<td>一句话含后面的一个空格</td>
</tr>
<tr>
<td>ip</td>
<td>一段话</td>
<td>ap</td>
<td>一段话 含空行</td>
</tr>
</tbody></table>
<p>一般来讲:</p>
<ul>
<li>d{motion} 更适合于: aw as ap 场景</li>
<li>c{motion} 更适合于: iw is ip 场景</li>
</ul>
<h2 id="Tip-53-Mark-Your-Place-and-Snap-Back-to-It"><a href="#Tip-53-Mark-Your-Place-and-Snap-Back-to-It" class="headerlink" title="Tip 53 Mark Your Place and Snap Back to It"></a>Tip 53 Mark Your Place and Snap Back to It</h2><p>位置标记和返回标记</p>
<p>vim 标记可以使我们在文档内快速的进行跳转, 我们可以手动设置标记, vim 也会自动记录我们感兴趣的位置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">标记语法 m[a-z / A-Z]</span><br></pre></td></tr></table></figure>



<ul>
<li><p> [a-z] <em>小写字母</em> 仅在当前缓冲区可访问</p>
</li>
<li><p>[A-Z] <em>大写字母</em> 全局生效, 多个缓冲区可访问</p>
</li>
</ul>
<p>跳转语法</p>
<ul>
<li><p>`{mark} - 跳转到标记为 {mark} 的精确位置</p>
</li>
<li><p>‘{mark} - 跳转到标记为 {mark} 行的行首非空白字符处</p>
</li>
</ul>
<p><code>mm </code>和 ``m `命令是一对便于使用的命令，它们分别设置位置标记 m，以及跳转到该标记</p>
<p>如果你只想记一条命令，那就记住``{mark} `好了。不论你是想恢复到准确的光标位置，还是只想回到正确的行，这条命令都能做到。</p>
<p>自动位置标记</p>
<p>Vim 会自动帮我们设置一些位置标记，这些标记用起来非常方便</p>
<table>
<thead>
<tr>
<th><strong>Keystrokes</strong></th>
<th><strong>Buffer Contents</strong></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
<td>当前文件中最后一次跳转前的位置</td>
</tr>
<tr>
<td>`.</td>
<td>最后修改的位置</td>
</tr>
<tr>
<td>`^</td>
<td>最后插入的位置</td>
</tr>
<tr>
<td>`[</td>
<td>最后一次修改/拷贝的起始位置</td>
</tr>
<tr>
<td>`]</td>
<td>最后一次修改/拷贝的结束位置</td>
</tr>
<tr>
<td>`&lt;</td>
<td>最后一次可视化块的起始位置</td>
</tr>
<tr>
<td>`&gt;</td>
<td>最后一次可视化块的结束位置</td>
</tr>
</tbody></table>
<h2 id="Tip-54-Jump-Between-Matching-Parentheses"><a href="#Tip-54-Jump-Between-Matching-Parentheses" class="headerlink" title="Tip 54 Jump Between Matching Parentheses"></a>Tip 54 Jump Between Matching Parentheses</h2><p>在匹配括号之间跳转</p>
<p><code>%</code> 可以再匹配的括号间进行跳转; 比如:<code> () &#123;&#125; [] &lt;&gt;</code></p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim解决问题的方式</title>
    <url>/2021/09/12/vim/vim%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Tip1：Meet-the-Dot-Command"><a href="#Tip1：Meet-the-Dot-Command" class="headerlink" title="Tip1：Meet the Dot Command"></a>Tip1：Meet the Dot Command</h1><p>结识 . 命令</p>
<p><strong>.</strong> 命令可以重复上次的修改， Vim 中最为强大的多面手。</p>
<p>每次我们进入插入模式时，就会形成一次修改。从进入插入模式的那一刻起，直到返回普通模式， Vim 会记录每一个按键操作。做出这样一个修改后再用 . 命令的话，它将会重新执行所有这些按键操作 。</p>
<h1 id="Tip2-Don’t-Repeat-Yourself"><a href="#Tip2-Don’t-Repeat-Yourself" class="headerlink" title="Tip2: Don’t Repeat Yourself"></a>Tip2: Don’t Repeat Yourself</h1><p>不要自我重复，不少vim命令是两个甚至多个命令的组合</p>
<p>例如：</p>
<p>行移动：</p>
<ul>
<li><p>$: 将光标移动到当前行的行尾</p>
</li>
<li><p>0: 将光标移动到当前行的行首</p>
</li>
<li><p>^: 将光标移动到当前行的第一个非空字符（行首和当前行非空字符不是一个位置）</p>
</li>
</ul>
<p>文本操作：</p>
<ul>
<li><p>i: 在当前光标的前面插入字符</p>
</li>
<li><p>a: 在当前光标的后面追加字符</p>
</li>
<li><p>o: 在当前光标的下一行行首插入字符</p>
</li>
<li><p>I: 在一行的开头添加文本</p>
</li>
<li><p>A: 在一行的结尾处添加文本</p>
</li>
<li><p>O: 在光标当前行的上一行插入文本</p>
</li>
<li><p>s: 删除当前光标处的字符并进入到插入模式</p>
</li>
<li><p>S: 删除光标所在处的行，并进入到插入模式</p>
</li>
<li><p>u: 撤销修改</p>
</li>
<li><p>c or C : 表示修改当前行上光标后面的部分. 进入编辑状态.</p>
</li>
</ul>
<h1 id="Tip4-Act-Repeat-Reverse"><a href="#Tip4-Act-Repeat-Reverse" class="headerlink" title="Tip4 Act, Repeat, Reverse"></a>Tip4 Act, Repeat, Reverse</h1><p>执行、重复、回退</p>
<p> 在面对重复性工作时，我们需要让移动动作和修改都能够重复，这样就可以达到 一个最佳编辑模式。 Vim会记住我们的操作，使最常见的操作触手可及。</p>
<p>​    . 命令会重复上次修改。@: 可以用来重复任意 Ex 命令，或者我们也可以输入 &amp;来重复上次的:substitute命令（它本身也是一条 Ex 命令）。</p>
<p>​    当 Vim 让一个操作或移动可以很方便地重复时，它总是会提供某种方式，让我们在不小心做过头时能回退回来。</p>
<p> 对 . 命令而言，我们永远可以按 u 键撤销上次的修改。如果在使用 f{char} 命令后，不小心按了太多次 ; 键，就会偏离我们的目标。不过我们可以再按 , 键跳回去，这个命令会反方向查找上次 f{char}所查找的字符。</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>操作</th>
<th>重复</th>
<th>回退</th>
</tr>
</thead>
<tbody><tr>
<td>做出一个修改</td>
<td>{edit}</td>
<td>.</td>
<td>u</td>
</tr>
<tr>
<td>在行内查找下一个指定字符</td>
<td>f{char}/t{char}</td>
<td>;</td>
<td>,</td>
</tr>
<tr>
<td>在行内查找上一个指定字符</td>
<td>F{char}/T{char}</td>
<td>;</td>
<td>,</td>
</tr>
<tr>
<td>在文档中查找下一个匹配项</td>
<td>/pattern<CR></td>
<td>n</td>
<td>N</td>
</tr>
<tr>
<td>在文档中查找上一个匹配项</td>
<td>?pattern<CR></td>
<td>n</td>
<td>N</td>
</tr>
<tr>
<td>执行替换</td>
<td>:/s/target/replacement</td>
<td>&amp;</td>
<td>u</td>
</tr>
<tr>
<td>执行一系列修改</td>
<td>qx{changes}q</td>
<td>@x</td>
<td>u</td>
</tr>
</tbody></table>
<h1 id="Tip5-Find-and-Replace-by-Hand"><a href="#Tip5-Find-and-Replace-by-Hand" class="headerlink" title="Tip5 Find and Replace by Hand"></a>Tip5 Find and Replace by Hand</h1><p>查找并手动替换</p>
<p>一般的查找替换命令<code>:%s/content/copy/g</code>（以copy替换所有行中的content）。</p>
<p>偷懒方法：无需输入就可进行查找。<code>* </code>命令。</p>
<p>把光标移动到<code>content</code>单词上，然后用 <code>* </code>命令对他进行查找。</p>
<p>这会产生两个结果：</p>
<ul>
<li>一是光标会跳到下一个匹配项</li>
<li>二是所有出现这个词的地方都会被高亮显示。</li>
</ul>
<p>执行一次查找后，只需按 n 键就可以跳转到下一个匹配项。使修改可重复</p>
<h2 id="Tip7-Pause-with-Your-Brush-Off-the-Page"><a href="#Tip7-Pause-with-Your-Brush-Off-the-Page" class="headerlink" title="Tip7 Pause with Your Brush Off the Page"></a>Tip7 Pause with Your Brush Off the Page</h2><p>停顿时请移开画笔</p>
<p>​    插入模式专注于<strong>文本修改</strong>，停顿时进入普通模式。</p>
<h2 id="Tip8-Chunk-Your-Undos"><a href="#Tip8-Chunk-Your-Undos" class="headerlink" title="Tip8 Chunk Your Undos"></a>Tip8 Chunk Your Undos</h2><p>大步撤销，把撤销单元切成块</p>
<p> u键会撤销最新的修改。一次修改可以是改变文档内文本的任意操作，其中包括在普通模式、可视模式以及命令行模式中触发的命令。</p>
<p> 在vim中，可以控制撤销的力度。从进入插入模式开始到返回普通模式，在期间插入或删除任何内容都会被当成一次修改。因此，只要控制对<code>&lt;Esc&gt;</code>键的使用就可以使撤销作用于句子、段落或单词。</p>
<p> 注：在插入模式中，使用<code>&lt;up&gt; &lt;Down&gt; &lt;Left&gt; &lt;Right&gt;</code>移动光标会重置修改状态，将会产生一个新的撤销块。</p>
<h1 id="Tip9-Compose-Repeatable-Changes"><a href="#Tip9-Compose-Repeatable-Changes" class="headerlink" title="Tip9 Compose Repeatable Changes"></a>Tip9 Compose Repeatable Changes</h1><p>构造可重复的修改</p>
<p>配合 . 命令选择最优的方案</p>
<p>以删除一个单词为例：</p>
<ul>
<li><p>反向删除 <code>dbx </code></p>
</li>
<li><p>正向删除 <code>bdw</code>    </p>
</li>
<li><p>删除整个单词 <code>daw</code></p>
</li>
</ul>
<p> 命令有助于 . 命令发挥最大威力。反向删除 . == x ; 正向删除 . == dx;  删除整个单词 . == daw</p>
<h1 id="Tip11-Don’t-Count-If-You-Can-Repeat"><a href="#Tip11-Don’t-Count-If-You-Can-Repeat" class="headerlink" title="Tip11 Don’t Count If You Can Repeat"></a>Tip11 Don’t Count If You Can Repeat</h1><p>能重复，就不要用数数</p>
<p>以删除5个单词为例,有两种风格:</p>
<ul>
<li>次数风格（d5w）</li>
<li>重复风格（dw….）</li>
</ul>
<p>对于两种风格的使用存在争议，各有优缺，作者鼓励重复风格，数完估计都操作完了。应用过程中由程序员自由选。</p>
<h1 id="Tip12-Combine-and-Conquer"><a href="#Tip12-Combine-and-Conquer" class="headerlink" title="Tip12 Combine and Conquer"></a>Tip12 Combine and Conquer</h1><p>动作组合</p>
<p>在Vim 中，<strong>操作符 + 动作命令 = 操作</strong></p>
<p><code>d&#123;motion&#125;</code> 命令可以对一个字符<code> dl</code>、一个完整单词<code> daw</code>或一整个段落<code> dap</code> 进行删除操作，它作用的范围由动作命令决定。 <code>c&#123;motion&#125;</code>、 <code>y&#123;motion&#125;</code>以及其他一些命令 也类似，它们被统称为操作符<strong>operator</strong></p>
<p>g~、 gu 和 gU 命令要用两次按键来调用，我们可以把上述命令中的 g 当做一个 前缀字符，用以改变其后面的按键行为。</p>
<p>学习新的动作命令及操作符，就像是在学习 Vim 的词汇一样。如果掌握了这一简单的语法规则，在词汇量增长时，就能表达更多的想法。用 <code>daw</code> 删除一个单词，然后又学到<code> gU</code> 命令。它也是个操作符，所以我们可以用 <code>gUaw </code>把当前单词转换成大写形式。进一步扩充，学会了作用于段落的 <code>ap </code>动作命令，就会发现我们可以进行两个新的操作：用 <code>dap</code> 删除整个段落，或者用 <code>gUap </code>把整段文字转换为大写。</p>
<p>常见VIM操作符命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>修改</td>
</tr>
<tr>
<td>d</td>
<td>删除</td>
</tr>
<tr>
<td>y</td>
<td>复制到寄存器</td>
</tr>
<tr>
<td>g~</td>
<td>反转大小写</td>
</tr>
<tr>
<td>gu</td>
<td>转换为小写</td>
</tr>
<tr>
<td>gU</td>
<td>转换为大写</td>
</tr>
<tr>
<td>&gt;</td>
<td>增加缩进</td>
</tr>
<tr>
<td>&lt;</td>
<td>减小缩进</td>
</tr>
<tr>
<td>=</td>
<td>自动缩进</td>
</tr>
<tr>
<td>!</td>
<td>使用外部程序过滤{motion}所跨越的行</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim管理多个文件</title>
    <url>/2021/09/12/vim/vim%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><h2 id="Tip-36-Track-Open-File-with-the-Buffer-List"><a href="#Tip-36-Track-Open-File-with-the-Buffer-List" class="headerlink" title="Tip 36 Track Open File with the Buffer List"></a>Tip 36 Track Open File with the Buffer List</h2><p>用缓冲区列表管理打开的文件</p>
<p>文件与缓冲区的区别：文件是存储在磁盘上的，而缓冲区则存在于内存中。当 Vim 打开一个文件时，该文件的内容被读入一个具有相同名字的缓冲区。刚开始，缓冲区的内容和文件的内容完全相同，但当我们对缓冲区做出修改时，二者的内容就会出现差别。如果我们决定保留这些修改，就可以再把缓冲区的内容写回到文件里。</p>
<p>Vim允许我们同时在多个缓冲区（<em>buffer</em>）上工作，它会显示一个窗口，但窗口内仅会显示第一个buffer，一个窗口对应一个buffer。另外的buffer在当前窗口不可见，但其内容已经被载入到一个后台的缓冲区了，通过<code>:ls</code>命令可以查看。</p>
<p> <code> :ls</code>命令会列出所有被载入到内存中的缓冲区的列表，例如：</p>
<p><img src="NO1.png" alt="img"></p>
<p><code>% </code>符号指明哪个缓冲区在当前窗口中可见， 而<code>#</code>符号则代表轮换文件。 按 <code>&lt;C-^&gt;</code>可以在当前文件和轮换文件间快速切换。</p>
<p>使用缓冲区列表 (<code> :buffer</code> 命令简写形式为<code> :b</code> )</p>
<p>​    可以用 4 条命令来遍历缓冲区列表。</p>
<ul>
<li><code> :bprev ( :bp )</code>和 <code>:bnext ( :bn ) </code>在列表中反向或正向移动，每次移动一项；</li>
<li><code> :bfirst ( :bf )</code> 和 <code>:blast ( :bl ) </code>则分别跳到列表的开头和结尾。</li>
</ul>
<p> <code>  :ls</code>列表的开头有一个数字，它是在缓冲区创建时由 Vim 自动分配的编号。我们可以用 <code>:buffer N</code> 命令直接凭编号跳转到一个缓冲区<code>:bn</code>。</p>
<p>删除缓冲区</p>
<p>​    每次打开一个文件时， Vim 就会创建一个新的缓冲区。如果想删除缓冲区，可以用 <code>:bdelete</code> 命令 <code>:bd </code>，命令格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:bdelete N1 N2 N3</span><br><span class="line"></span><br><span class="line">:N,M bdelete</span><br></pre></td></tr></table></figure>

<p>如果我们想删除编号 5～ 10（包含 5 和 10）的缓冲区，可以执行 <code>:5,10bd</code> 。然而， 如果想要保留编号为 8 的缓冲区的话， 那么就只能用<code>:bd5 6 7 9 10</code>了。</p>
<p>注意：缓冲区的编号由 Vim 自动分配，没有办法手动改变此编号。因此，如果想删除一个或多个缓冲区，先得进行一番查找以便找出它们的编号。</p>
<p>​    Vim 内置的缓冲区管理功能缺乏灵活性。如果我们想对缓冲区进行组织，使其满足工作过程的需要，使用缓冲区列表并不是最佳选择。<strong>建议最好是把工作区划分成多个分割窗口、标签页，或是使用参数列表</strong>。</p>
<h2 id="Tip-37-Group-Buffers-into-a-Collection-with-the-Argument-List"><a href="#Tip-37-Group-Buffers-into-a-Collection-with-the-Argument-List" class="headerlink" title="Tip 37 Group Buffers into a Collection with the Argument List"></a>Tip 37 Group Buffers into a Collection with the Argument List</h2><p>用参数列表将缓冲区分组</p>
<p>参数列表易于管理，适用于对一批文件进行分组，使其更容易访问。 首先用 Vim 打开一些文件  ，使用<code> :args</code>命令后再查看参数列表：</p>
<p><img src="NO2.png" alt="img"></p>
<p>输出中的“[]”字符则指明了参数列表中的哪个文件是活动文件。</p>
<p>如果只是想在列表里增加几个文件，用这种方式就行了。它的好处是可以指定文件的次序，但它也有一个缺点，那就是手动增加文件的工作量比较大。如果想往参数列表中加入大量文件，那么使用通配符会快得多。</p>
<p>参数列表比缓冲区列表更容易管理，这使其成为对缓冲区进行分组的理想方式。</p>
<p>当不带参数运行 <code>:args</code> 命令时，它会打印当前参数列表的内容。也可以用下列格式来设置参数列表的内容  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:args &#123;arglist&#125; </span><br></pre></td></tr></table></figure>

<p><code>&#123;arglist&#125;</code> 可以包括文件名、通配符，甚至是一条 shell 命令的输出结果 。</p>
<p>接着就可以用 <code>:next </code>及 <code>:prev </code>命令遍历参数列表中的文件，或是用 <code>:argdo </code>命令在列表中的每个缓冲区上执行同一条命令。</p>
<p>缓冲区列表就像是计算机桌面（desktop），它永远是乱七八糟的；而参数列表则像一个整洁的独立工作区（workspace），只有在需要扩展空间时才会用到它。</p>
<h2 id="Tip-38-Manage-Hidden-Files"><a href="#Tip-38-Manage-Hidden-Files" class="headerlink" title="Tip 38 Manage Hidden Files"></a>Tip 38 Manage Hidden Files</h2><p>管理隐藏文件，即隐藏的缓冲区</p>
<p>Vim 对被修改过的缓冲区会给予特殊对待，以防未加保存就意外退出。此技巧将介绍如何隐藏一个被修改过的缓冲区，以及如何在退出 Vim 时处理隐藏缓冲区。</p>
<p><img src="NO3.png" alt="img"></p>
<p>缓冲区 a.txt 前有一个 <code>+ </code>号，表示这个缓冲区被修改过了。如果现在保存文件的话， 缓冲区的内容就会被写入磁盘里， 而 <code>+ </code>号也会消失了。但如果尝试切换一下缓冲区<code>：bn</code>，Vim 会报错。我们需要命令的结尾加一个叹号<code>!</code>，表该命令强制执行。</p>
<p>在退出时处理隐藏缓冲区</p>
<p>当一个缓冲区被隐藏后， Vim 允许我们像往常一样工作。我们可以打开其他缓冲区，对其进行修改、保存等，没有任何不同。然而，当我们想关闭编辑会话时， Vim 就会提醒我们某个缓冲区中有未保存的修改。</p>
<p> Vim 会把第一个有改动的隐藏缓冲区载入当前窗口，这样我们就可以决定如何处理它。</p>
<ul>
<li>如果要保留修改，可以执行 <code>:write （ :w ）</code> 命令把缓冲区保存到文件</li>
<li>如果想摒弃此修改，可以执行 <code>:edit!</code>，重新从磁盘读取此文件，这会用文件的内容覆盖缓冲区中的内容</li>
<li>当缓冲区内容与磁盘文件一致后，我们就可以再次尝试执行 <code>:quit </code>命令了</li>
</ul>
<p> 如果会话里有不止一个被修改过的隐藏缓冲区，那么每次执行<code>:quit</code>命令时，Vim 都会激活下一个未保存的缓冲区。同样的，我们可以用<code>:write</code>及 <code>:edit!</code> 来保存或摒弃此修改。当没有其他窗口和隐藏缓冲区时，<code>:q </code>命令就会关闭 Vim。</p>
<ul>
<li><p>如果想退出 Vim 而不想对未保存的修改进行检查，可以执行 <code>:qall! </code>命令</p>
</li>
<li><p>如果想保存所有有改动的缓冲区而无需逐个检查，可以用<code>:wall</code>命令。</p>
</li>
</ul>
<p>在退出时，处理隐藏缓冲区的方式</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:w[rite]</td>
<td>把缓冲区内容写入磁盘</td>
</tr>
<tr>
<td>:e[dit]!</td>
<td>把磁盘文件内容读入缓冲区（即回滚所做修改）</td>
</tr>
<tr>
<td>:qa[ll]!</td>
<td>关闭所有窗口，摒弃修改而无需警告</td>
</tr>
<tr>
<td>:wa[ll]!</td>
<td>把所有改变的缓冲区写入磁盘</td>
</tr>
</tbody></table>
<p>启用 ‘hidden’ 设置</p>
<p>缺省情况下， Vim 不会让我们从一个改动过的缓冲区切换到其他缓冲区，将设置写入vim配置文件，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set hidden  &quot; 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存</span><br></pre></td></tr></table></figure>

<h2 id="Tip-39-Divide-Your-Workspace-into-Split-Windows"><a href="#Tip-39-Divide-Your-Workspace-into-Split-Windows" class="headerlink" title="Tip 39 Divide Your Workspace into Split Windows"></a>Tip 39 Divide Your Workspace into Split Windows</h2><p>将工作区切分成窗口  </p>
<p>vim对窗口操作的快捷键前缀 ：<code>&lt;C-w&gt;</code> ( window )</p>
<p>在Vim的术语中, 窗口<em>window</em>指是 缓冲区 的可视化窗口<em>viewport</em>。一个缓冲区<em>buffer</em>对应一个窗口。</p>
<p>Vim 允许我们切分工作区来展示多个缓冲区。</p>
<ul>
<li><p> <code>&lt;C-w&gt;s </code>命令可以水平切分此窗口，使之成为两个高度相同的窗口</p>
</li>
<li><p><code> &lt;C-w&gt;v</code> 命令对窗口进行垂直切分。</p>
</li>
</ul>
<p>窗口切分可任意重复多次，可把工作区一次次 地切分为更小的窗口，就像细胞分裂那样</p>
<p><img src="NO4.png" alt="img"></p>
<p>工作区切分窗口方式</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>&lt; C - w &gt;s</td>
<td>水平切分当前窗口，新窗口仍显示当前缓冲区</td>
</tr>
<tr>
<td>&lt; C - w &gt;v</td>
<td>垂直切分当前窗口，新窗口仍显示当前缓冲区</td>
</tr>
<tr>
<td>:sp[list] { file }</td>
<td>水平切分当前窗口，并在新窗口中载入{ file }</td>
</tr>
<tr>
<td>:vsp[list] { file }</td>
<td>垂直切分当前窗口，并在新窗口中载入{ file }</td>
</tr>
</tbody></table>
<p>在窗口间切换</p>
<ul>
<li><p><code>&lt; C - w &gt; </code>配上 <code>h j k l </code>在窗口间方向移动</p>
</li>
<li><p><code>&lt; C - w &gt;w</code> 在窗口间循环切换。</p>
</li>
</ul>
<p>实际上， <code>&lt;C-w&gt;&lt;C-w&gt; </code>完成的功能和<code>&lt;C-w&gt;w </code>相同，也就是说可以一直按住<code>&lt;Ctrl&gt; </code>键，然后再输入 <code>ww </code>（或 <code>wj </code>，或上表中的其他命令）来切换活动窗口。</p>
<p>关闭窗口</p>
<table>
<thead>
<tr>
<th>Ex命令</th>
<th>普通模式下命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:clo[se]</td>
<td><C-w>c</td>
<td>关闭活动窗口</td>
</tr>
<tr>
<td>:on[ly]</td>
<td><C-w>o</td>
<td>只保留活动窗口，关闭其他窗口</td>
</tr>
</tbody></table>
<p>改变窗口大小及重新排列窗口（建议，直接上鼠标）</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><C-w>=</td>
<td>使所有窗口等宽、等高</td>
</tr>
<tr>
<td><C-w>_</td>
<td>最大化活动窗口高度</td>
</tr>
<tr>
<td><C-w>|</td>
<td>最大化活动窗口宽度</td>
</tr>
<tr>
<td>[N]<C-w>_</td>
<td>把活动窗口的高度设为 N 行</td>
</tr>
<tr>
<td>[N]<C-w>|</td>
<td>把活动窗口的宽度设为 N 行</td>
</tr>
</tbody></table>
<h2 id="Tip-40-Organize-Your-Window-Layouts-with-Tab-Pages"><a href="#Tip-40-Organize-Your-Window-Layouts-with-Tab-Pages" class="headerlink" title="Tip 40 Organize Your Window Layouts with Tab Pages"></a>Tip 40 Organize Your Window Layouts with Tab Pages</h2><p>用标签页将窗口分组</p>
<p>在 Vim 中，标签页是可以容纳一系列窗口的容器。</p>
<p>Vim中，一个窗口显示一个<em>bufffer</em>，一个标签页有可以有多个窗口，标签页为这些窗口提供排版，而标签栏显示当前标签页的活动窗口。<strong>窗口与buffer的关系是一对一，标签页于窗口的关系是一对多</strong>。</p>
<p>在 Vim 中，当我们用<code>:edit</code>命令打开一个文件时， Vim 却不会自动创建一个新标签页，而是会创建一个新缓冲区，并把该缓冲区显示到当前窗口。</p>
<p>假设我们正在处理某个工程中的文件，并且已经把工作区分成了几个窗口。然后，突然接到一项紧急任务，我们不得不马上切换工作内容。我们不想在当前标签页里打开新文件，因为这会把我们精心布置的工作区弄乱。此时，我们可以新创建一个标签页，并在此标签页中工作。当我们准备继续做原来的工作时，只需切回原来的标签页即可，所有的窗口都保持着我们离开时的模样。</p>
<p><code>:lcd &#123;path&#125; </code>命令让我们可以设置当前窗口的本地工作目录。如果我们创建了一个新标签页，并用 <code>:lcd</code> 命令切换到另一个目录，那么就可以把每个标签页限制在不同的工程范围内。</p>
<p><strong>注意： :lcd 只影响当前窗口，而非当前标签页。</strong></p>
<p>如果一个标签页包含了两个或更多的窗口，我们可以用<code>:windo lcd &#123;path&#125;</code>命令为所有这些窗口设置本地工作目录。</p>
<p>打开及关闭标签页</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:tabe[dit] { filename }</td>
<td>在新标签页中打开 { filename }</td>
</tr>
<tr>
<td>&lt; C - w &gt;T</td>
<td>把当前窗口移到一个新标签页</td>
</tr>
<tr>
<td>:tabc[lose]</td>
<td>关闭当前标签页以及其中所有窗口</td>
</tr>
<tr>
<td>:tabo[nly]</td>
<td>只保留活动标签页，关闭其他标签页</td>
</tr>
</tbody></table>
<p>实际上也可使用<code>:tabnew</code>来创建标签页</p>
<p>在标签页间切换</p>
<table>
<thead>
<tr>
<th>Ex命令</th>
<th>普通模式命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:tabn[ext]  { N }</td>
<td>{  N }gt</td>
<td>切换到编号为N的标签页</td>
</tr>
<tr>
<td>:tabn[ext]</td>
<td>gt</td>
<td>切换到下一标签页</td>
</tr>
<tr>
<td>:tabp[revious]</td>
<td>gT</td>
<td>切换到上一标签页</td>
</tr>
</tbody></table>
<p>重排标签页</p>
<p>用 <code>:tabmove [N] </code>命令可以重新排列标签页。</p>
<ul>
<li>当<code> [N]</code> 为 0 时，当前标签页会被移到开头；</li>
<li>如果省略了 <code>[N]</code>，当前标签页会被移到结尾。</li>
<li>如果终端支持鼠标，或是正在使用 GVim，可通过鼠标拖曳来进行重排操作。</li>
</ul>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>I2C子系统</title>
    <url>/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="I2C通信"><a href="#I2C通信" class="headerlink" title="I2C通信"></a>I2C通信</h1><h2 id="I2C协议"><a href="#I2C协议" class="headerlink" title="I2C协议"></a>I2C协议</h2><p>I2C协议运用已经非常广泛，直接看图，一图胜前言。</p>
<p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/NO1.png" alt="image"></p>
<h2 id="I2C设备驱动数据处理"><a href="#I2C设备驱动数据处理" class="headerlink" title="I2C设备驱动数据处理"></a>I2C设备驱动数据处理</h2><ul>
<li>Linux内核代码：<code>drivers\i2c\i2c-core.c</code></li>
</ul>
<p>数据处理函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_transfer - execute a single or combined I2C message</span></span><br><span class="line"><span class="comment"> * @adap: Handle to I2C bus</span></span><br><span class="line"><span class="comment"> * @msgs: One or more messages to execute before STOP is issued to</span></span><br><span class="line"><span class="comment"> *	terminate the operation; each message begins with a START.</span></span><br><span class="line"><span class="comment"> * @num: Number of messages to be executed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns negative errno, else the number of messages executed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that there is no requirement that each message be sent to</span></span><br><span class="line"><span class="comment"> * the same slave address, although that is the most common model.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i2c_transfer</span><span class="params">(struct i2c_adapter *adap, struct i2c_msg *msgs, <span class="keyword">int</span> num)</span></span></span><br></pre></td></tr></table></figure>

<p>使用<code>i2c_transfer</code>函数发送数据之前要先构建好<code> i2c_msg</code>  。 </p>
<p><code>i2c_msg</code> 结构体定义在文件 <code>include/uapi/linux/i2c.h </code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> &#123;</span></span><br><span class="line">	__u16 addr;	<span class="comment">/* slave address			*/</span></span><br><span class="line">	__u16 flags;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_RD		0x0001	<span class="comment">/* read data, from slave to master */</span></span></span><br><span class="line">					<span class="comment">/* I2C_M_RD is guaranteed to be 0x0001! */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_TEN		0x0010	<span class="comment">/* this is a ten bit chip address */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_RECV_LEN		0x0400	<span class="comment">/* length will be first received byte */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_NO_RD_ACK		0x0800	<span class="comment">/* if I2C_FUNC_PROTOCOL_MANGLING */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_IGNORE_NAK	0x1000	<span class="comment">/* if I2C_FUNC_PROTOCOL_MANGLING */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_REV_DIR_ADDR	0x2000	<span class="comment">/* if I2C_FUNC_PROTOCOL_MANGLING */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_NOSTART		0x4000	<span class="comment">/* if I2C_FUNC_NOSTART */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_STOP		0x8000	<span class="comment">/* if I2C_FUNC_PROTOCOL_MANGLING */</span></span></span><br><span class="line">	__u16 len;		<span class="comment">/* msg length				*/</span></span><br><span class="line">	__u8 *buf;		<span class="comment">/* pointer to msg data			*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以读取 I2C 设备寄存器数据为例：</p>
<p>(参考正点原子)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[2];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* msg[0]，第一条写消息，发送要读取的寄存器地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].addr = addr; <span class="comment">/* I2C 设备地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].flags = <span class="number">0</span>; <span class="comment">/* 标记为发送数据 */</span></span><br><span class="line">msg[<span class="number">0</span>].buf = &amp;reg; <span class="comment">/* 读取的首地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].len = <span class="number">1</span>; <span class="comment">/* reg 长度 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* msg[1]，第二条读消息，读取寄存器数据 */</span></span><br><span class="line">msg[<span class="number">1</span>].addr = addr; <span class="comment">/* I2C 设备地址 */</span></span><br><span class="line">msg[<span class="number">1</span>].flags = I2C_M_RD; <span class="comment">/* 标记为读取数据 */</span></span><br><span class="line">msg[<span class="number">1</span>].buf = val; <span class="comment">/* 读取数据缓冲区 */</span></span><br><span class="line">msg[<span class="number">1</span>].len = len; <span class="comment">/* 要读取的数据长度 */</span></span><br><span class="line"></span><br><span class="line">ret = i2c_transfer(adapter, msg, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>向 I2C 设备寄存器写入数据：</p>
<p>(参考正点原子)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line">u8 b[<span class="number">256</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">client</span> =</span> (struct i2c_client *)</span><br><span class="line">dev-&gt;private_data;</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = reg; <span class="comment">/* 寄存器首地址 */</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;b[<span class="number">1</span>],buf,len); <span class="comment">/* 将要发送的数据拷贝到数组 b 里面 */</span></span><br><span class="line"></span><br><span class="line">msg.addr = addr; <span class="comment">/* I2C 设备地址 */</span></span><br><span class="line">msg.flags = <span class="number">0</span>; <span class="comment">/* 标记为写数据 */</span></span><br><span class="line"></span><br><span class="line">msg.buf = b; <span class="comment">/* 要发送的数据缓冲区 */</span></span><br><span class="line">msg.len = len + <span class="number">1</span>;   <span class="comment">/* 实际数据长度 + 寄存器地址长度*/</span></span><br><span class="line"></span><br><span class="line">ret = i2c_transfer(client-&gt;adapter, &amp;msg, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>Linux内核对<code>i2c_transfer</code>进一步封装，形成两个API函数分别用于I2C数据的接收和发送操作  。代码位于：<code>drivers\i2c\i2c-core.c</code></p>
<ul>
<li>i2c_master_recv</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_master_recv - issue a single I2C message in master receive mode</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @buf: Where to store data read from slave</span></span><br><span class="line"><span class="comment"> * @count: How many bytes to read, must be less than 64k since msg.len is u16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns negative errno, or else the number of bytes read.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i2c_master_recv</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, <span class="keyword">char</span> *buf, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<ul>
<li>i2c_master_send</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_master_send - issue a single I2C message in master transmit mode</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @buf: Data that will be written to the slave</span></span><br><span class="line"><span class="comment"> * @count: How many bytes to write, must be less than 64k since msg.len is u16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns negative errno, or else the number of bytes written.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i2c_master_send</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> count)</span></span></span><br></pre></td></tr></table></figure>

<h1 id="kernel中i2c驱动"><a href="#kernel中i2c驱动" class="headerlink" title="kernel中i2c驱动"></a>kernel中i2c驱动</h1><h2 id="核心-i2c-driver-结构体"><a href="#核心-i2c-driver-结构体" class="headerlink" title="核心  i2c_driver 结构体"></a>核心  i2c_driver 结构体</h2><p>分配、设置、注册一个i2c_driver结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">i2c_example_driver</span> =</span> &#123;</span><br><span class="line">	.driver = &#123;</span><br><span class="line">		.name = <span class="string">&quot;example&quot;</span>,</span><br><span class="line">		.of_match_table = of_match_ids_example,</span><br><span class="line">	&#125;,</span><br><span class="line">	.probe = i2c_example_driver_probe,</span><br><span class="line">	.remove = i2c_example_driver_remove,</span><br><span class="line">	.id_table = example_ids,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>出入口函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*入口函数 注册一个i2c_drvier */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">i2c_driver_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i2c_add_driver(&amp;i2c_example_driver);</span><br><span class="line">&#125;</span><br><span class="line">module_init(i2c_driver_init);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**出口函数 del一个i2c_drvier */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">i2c_driver_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	i2c_del_driver(&amp;i2c_example_driver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="i2c-driver表明能支持哪些设备"><a href="#i2c-driver表明能支持哪些设备" class="headerlink" title="i2c_driver表明能支持哪些设备"></a>i2c_driver表明能支持哪些设备</h2><p>i2c_driver表明能支持哪些设备：</p>
<ul>
<li><p>使用of_match_table来判断</p>
<ul>
<li>设备树中，某个I2C控制器节点下可以创建I2C设备的节点<ul>
<li>如果I2C设备节点的compatible属性跟of_match_table的某项兼容，则匹配成功</li>
</ul>
</li>
<li>i2c_client.name跟某个of_match_table[i].compatible值相同，则匹配成功</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">of_match_ids_example</span>[] =</span> &#123;</span><br><span class="line">	&#123; .compatible = <span class="string">&quot;com_name,chip_name&quot;</span>,   .data = <span class="literal">NULL</span>&#125;,</span><br><span class="line">	&#123; <span class="comment">/* END OF LIST */</span> &#125;  <span class="comment">/*最后空一项为必须，空闲为end 判断条件*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// of_ 开头一般与设备树关联</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用id_table来判断</p>
<ul>
<li>i2c_client.name跟某个id_table[i].name值相同，则匹配成功</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">example_ids</span>[] =</span> &#123;</span><br><span class="line">	&#123; <span class="string">&quot;chip_name&quot;</span>,  (<span class="keyword">kernel_ulong_t</span>)<span class="literal">NULL</span> &#125;,</span><br><span class="line">	&#123; <span class="comment">/* END OF LIST */</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>i2c_driver跟i2c_client匹配成功后，就调用<strong>i2c_driver.probe</strong>函数。</p>
<h2 id="i2c-client"><a href="#i2c-client" class="headerlink" title="i2c_client"></a>i2c_client</h2><p>参考资料 Linux内核文档: 5.0版本内核</p>
<ul>
<li><code>Documentation\i2c\instantiating-devices.rst</code></li>
<li><code>Documentation\i2c\writing-clients.rst</code></li>
</ul>
<p>i2c_client表示一个I2C设备，创建i2c_client的方法有4种：</p>
<ul>
<li><p>方法1</p>
<ul>
<li>通过I2C bus number来创建</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i2c_register_board_info</span><span class="params">(<span class="keyword">int</span> busnum, struct i2c_board_info <span class="keyword">const</span> *info, <span class="keyword">unsigned</span> len)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过设备树结点</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在某个I2C控制器的节点下，添加如下代码： */</span>		</span><br><span class="line">		ap3216c@<span class="number">1</span>e &#123;</span><br><span class="line">			compatible = <span class="string">&quot;lite-on,ap3216c&quot;</span>;</span><br><span class="line">			reg = &lt;<span class="number">0x1e</span>&gt;;</span><br><span class="line">		&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>方法2</p>
<p>有时候无法知道该设备挂载哪个I2C bus下，无法知道它对应的I2C bus number。<br>但是可以通过其他方法知道对应的i2c_adapter结构体。<br>可以使用下面两个函数来创建i2c_client：</p>
<ul>
<li>i2c_new_device</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">ap3216c_client</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">i2c_client_ap3216c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_adapter</span> *<span class="title">adapter</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_board_info</span> <span class="title">board_info</span> =</span> &#123;</span><br><span class="line">        I2C_BOARD_INFO(<span class="string">&quot;ap3216c&quot;</span>, <span class="number">0x1e</span>),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">    <span class="comment">/* register I2C device */</span></span><br><span class="line">    adapter = i2c_get_adapter(<span class="number">0</span>);</span><br><span class="line">    ap3216c_client = i2c_new_device(adapter, &amp;board_info);</span><br><span class="line">    i2c_put_adapter(adapter);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>i2c_new_probed_device</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">ap3216c_client</span>;</span></span><br><span class="line"><span class="comment">/* 罗列出所有可能的地址,这里只有一个*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> normal_i2c[] = &#123; <span class="number">0x1e</span>, I2C_CLIENT_END &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">i2c_client_ap3216c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_adapter</span> *<span class="title">adapter</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">i2c_board_info</span> <span class="title">i2c_info</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将名字信息写入i2c_info,先清0 */</span></span><br><span class="line">	<span class="built_in">memset</span>(&amp;i2c_info, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct i2c_board_info));</span><br><span class="line">	strscpy(i2c_info.type, <span class="string">&quot;ap3216c&quot;</span>, <span class="keyword">sizeof</span>(i2c_info.type));</span><br><span class="line"></span><br><span class="line">    adapter = i2c_get_adapter(<span class="number">0</span>); <span class="comment">/* 第0根i2c总线 */</span></span><br><span class="line">	ap3216c_client = i2c_new_probed_device(adapter, &amp;i2c_info,</span><br><span class="line">						   normal_i2c, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	i2c_put_adapter(adapter);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>差别</p>
<ul>
<li><p>i2c_new_device：</p>
<p>会创建i2c_client，即使该设备并不存在</p>
</li>
<li><p>i2c_new_probed_device：</p>
<p>它成功的话，会创建i2c_client，并且表示这个设备肯定存在</p>
<p>I2C设备的地址可能发生变化，比如AT24C02的引脚A2A1A0电平不一样时，设备地址就不一样</p>
<p>可以罗列出可能的地址</p>
<p>i2c_new_probed_device使用这些地址判断设备是否存在</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>方法3 (不推荐)：由i2c_driver.detect函数来判断是否有对应的I2C设备并生成i2c_client</p>
</li>
<li><p>方法4 : 通过用户空间(user-space)生成</p>
<p>调试时、或者不方便通过代码明确地生成i2c_client时，可以通过用户空间来生成。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个i2c_client, .name = &quot;eeprom&quot;, .addr=0x50, .adapter是i2c-3</span></span><br><span class="line"><span class="meta"># echo eeprom 0x50 &gt; /sys/bus/i2c/devices/i2c-3/new_device</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个i2c_client</span></span><br><span class="line"><span class="meta"># echo 0x50 &gt; /sys/bus/i2c/devices/i2c-3/delete_device</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="SMBus协议"><a href="#SMBus协议" class="headerlink" title="SMBus协议"></a>SMBus协议</h1><p>参考资料：</p>
<ul>
<li><p>Linux内核文档：<code>Documentation\i2c\smbus-protocol.rst</code></p>
</li>
<li><p>Linux内核代码：<code>drivers\i2c\i2c-core.c</code></p>
</li>
<li><p>SMBus协议：</p>
<ul>
<li><a href="http://www.smbus.org/specs/">http://www.smbus.org/specs/</a></li>
</ul>
</li>
</ul>
<h2 id="SMBus是I2C协议的一个子集。"><a href="#SMBus是I2C协议的一个子集。" class="headerlink" title="SMBus是I2C协议的一个子集。"></a>SMBus是I2C协议的一个子集。</h2><p>SMBus: System Management Bus，系统管理总线。</p>
<p>SMBus最初的目的是为智能电池、充电电池、其他微控制器之间的通信链路而定义的。<br>SMBus也被用来连接各种设备，包括电源相关设备，系统传感器，EEPROM通讯设备等等。<br>SMBus 为系统和电源管理这样的任务提供了一条控制总线，使用 SMBus 的系统，设备之间发送和接收消息都是通过 SMBus，而不是使用单独的控制线，这样可以节省设备的管脚数。<br>SMBus是基于I2C协议的，但SMBus要求更严格。</p>
<p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/NO2.png" alt="image"></p>
<p>如今很多设备都实现了SMBus，即使I2C控制器没有实现SMBus，软件方面也是可以使用I2C协议来模拟SMBus。<br><strong>在Linux上建议优先使用SMBus</strong>。</p>
<h2 id="SMBus与一般I2C协议的差别"><a href="#SMBus与一般I2C协议的差别" class="headerlink" title="SMBus与一般I2C协议的差别"></a>SMBus与一般I2C协议的差别</h2><ul>
<li><p>VDD的极限值不一样</p>
<ul>
<li>I2C协议：范围很广，甚至讨论了高达12V的情况</li>
<li>SMBus：1.8V~5V</li>
</ul>
</li>
<li><p>最小时钟频率、最大的<code>Clock Stretching </code></p>
<ul>
<li><p>Clock Stretching含义：某个设备需要更多时间进行内部的处理时，它可以把SCL拉低占住I2C总线</p>
</li>
<li><p>I2C协议：时钟频率最小值无限制，Clock Stretching时长也没有限制</p>
</li>
<li><p>SMBus：时钟频率最小值是10KHz，Clock Stretching的最大时间值也有限制</p>
</li>
</ul>
</li>
<li><p>地址回应(Address Acknowledge)</p>
<ul>
<li>I2C协议：没有强制要求必须发出回应信号</li>
<li>SMBus：强制要求必须发出回应信号，这样对方才知道该设备的状态：busy，failed，或是被移除了</li>
</ul>
</li>
<li><p>SMBus协议明确了数据的传输格式</p>
<ul>
<li>I2C协议：它只定义了怎么传输数据，但是并没有定义数据的格式，这完全由设备来定义</li>
<li>SMBus：定义了几种数据格式</li>
</ul>
</li>
<li><p>REPEATED START Condition(重复发出S信号)</p>
<ul>
<li>比如读EEPROM时，涉及2个操作：<ul>
<li>把存储地址发给设备</li>
<li>读数据</li>
</ul>
</li>
<li>在写、读之间，可以不发出P信号，而是直接发出S信号：这个S信号就是<code>REPEATED START</code></li>
<li>如下图所示<br><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/NO3.png" alt="image"></li>
</ul>
</li>
<li><p>SMBus Low Power Version </p>
<ul>
<li>SMBus也有低功耗的版本</li>
</ul>
</li>
</ul>
<h2 id="SMBus通信"><a href="#SMBus通信" class="headerlink" title="SMBus通信"></a>SMBus通信</h2><p>Linux内核上集成了SMBus，可以认为是对I2C的进一步封装，在与外设使用I2C子系统进行数据传输时，建议使用SMBus协议。</p>
<p>以下是常用的SMBus函数，更多资料参考内核源码：<code>drivers\i2c\i2c-core.c</code></p>
<h3 id="Receive-Byte"><a href="#Receive-Byte" class="headerlink" title="Receive Byte"></a>Receive Byte</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/04_smbus_receive_byte.png" alt="image"></p>
<p>读取一个字节，主机接收到一个字节后不需要回应(上图中N表示不回应)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_read_byte - SMBus &quot;receive byte&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;receive byte&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else the byte received from the device.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_read_byte</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Send-Byte"><a href="#Send-Byte" class="headerlink" title="Send Byte"></a>Send Byte</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/05_smbus_send_byte.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_write_byte - SMBus &quot;send byte&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @value: Byte to be sent</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;send byte&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else zero on success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_write_byte</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">	                      I2C_SMBUS_WRITE, value, I2C_SMBUS_BYTE, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Read-Byte"><a href="#Read-Byte" class="headerlink" title="Read Byte"></a>Read Byte</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/06_smbus_read_byte.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_read_byte_data - SMBus &quot;read byte&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @command: Byte interpreted by slave</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;read byte&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else a data byte received from the device.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_read_byte_data</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">i2c_smbus_data</span> <span class="title">data</span>;</span></span><br><span class="line">	<span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">	status = i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">				I2C_SMBUS_READ, command,</span><br><span class="line">				I2C_SMBUS_BYTE_DATA, &amp;data);</span><br><span class="line">	<span class="keyword">return</span> (status &lt; <span class="number">0</span>) ? status : data.byte;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Read-Word"><a href="#Read-Word" class="headerlink" title="Read Word"></a>Read Word</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/07_smbus_read_word.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_read_word_data - SMBus &quot;read word&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @command: Byte interpreted by slave</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;read word&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else a 16-bit unsigned &quot;word&quot; received from the device.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_read_word_data</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">i2c_smbus_data</span> <span class="title">data</span>;</span></span><br><span class="line">	<span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">	status = i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">				I2C_SMBUS_READ, command,</span><br><span class="line">				I2C_SMBUS_WORD_DATA, &amp;data);</span><br><span class="line">	<span class="keyword">return</span> (status &lt; <span class="number">0</span>) ? status : data.word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Write-Byte"><a href="#Write-Byte" class="headerlink" title="Write Byte"></a>Write Byte</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/08_smbus_write_byte.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_write_byte_data - SMBus &quot;write byte&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @command: Byte interpreted by slave</span></span><br><span class="line"><span class="comment"> * @value: Byte being written</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;write byte&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else zero on success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_write_byte_data</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 command,</span></span></span><br><span class="line"><span class="params"><span class="function">			      u8 value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">i2c_smbus_data</span> <span class="title">data</span>;</span></span><br><span class="line">	data.byte = value;</span><br><span class="line">	<span class="keyword">return</span> i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">			      I2C_SMBUS_WRITE, command,</span><br><span class="line">			      I2C_SMBUS_BYTE_DATA, &amp;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Write-Word"><a href="#Write-Word" class="headerlink" title="Write Word"></a>Write Word</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/09_smbus_write_word.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_write_word_data - SMBus &quot;write word&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @command: Byte interpreted by slave</span></span><br><span class="line"><span class="comment"> * @value: 16-bit &quot;word&quot; being written</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;write word&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else zero on success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_write_word_data</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 command,</span></span></span><br><span class="line"><span class="params"><span class="function">			      u16 value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">i2c_smbus_data</span> <span class="title">data</span>;</span></span><br><span class="line">	data.word = value;</span><br><span class="line">	<span class="keyword">return</span> i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">			      I2C_SMBUS_WRITE, command,</span><br><span class="line">			      I2C_SMBUS_WORD_DATA, &amp;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Linux驱动</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>driver</tag>
        <tag>I2C</tag>
      </tags>
  </entry>
  <entry>
    <title>SPI子系统</title>
    <url>/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-SPI%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="SPI驱动框架"><a href="#SPI驱动框架" class="headerlink" title="SPI驱动框架"></a>SPI驱动框架</h1><p>SPI 驱动框架和 I2C 很类似 ，都分为主机控制器驱动和设备驱动。</p>
<h1 id="SPI主机驱动"><a href="#SPI主机驱动" class="headerlink" title="SPI主机驱动"></a>SPI主机驱动</h1><p>​    SPI 主机驱动就是 SOC 的 SPI 控制器驱动，类似 I2C 驱动里面的适配器驱动。 Linux 内核<br>使用结构体<code>spi_master</code> 表示 SPI 主机驱动 。</p>
<p>​    SPI 主机驱动的核心就是申请 spi_master，然后初始化 spi_master，最后向 Linux 内核注册<br>spi_master。  </p>
<p>​    和 I2C 适配器驱动一样， SPI 主机驱动一般都是半导体厂商去编写的。</p>
<h1 id="SPI-设备驱动"><a href="#SPI-设备驱动" class="headerlink" title="SPI 设备驱动"></a>SPI 设备驱动</h1><p>​    Linux 内核使用 spi_driver 结构体来表示 spi 设备驱动。 SPI 设备驱动的关键就是 <code>spi_driver</code> ，申请，设置，向内核注册 <code>spi_driver</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">spi_driver</span> <span class="title">chip_spi_driver</span> =</span> &#123;</span><br><span class="line">	.probe		= chip_spi_probe,</span><br><span class="line">	.remove     = chip_spi_remove,</span><br><span class="line">	.driver = &#123;</span><br><span class="line">		.name	= <span class="string">&quot;chip&quot;</span>,</span><br><span class="line">		.owner = THIS_MODULE,</span><br><span class="line">		.of_match_table = chip_of_match,</span><br><span class="line">	&#125;,</span><br><span class="line">	.id_table	= chip_id,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="spi-driver-注册"><a href="#spi-driver-注册" class="headerlink" title="spi_driver 注册"></a>spi_driver 注册</h2><ol>
<li>传统方法</li>
</ol>
<p>在驱动入口init函数中，调用<code>spi_register_driver</code> 来注册 spi_driver。  </p>
<p>在驱动出口exit函数中，调用<code>spi_unregister_driver</code> 来注销 spi_driver</p>
<ol start="2">
<li>使用宏定义<code>module_spi_driver</code> 来直接注册spi_driver</li>
</ol>
<p>这个宏定义将 spi_register/unregister_driver() 与 module_init 和 module_exit 封装了起来。</p>
<p>注册完成，匹配成功就可调用probe函数</p>
<h2 id="SPI-device-与-driver-匹配"><a href="#SPI-device-与-driver-匹配" class="headerlink" title="SPI device 与 driver 匹配"></a>SPI device 与 driver 匹配</h2><p>同样与I2C子系统非常相似，当匹配成功， probe 函数就会被调用。  </p>
<p>常用compatible属性进行匹配。</p>
<h2 id="spi-driver设置"><a href="#spi-driver设置" class="headerlink" title="spi_driver设置"></a>spi_driver设置</h2><p>spi设备驱动本质上任属于字符设备驱动范畴。</p>
<ul>
<li>在prob函数中</li>
</ul>
<p>进行字符设备的注册，设备节点的创建，将<code>file_operations</code>结构体注册进内核，并初始化<code>spi_device</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">spi_device</span> *<span class="title">spi</span>;</span> </span><br><span class="line"></span><br><span class="line">spi-&gt;mode = SPI_MODE_0; <span class="comment">/*MODE0，CPOL=0，CPHA=0*/</span></span><br><span class="line">spi_setup(spi);</span><br></pre></td></tr></table></figure>

<ul>
<li>在remove函数</li>
</ul>
<p>进行与prob函数中顺序相反的注销。</p>
<ul>
<li>填充<code>file_operations</code>结构体的open, read, write，release等函数。</li>
</ul>
<p>注意：platform_device 中如果不提供 <strong>release</strong> 函数 ，则在调用 platform_device_unregister 时会出现警告，</p>
<p>如果实在无事可做，可以提供一个空的release 函数。</p>
<h1 id="SPI-设备树节点"><a href="#SPI-设备树节点" class="headerlink" title="SPI 设备树节点"></a>SPI 设备树节点</h1><p>设备树添加节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&amp;ecspi3 &#123; </span><br><span class="line">    pinctrl-names = &quot;default&quot;;</span><br><span class="line">    pinctrl-0 = &lt;&amp;pinctrl_ecspi3&gt;;</span><br><span class="line">    cs-gpios = &lt;&amp;gpio1 20 GPIO_ACTIVE_LOW&gt;; /* 软件片选 */</span><br><span class="line">    status = &quot;okay&quot;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    spidev: icm20608@0&#123;</span><br><span class="line">        compatible = &quot;invensense,icm20608&quot;;</span><br><span class="line">        interrupt-parent = &lt;&amp;gpio1&gt;;</span><br><span class="line">        interrupts = &lt;1 1&gt;;</span><br><span class="line">        spi-max-frequency = &lt;8000000&gt;; </span><br><span class="line">        reg = &lt;0&gt;; </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>pinctrl子系统修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pinctrl_ecspi3: ecspi3 &#123;              </span><br><span class="line">            fsl,pins = &lt;</span><br><span class="line">        MX6UL_PAD_UART2_CTS_B__ECSPI3_MOSI         0x000010B0</span><br><span class="line">        MX6UL_PAD_UART2_RTS_B__ECSPI3_MISO         0x000010B0</span><br><span class="line">        MX6UL_PAD_UART2_RX_DATA__ECSPI3_SCLK       0x000010B0</span><br><span class="line">        //MX6UL_PAD_UART2_TX_DATA__ECSPI3_SS0        0x000010B0//硬件片选</span><br><span class="line">        MX6UL_PAD_UART2_TX_DATA__GPIO1_IO20        0x000010B0 //软件片选                </span><br><span class="line">    &gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>片选引脚使用软件片选，即使用一个GPIO引脚进行CS引脚模拟。</p>
<h1 id="SPI-通信过程"><a href="#SPI-通信过程" class="headerlink" title="SPI 通信过程"></a>SPI 通信过程</h1><h2 id="spi通信步骤"><a href="#spi通信步骤" class="headerlink" title="spi通信步骤"></a>spi通信步骤</h2><ol>
<li>申请并初始化 spi_transfer，设置 spi_transfer 的 tx_buf 成员变量， tx_buf 为要发送的数<br>据。然后设置 rx_buf 成员变量， rx_buf 保存着接收到的数据。最后设置 len 成员变量，也就是<br>要进行数据通信的长度。</li>
<li>使用 spi_message_init 函数初始化 spi_message。</li>
<li>使用spi_message_add_tail函数将前面设置好的spi_transfer添加到spi_message队列中。</li>
<li>使用 spi_sync 函数完成 SPI 数据同步传输。   </li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SPI 多字节发送 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">spi_send</span><span class="params">(struct spi_device *spi, u8 *buf, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_message</span> <span class="title">message</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_transfer</span> <span class="title">transfer</span> =</span> &#123;</span><br><span class="line">        .tx_buf = buf,</span><br><span class="line">        .len = len,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    spi_message_init(&amp;message); <span class="comment">/* 初始化 spi_message */</span></span><br><span class="line">    spi_message_add_tail(transfer, &amp;message);<span class="comment">/* 将 spi_transfer 添加到 spi_message 队列 */</span></span><br><span class="line">    ret = spi_sync(spi, &amp;message); <span class="comment">/* 同步传输 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI 多字节接收 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">spi_receive</span><span class="params">(struct spi_device *spi, u8 *buf, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_message</span> <span class="title">message</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_transfer</span> <span class="title">transfer</span> =</span> &#123;</span><br><span class="line">        .rx_buf = buf,</span><br><span class="line">        .len = len,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    spi_message_init(&amp;message); <span class="comment">/* 初始化 spi_message */</span></span><br><span class="line">    spi_message_add_tail(transfer, &amp;message);<span class="comment">/* 将 spi_transfer 添加到 spi_message 队列 */</span></span><br><span class="line">    ret = spi_sync(spi, &amp;message); <span class="comment">/* 同步传输 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        SPI 数据传输也支持异步传输，异步传输不会阻塞地等到完成，异步传输需要设置 spi_message 中的 complete成员变量， <code>complete</code> 是一个回调函数，当 SPI 异步传输完成以后此函数就会被调用。</p>
<p> SPI 异步传输函数为 spi_async，函数原型如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spi_async</span><span class="params">(struct spi_device *spi, struct spi_message *message)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="spi通信函数封装"><a href="#spi通信函数封装" class="headerlink" title="spi通信函数封装"></a>spi通信函数封装</h2><blockquote>
<p>参考内核源码 /kernel/driver/spi/spi.c spi.h</p>
</blockquote>
<p>实际还是 spi_transfer， spi_message进一步封装</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">spi_write</span><span class="params">(struct spi_device *spi, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">spi_read</span><span class="params">(struct spi_device *spi, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">spi_write_then_read</span><span class="params">(struct spi_device *spi,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="keyword">const</span> <span class="keyword">void</span> *txbuf, <span class="keyword">unsigned</span> n_tx,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="keyword">void</span> *rxbuf, <span class="keyword">unsigned</span> n_rx)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">ssize_t</span> <span class="title">spi_w8r8</span><span class="params">(struct spi_device *spi, u8 cmd)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">ssize_t</span> <span class="title">spi_w8r16</span><span class="params">(struct spi_device *spi, u8 cmd)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux驱动</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>driver</tag>
        <tag>SPI</tag>
      </tags>
  </entry>
  <entry>
    <title>git添加SSH Key</title>
    <url>/2021/09/12/git-git-sshkey/</url>
    <content><![CDATA[<h1 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h1><p>先配置git邮箱和用户名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;user@email.com&quot;</span><br><span class="line">git config --global user.name &quot;name&quot;</span><br></pre></td></tr></table></figure>
<p>可通过以下命令查看配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h1 id="生成SSH-keys"><a href="#生成SSH-keys" class="headerlink" title="生成SSH keys"></a>生成SSH keys</h1><p>生成SSH keys 密钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>默认会在相应路径下（/your_home_path）生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件</p>
<ul>
<li>输入passphrase（本步骤可以跳过）</li>
<li><code>id_rsa.pub</code>文件，里面的信息即为SSH key</li>
</ul>
<h1 id="添加ssh-key"><a href="#添加ssh-key" class="headerlink" title="添加ssh key"></a>添加ssh key</h1><ol>
<li><p>在git bash 界面 cat <code>id_rsa.pub</code> 文件</p>
</li>
<li><p>将打印信息上传至github <code>setting -&gt; ADD SSH key</code></p>
</li>
</ol>
<h1 id="选择ssh链接"><a href="#选择ssh链接" class="headerlink" title="选择ssh链接"></a>选择ssh链接</h1><p>git clone 代码有HTTP链接和 SSH链接，两者密钥，或者认证方式不同，选择SSH方式链接</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>代码中特殊注释</title>
    <url>/2021/09/13/C%E7%BC%96%E7%A8%8B-%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<p>在阅读一些开源代码时，常会在注释中碰到诸如：<code>TODO、FIXME 和 XXX</code>的单词，它们是有其特殊含义的。在编写代码的时候我们可以利用这些公认的特殊注释方式快速简介表达自己的目地。</p>
<p>TODO: &lt;说明&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常出现在一些函数的上方或者内部，它表示该注释标识处，有一些代码功能还未实现，未来会实现。</span><br><span class="line">&lt;说明&gt; 中应该简单描述下该功能。</span><br></pre></td></tr></table></figure>
<p>FIXME: &lt;说明&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果代码中有该标识，说明标识处代码需要修正，甚至代码是错误的，有可能无法正常工作，需要修复，</span><br><span class="line">&lt;说明&gt; 中应该简单描述下如何修复该问题。</span><br></pre></td></tr></table></figure>

<p>XXX: &lt;说明&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果代码中有该标识，说明标识处代码虽然实现了功能，但是实现的方法有待商榷，将来可以进行一些改进优化，</span><br><span class="line">&lt;说明&gt; 中应该简单描述下改进优化的策略。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C编程</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看修改环境变量</title>
    <url>/2021/09/13/Linux-shell-Linux%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="linux变量的种类"><a href="#linux变量的种类" class="headerlink" title="linux变量的种类"></a>linux变量的种类</h1><p>按变量的生存周期来划分，Linux变量可分为两类：</p>
<ol>
<li>永久的：需要修改配置文件，变量永久生效。</li>
<li>临时的：使用export命令声明即可，变量在关闭shell时失效。</li>
</ol>
<p>设置变量有三种方法：</p>
<ol>
<li>在<code>/etc/profile</code>文件中添加变量，对所有用户永久生效</li>
<li>在用户目录下对<code>.bashrc</code>文件进行修改，对单一用户永久生效</li>
<li>直接运行<code>export</code>命令定义变量，只是临时对当前<code>shell</code>有效，<code>shell</code>退出后变量失效</li>
</ol>
<h1 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h1><ol>
<li>可用 export 命令查看PATH值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export</span><br><span class="line">//但这种方式会显示一大堆数据</span><br></pre></td></tr></table></figure></li>
<li>单独查看PATH环境变量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//应用较多</span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure></li>
<li>使用printenv打印环境变量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printenv</span><br></pre></td></tr></table></figure></li>
<li>使用set查看所有本地定义的环境变量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="临时添加环境变量"><a href="#临时添加环境变量" class="headerlink" title="临时添加环境变量"></a>临时添加环境变量</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/opt/STM/STLinux-2.3/devkit/sh4/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>PATH 设置会在终端关闭后就会消失。</p>
<h1 id="永久添加环境变量，"><a href="#永久添加环境变量，" class="headerlink" title="永久添加环境变量，"></a>永久添加环境变量，</h1><ol>
<li>当前用户生效<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">//在文档最后，添加:</span><br><span class="line"></span><br><span class="line">export PATH=&quot;/opt/STM/STLinux-2.3/devkit/sh4/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">//保存，退出，然后运行：</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>所有用户生效<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">//在文档最后，添加:</span><br><span class="line"></span><br><span class="line">export PATH=&quot;/opt/STM/STLinux-2.3/devkit/sh4/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">//保存，退出，然后运行：</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
不报错则成功。</li>
</ol>
<blockquote>
<p>注意：当然$PATH是放在开头还是最后是没有影响的,要注意 ：的使用</p>
</blockquote>
<h1 id="常用的环境变量"><a href="#常用的环境变量" class="headerlink" title="常用的环境变量"></a>常用的环境变量</h1><ul>
<li>PATH 决定了shell将到哪些目录中寻找命令或程序</li>
<li>HOME 当前用户主目录</li>
<li>HISTSIZE　历史记录数</li>
<li>LOGNAME 当前用户的登录名</li>
<li>HOSTNAME　指主机的名称</li>
<li>SHELL 当前用户Shell类型</li>
<li>LANGUGE 　语言相关的环境变量，多语言可以修改此环境变量</li>
<li>MAIL　当前用户的邮件存放目录</li>
<li>PS1　基本提示符，对于root用户是#，对于普通用户是$</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>1、执行多次source /etc/profile之后，打印PATH的值会出现重复</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装三部曲</title>
    <url>/2021/09/13/Linux-shell-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%B8%89%E9%83%A8%E6%9B%B2/</url>
    <content><![CDATA[<h1 id="编译安装与卸载-make-install-与-make-uninstall"><a href="#编译安装与卸载-make-install-与-make-uninstall" class="headerlink" title="编译安装与卸载 make install 与 make uninstall"></a>编译安装与卸载 make install 与 make uninstall</h1><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>通用过程</p>
<ol>
<li>./configure</li>
<li>make</li>
<li>make install</li>
</ol>
<p>注意：第一步<code>./configure</code>时，可以加<code>--prefix</code>的参数指定安装路径<br>更多参数自己参考</p>
<h2 id="make-uninstall-卸载安装的软件"><a href="#make-uninstall-卸载安装的软件" class="headerlink" title="make uninstall 卸载安装的软件"></a>make uninstall 卸载安装的软件</h2><blockquote>
<p>注意 Makefile 文件里的指令<br>一般 install 对应 uninstall ,大部分的作者会写有卸载的部分，这时只要简单地执行</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make unistall</span><br></pre></td></tr></table></figure>

<p>就可以，如果作者懒没有写，那就只有根据<code>make install</code>中的步骤，看它把什么文件拷到哪去了，然后分别手动删除。</p>
<p>注意：<strong>编译安装完成后，不要删除源代码</strong>，不然就算作者写了unnistall目标，也没有makefile可以执行了。</p>
<h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure --target=riscv64-unknown-elf</span><br></pre></td></tr></table></figure>

<p>交叉编译配置参数主要有三个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System types:</span><br><span class="line">--build</span><br><span class="line">--host</span><br><span class="line">--target</span><br></pre></td></tr></table></figure>

<ul>
<li>build 一般与 host 相同</li>
<li>host 指运行在的 PC 端</li>
<li>target 指交叉编译的架构，不配置即可 host 保持一致</li>
</ul>
<h2 id="gdb-添加-python-支持"><a href="#gdb-添加-python-支持" class="headerlink" title="gdb 添加 python 支持"></a>gdb 添加 python 支持</h2><p><code>./configure --help</code> 中并没有 <code>--with-python</code> 选项，但并不影响。</p>
<p>在配置阶段加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which python</span><br><span class="line"></span><br><span class="line">./configure --with-python=/path</span><br></pre></td></tr></table></figure>

<p>添加 python 支持。</p>
<p>NOTE：GDB 源码编译可行，其他类型的源码编译是否可以举一反三。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim配置</title>
    <url>/2021/09/15/vim-vim%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="win10-右键菜单添加使用-Neovim-打开方式"><a href="#win10-右键菜单添加使用-Neovim-打开方式" class="headerlink" title="win10 右键菜单添加使用 Neovim 打开方式"></a>win10 右键菜单添加使用 Neovim 打开方式</h1><ol>
<li><p>打开注册表编辑器，开始–&gt;运行–&gt;regedit</p>
</li>
<li><p>定位到：HKEY_CLASSSES_ROOT—&gt; * —&gt;Shell，在Shell 上右击，新建—&gt; 项，输入：  Open With Neovim（使用Neovim打开）</p>
</li>
<li><p>在 Open With Neovim 右键—&gt;新建—&gt;字符串值，数值名称设置为：Icon，数值数据设置为：xxx\nvim-qt.exe,0 (替换成自己的路径地址)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 以 Gvim 举例，两者类似，注意应用时候替换路劲</span><br><span class="line">*  数值名称：Icon</span><br><span class="line">*  数值数据：C:\MyProgram\gvim73\gVimPortable\vim\vim73\gvim.exe,0</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p><img src="vim_01.png"></p>
</li>
</ol>
<p>上面的设置会带来一个小问题：当文件名的最后一个字符为空格时，使用VIM打开某个文件时会新建一个空白的文件，而不是直接打开该文件。</p>
<ul>
<li>解决方法：加引号，如下图所示，注意应用时候替换路径<blockquote>
<p>xxxx.exe “%1”</p>
</blockquote>
</li>
</ul>
<p><img src="vim_02.png"></p>
<h1 id="80字符提示条"><a href="#80字符提示条" class="headerlink" title="80字符提示条"></a>80字符提示条</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; 设置编码最长80字符提示条，额外高亮显示第80列</span><br><span class="line">set cc=80</span><br><span class="line">&quot; 超过长度自动折行 default ,根据屏幕长度</span><br><span class="line">&quot; Tjis option changes how text is displayed. It do not change the text</span><br><span class="line">set wrap</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="vim-开启错误信息一闪而过-可使用命令查看"><a href="#vim-开启错误信息一闪而过-可使用命令查看" class="headerlink" title="vim 开启错误信息一闪而过,可使用命令查看"></a>vim 开启错误信息一闪而过,可使用命令查看</h1><blockquote>
<p><code>:messages</code></p>
</blockquote>
<h1 id="使用silent静默执行命令"><a href="#使用silent静默执行命令" class="headerlink" title="使用silent静默执行命令"></a>使用silent静默执行命令</h1><p>如果不希望显示提示信息，那么可以使用<code>:silent</code>命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于*`git` executable not found. Most commands will not be available. To suppress this message, prepend `silent!` to `call plug#begin(...)`.*错误</span><br></pre></td></tr></table></figure>
<p>在vim配置文件中修改为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">silent! call plug#begin</span><br></pre></td></tr></table></figure>

<h1 id="neovim-qt-标签栏显示有问题"><a href="#neovim-qt-标签栏显示有问题" class="headerlink" title="neovim-qt 标签栏显示有问题"></a>neovim-qt 标签栏显示有问题</h1><p>neovim 还有一个配置文件，ginit.vim ，与init.vim 同一个目录下。</p>
<ul>
<li>gitee : <a href="https://gitee.com/mirrors/neovim-qt">https://gitee.com/mirrors/neovim-qt</a></li>
<li>github: <a href="https://github.com/equalsraf/neovim-qt">https://github.com/equalsraf/neovim-qt</a></li>
<li>wiki: <a href="https://github.com/equalsraf/neovim-qt/wiki/Configuration-Options#GuiFont">https://github.com/equalsraf/neovim-qt/wiki/Configuration-Options#GuiFont</a></li>
</ul>
<p>These options are specific to Neovim Qt. The options cannot be set from <code>init.vim</code>, they must be set from <code>ginit.vim</code>.</p>
<p>Recommended <code>ginit.vim</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; Enable Mouse</span><br><span class="line">set mouse=a</span><br><span class="line"></span><br><span class="line">&quot; Set Editor Font</span><br><span class="line">if exists(&#x27;:GuiFont&#x27;)</span><br><span class="line">    &quot; Use GuiFont! to ignore font errors</span><br><span class="line">    GuiFont &#123;font_name&#125;:h&#123;size&#125;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; Disable GUI Tabline</span><br><span class="line">if exists(&#x27;:GuiTabline&#x27;)</span><br><span class="line">    GuiTabline 0</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; Disable GUI Popupmenu</span><br><span class="line">if exists(&#x27;:GuiPopupmenu&#x27;)</span><br><span class="line">    GuiPopupmenu 0</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; Enable GUI ScrollBar</span><br><span class="line">if exists(&#x27;:GuiScrollBar&#x27;)</span><br><span class="line">    GuiScrollBar 1</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; Right Click Context Menu (Copy-Cut-Paste)</span><br><span class="line">nnoremap &lt;silent&gt;&lt;RightMouse&gt; :call GuiShowContextMenu()&lt;CR&gt;</span><br><span class="line">inoremap &lt;silent&gt;&lt;RightMouse&gt; &lt;Esc&gt;:call GuiShowContextMenu()&lt;CR&gt;</span><br><span class="line">vnoremap &lt;silent&gt;&lt;RightMouse&gt; :call GuiShowContextMenu()&lt;CR&gt;gv</span><br></pre></td></tr></table></figure>

<p>For more options, try <code>:help nvim_gui_shim</code> and scroll down to <code>Commands</code></p>
<h1 id="使用powerline-字体斜体导致状态栏消失"><a href="#使用powerline-字体斜体导致状态栏消失" class="headerlink" title="使用powerline 字体斜体导致状态栏消失"></a>使用powerline 字体斜体导致状态栏消失</h1><p>增大行距</p>
<p>set linespace=5</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>If判断指针非空</title>
    <url>/2021/09/15/C%E7%BC%96%E7%A8%8B-if%E5%88%A4%E6%96%AD%E6%8C%87%E9%92%88%E9%9D%9E%E7%A9%BA/</url>
    <content><![CDATA[<h1 id="if-p-和if-p-含义"><a href="#if-p-和if-p-含义" class="headerlink" title="if(p)和if(!p)含义"></a>if(p)和if(!p)含义</h1><p>对于 <code>int *p;</code> 来说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!p) ==&gt; if (p == NULL)</span><br><span class="line">if (p)  ==&gt; if (p != NULL)</span><br></pre></td></tr></table></figure>

<p>对于 <code>int p;</code> 来说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!p) ==&gt; if (p == 0)</span><br><span class="line">if (p)  ==&gt; if (p != 0)</span><br></pre></td></tr></table></figure>

<p><strong>在c语言中，0 被认为是假，非0 被认为是真</strong></p>
<p>如果p的值为0，!p判定为真；</p>
<p>如果p的值不是0，!p的判定为假</p>
<p>如果是一个指针，指针有内容，即：p的值不是0，!p的判定为假</p>
<p>如果指针没有内容，NULL，即：p的值为0，!p判定为真；</p>
]]></content>
      <categories>
        <category>C编程</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Dtb反编译</title>
    <url>/2021/09/25/Linux-shell-dtb%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<p>dts←→dtb</p>
<ol>
<li><p>反编译dtb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dtc -I dtb -O dts -o *.dts  *.dtb</span><br></pre></td></tr></table></figure></li>
<li><p>正编译dts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dtc -I dts -O dtb -o *.dtb  *.dts</span><br></pre></td></tr></table></figure></li>
<li><p>dtc -help</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: dtc [options] &lt;input file&gt;</span><br><span class="line"></span><br><span class="line">Options: -[qI:O:o:V:d:R:S:p:a:fb:i:H:sW:E:@AThv]</span><br><span class="line">  -q, --quiet                </span><br><span class="line">	Quiet: -q suppress warnings, -qq errors, -qqq all</span><br><span class="line">  -I, --in-format &lt;arg&gt;      </span><br><span class="line">	Input formats are:</span><br><span class="line">		dts - device tree source text</span><br><span class="line">		dtb - device tree blob</span><br><span class="line">		fs  - /proc/device-tree style directory</span><br><span class="line">  -o, --out &lt;arg&gt;            </span><br><span class="line">	Output file</span><br><span class="line">  -O, --out-format &lt;arg&gt;     </span><br><span class="line">	Output formats are:</span><br><span class="line">		dts - device tree source text</span><br><span class="line">		dtb - device tree blob</span><br><span class="line">		asm - assembler source</span><br><span class="line">  -V, --out-version &lt;arg&gt;    </span><br><span class="line">	Blob version to produce, defaults to 17 (for dtb and asm output)</span><br><span class="line">  -d, --out-dependency &lt;arg&gt; </span><br><span class="line">	Output dependency file</span><br><span class="line">  -R, --reserve &lt;arg&gt;        </span><br><span class="line">	Make space for &lt;number&gt; reserve map entries (for dtb and asm output)</span><br><span class="line">  -S, --space &lt;arg&gt;          </span><br><span class="line">	Make the blob at least &lt;bytes&gt; long (extra space)</span><br><span class="line">  -p, --pad &lt;arg&gt;            </span><br><span class="line">	Add padding to the blob of &lt;bytes&gt; long (extra space)</span><br><span class="line">  -a, --align &lt;arg&gt;          </span><br><span class="line">	Make the blob align to the &lt;bytes&gt; (extra space)</span><br><span class="line">  -b, --boot-cpu &lt;arg&gt;       </span><br><span class="line">	Set the physical boot cpu</span><br><span class="line">  -f, --force                </span><br><span class="line">	Try to produce output even if the input tree has errors</span><br><span class="line">  -i, --include &lt;arg&gt;        </span><br><span class="line">	Add a path to search for include files</span><br><span class="line">  -s, --sort                 </span><br><span class="line">	Sort nodes and properties before outputting (useful for comparing trees)</span><br><span class="line">  -H, --phandle &lt;arg&gt;        </span><br><span class="line">	Valid phandle formats are:</span><br><span class="line">		legacy - &quot;linux,phandle&quot; properties only</span><br><span class="line">		epapr  - &quot;phandle&quot; properties only</span><br><span class="line">		both   - Both &quot;linux,phandle&quot; and &quot;phandle&quot; properties</span><br><span class="line">  -W, --warning &lt;arg&gt;        </span><br><span class="line">	Enable/disable warnings (prefix with &quot;no-&quot;)</span><br><span class="line">  -E, --error &lt;arg&gt;          </span><br><span class="line">	Enable/disable errors (prefix with &quot;no-&quot;)</span><br><span class="line">  -@, --symbols              </span><br><span class="line">	Enable generation of symbols</span><br><span class="line">  -A, --auto-alias           </span><br><span class="line">	Enable auto-alias of labels</span><br><span class="line">  -T, --annotate             </span><br><span class="line">	Annotate output .dts with input source file and line (-T -T for more details)</span><br><span class="line">  -h, --help                 </span><br><span class="line">	Print this help and exit</span><br><span class="line">  -v, --version              </span><br><span class="line">	Print version and exit</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>dts</tag>
      </tags>
  </entry>
  <entry>
    <title>Tmux使用指南</title>
    <url>/2021/12/12/tmux-tmux%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="tmux使用指南"><a href="#tmux使用指南" class="headerlink" title="tmux使用指南"></a>tmux使用指南</h1><h2 id="tmux快捷指令"><a href="#tmux快捷指令" class="headerlink" title="tmux快捷指令"></a>tmux快捷指令</h2><p>tmux的所有指令，都包含同一个前缀，默认为<code>Ctrl+b</code>，但两按键相隔甚远，推荐<code>Ctrl+a</code></p>
<h3 id="系统指令"><a href="#系统指令" class="headerlink" title="系统指令"></a>系统指令</h3><table>
<thead>
<tr>
<th>前缀</th>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + a</td>
<td>?</td>
<td>显示快捷键帮助文档</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>d</td>
<td>断开当前会话</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>D</td>
<td>选择要断开的会话</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>Ctrl+z</td>
<td>挂起当前会话</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>r</td>
<td>强制重载当前会话</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>s</td>
<td>显示会话列表用于选择并切换</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>:</td>
<td>进入命令行模式，此时可直接输入ls等命令</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>[</td>
<td>进入复制模式，按q退出</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>]</td>
<td>粘贴复制模式中复制的文本</td>
</tr>
<tr>
<td>Ctrl + a</td>
<td>~</td>
<td>列出提示信息缓存</td>
</tr>
</tbody></table>
<h3 id="窗口指令（window）"><a href="#窗口指令（window）" class="headerlink" title="窗口指令（window）"></a>窗口指令（window）</h3><table>
<thead>
<tr>
<th>前缀</th>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+a</td>
<td>c</td>
<td>新建窗口</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>&amp;</td>
<td>关闭当前窗口（关闭前需输入y or n确认）</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>0~9</td>
<td>切换到指定窗口</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>p</td>
<td>切换到上一窗口</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>n</td>
<td>切换到下一窗口</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>w</td>
<td>打开窗口列表，用于且切换窗口</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>,</td>
<td>重命名当前窗口</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>.</td>
<td>修改当前窗口编号（适用于窗口重新排序）</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>f</td>
<td>快速定位到窗口（输入关键字匹配窗口名称）</td>
</tr>
</tbody></table>
<h3 id="面板指令-panel"><a href="#面板指令-panel" class="headerlink" title="面板指令(panel)"></a>面板指令(panel)</h3><table>
<thead>
<tr>
<th>前缀</th>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+b</td>
<td>“</td>
<td>当前面板上下一分为二，下侧新建面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>%</td>
<td>当前面板左右一分为二，右侧新建面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>x</td>
<td>关闭当前面板（关闭前需输入y or n确认）</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>z</td>
<td>最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>!</td>
<td>将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>;</td>
<td>切换到最后一次使用的面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>q</td>
<td>显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>{</td>
<td>向前置换当前面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>}</td>
<td>向后置换当前面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>Ctrl+o</td>
<td>顺时针旋转当前窗口中的所有面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>方向键</td>
<td>移动光标切换面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>o</td>
<td>选择下一面板</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>空格键</td>
<td>在自带的面板布局中循环切换</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>Alt+方向键</td>
<td>以5个单元格为单位调整当前面板边缘</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>Ctrl+方向键</td>
<td>以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>t</td>
<td>显示时钟</td>
</tr>
</tbody></table>
<h1 id="会话-session"><a href="#会话-session" class="headerlink" title="会话 session"></a>会话 session</h1><h2 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h2><p>新建一个<code>tmux session</code>非常简单，语法为<code>tmux new -s session-name</code>，也可以简写为<code>tmux</code>，为了方便管理，建议指定会话名称，如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmux # 新建一个无名称的会话</span><br><span class="line">tmux new -s demo # 新建一个名称为demo的会话</span><br></pre></td></tr></table></figure>
<h2 id="断开当前会话"><a href="#断开当前会话" class="headerlink" title="断开当前会话"></a>断开当前会话</h2><p>会话中操作了一段时间，我希望断开会话同时下次还能接着用，可以使用<code>detach</code>命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmux detach # 断开当前会话</span><br><span class="line">Ctrl+b + d # tmux的会话中，断开快捷键</span><br></pre></td></tr></table></figure>
<p>TODO: <code>Ctrl+b + d</code>与<code>Ctrl+b + z</code>区别</p>
<h2 id="进入之前的会话"><a href="#进入之前的会话" class="headerlink" title="进入之前的会话"></a>进入之前的会话</h2><p>断开会话后，想要接着上次留下的现场继续工作，就要使用到tmux的<code>attach</code>命令了，语法为<code>tmux attach-session -t session-name</code>，可简写为<code>tmux a -t session-name</code> 或 <code>tmux a</code>。通常我们使用如下两种方式之一即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmux a # 默认进入第一个会话</span><br><span class="line">tmux a -t demo # 进入到名称为demo的会话</span><br></pre></td></tr></table></figure>

<h2 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h2><p>会话的使命完成后，一定是要关闭的。我们可以使用tmux的<code>kill</code>命令，kill命令有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill-pane、kill-server、kill-session 和 kill-window共四种，其中kill-session的语法为tmux kill-session -t session-name。如下：</span><br><span class="line"></span><br><span class="line">tmux kill-session -t demo # 关闭demo会话</span><br><span class="line">tmux kill-server # 关闭服务器，所有的会话都将关闭</span><br></pre></td></tr></table></figure>

<h2 id="查看所有的会话"><a href="#查看所有的会话" class="headerlink" title="查看所有的会话"></a>查看所有的会话</h2><p>管理会话的第一步就是要查看所有的会话，我们可以使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmux list-session # 查看所有会话</span><br><span class="line">tmux ls # 查看所有会话，提倡使用简写形式</span><br></pre></td></tr></table></figure>

<p>如果刚好处于会话中，可以使用对应的tmux快捷键<code>Ctrl+b + s</code>，此时tmux将打开一个会话列表，按上下键或者鼠标滚轮，可选中目标会话，按左右键可收起或展开会话的窗口，选中目标会话或窗口后，按回车键即可完成切换。</p>
<h1 id="灵活配置"><a href="#灵活配置" class="headerlink" title="灵活配置"></a>灵活配置</h1><h2 id="开启鼠标支持"><a href="#开启鼠标支持" class="headerlink" title="开启鼠标支持"></a>开启鼠标支持</h2><p>默认情况下，tmux的多窗口之间的切换以及面板大小调整，需要输入指令才能完成，这一过程，涉及到的指令较多，而且操作麻烦，特别是面板大小调整，指令难以一步到位，这个时候开启鼠标支持就完美了。</p>
<p>对于tmux v2.1(2015.10.28)之前的版本，需加入如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setw -g mode-mouse on # 支持鼠标选取文本等</span><br><span class="line">setw -g mouse-resize-pane on # 支持鼠标拖动调整面板的大小(通过拖动面板间的分割线)</span><br><span class="line">setw -g mouse-select-pane on # 支持鼠标选中并切换面板</span><br><span class="line">setw -g mouse-select-window on # 支持鼠标选中并切换窗口(通过点击状态栏窗口名称)</span><br></pre></td></tr></table></figure>

<p>有的地方可能会出现set-window-option的写法，setw就是它的别名。</p>
<p>对于tmux v2.1及以上的版本，仅需加入如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set-option -g mouse on # 等同于以上4个指令的效果</span><br></pre></td></tr></table></figure>
<p>需要注意的是，开启鼠标支持后，iTem2默认的鼠标选中即复制功能需要同时按下 Alt 键，才会生效。</p>
<h2 id="快速面板切换"><a href="#快速面板切换" class="headerlink" title="快速面板切换"></a>快速面板切换</h2><p>鼠标支持确实能带来很大的便捷性，特别是对于习惯了鼠标操作的tmux新手，但对于键盘爱好者而言，这不是什么好消息，对他们而言，双手不离键盘是基本素质。</p>
<p>虽然指令前缀加方向键可以切换面板，但方向键太远，不够快，不够Geek。没关系，我们可以将面板切换升级为熟悉的h、j、k、l键位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 绑定hjkl键为面板切换的上下左右键</span><br><span class="line">bind -r k select-pane -U # 绑定k为↑</span><br><span class="line">bind -r j select-pane -D # 绑定j为↓</span><br><span class="line">bind -r h select-pane -L # 绑定h为←</span><br><span class="line">bind -r l select-pane -R # 绑定l为→</span><br></pre></td></tr></table></figure>

<p>-r表示可重复按键，大概500ms之内，重复的h、j、k、l按键都将有效，完美支持了快速切换的Geek需求。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Reset</title>
    <url>/2021/12/12/git-git-reset/</url>
    <content><![CDATA[<h1 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h1><p>首先解析以下这三个相关的状态和概念：</p>
<ol>
<li><p>HEAD：可以描述为当前分支最后一个提交。即本地的信息中的当前版本。</p>
</li>
<li><p>Index：在工作副本修改之后执行过git add操作的版本文件，可以commit了的。</p>
</li>
<li><p>Working Copy：工作副本是你正在修改，但是没有执行任何git操作的文件。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代码修改，还没做任何操作的时候就是 Working Copy，</p>
<p>git add * 操作之后就是Index，</p>
<p>git commit 之后就是HEAD。如果代码修改了之后进行git add 操作，然后git commit，那么所有三者(HEAD,INDEX(STAGING),WORKING COPY)都是相同的状态，内容相同。</p>
<h1 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h1><p>–soft（更改HEAD）（恢复git commit的操作）</p>
<p>软重置。<strong>仅改变当前head指针</strong></p>
<p>–soft参数，Git只是单纯的把本地HEAD更改到你指定的版本，仅HEAD的定义发生了变化。</p>
<p>Working Copy 和Index的修改得以保留。</p>
<p>因为只回退了commit的信息。如果还要提交，可直接commit即可。</p>
<h1 id="–hard（更改三者）"><a href="#–hard（更改三者）" class="headerlink" title="–hard（更改三者）"></a>–hard（更改三者）</h1><p>–hard 参数将当前 HEAD, INDEX(STAGING), WORKING COPY 全部改变。</p>
<p>不仅工作区修改的代码会还原，暂存区的信息也会丢弃。</p>
<h1 id="–mixed-default）"><a href="#–mixed-default）" class="headerlink" title="–mixed(default）"></a>–mixed(default）</h1><p>恢复git add的操作，包含恢复git commit的操作</p>
<p>–mixed是reset的默认参数，不指定任何参数时默认使用。</p>
<p>移动head指针，改变暂存区内容，但<strong>不会改变工作区</strong></p>
<h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><code>git reset</code>用于在进行<code>git add</code>和<code>git commit</code>操作后，但还未进行<code>git push</code>操作时进行版本管理。</p>
<p>1、soft： 重置git commit</p>
<p>2、mixed： 重置git commit 和 git add</p>
<p>3、hard： 重置git commit 和 git add 和工作副本的修改。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Container_of</title>
    <url>/2022/02/12/Linux%E9%A9%B1%E5%8A%A8-container-of/</url>
    <content><![CDATA[<h1 id="container-of-宏"><a href="#container-of-宏" class="headerlink" title="container_of 宏"></a>container_of 宏</h1><p>Linux 内核第一宏。主要作用：</p>
<blockquote>
<p>根据结构体某一成员的地址，获取这个结构体的首地址。</p>
</blockquote>
<p>主要原理：</p>
<blockquote>
<p>用结构体成员的地址，减去该成员在结构体内的偏移，即可得到该结构体的首地址。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * container_of - cast a member of a structure out to the containing structure</span></span><br><span class="line"><span class="comment"> * @ptr:	the pointer to the member.</span></span><br><span class="line"><span class="comment"> * @type:	the type of the container struct this is embedded in.</span></span><br><span class="line"><span class="comment"> * @member:	the name of the member within the struct.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> container_of(ptr, type, member) (&#123;			\</span></span><br><span class="line"><span class="meta">	const typeof(((type *)0)-&gt;member) * __mptr = (ptr);	\</span></span><br><span class="line"><span class="meta">	(type *)((char *)__mptr - offsetof(type, member)); &#125;)</span></span><br></pre></td></tr></table></figure>

<p>container_of 宏三个参数：</p>
<ul>
<li>type: 结构体类型</li>
<li>member: 结构体内的成员</li>
<li>ptr: 结构体内成员member的地址</li>
</ul>
<h2 id="container-of-宏实现分析"><a href="#container-of-宏实现分析" class="headerlink" title="container_of 宏实现分析"></a>container_of 宏实现分析</h2><h3 id="offsetof-宏"><a href="#offsetof-宏" class="headerlink" title="offsetof 宏"></a>offsetof 宏</h3><blockquote>
<p>其功能是获得成员MEMBER在TYPE结构中的偏移量</p>
</blockquote>
<p>结构体作为一个复合类型数据，里面可包含多个变量。当我们定义一个结构体时，编译器要为其在内<br>存中分配空间。根据每个成员的数据类型和字节对齐方式，编译器会按照结构体中各个成员的顺序，在<br>内存中分配一片<strong>连续</strong>的空间来存储他们。</p>
<p>一个结构体数据类型，在同一编译环境下，各个成员相对于结构体首地址的偏移是固定不变的。<br><strong>当结构体的首地址为0时，结构体中各个成员的地址在数值上等同于结构体各成员相对于结构体首地址的偏移</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;age = %p\n&quot;</span>, &amp;((struct student*)<span class="number">0</span>)-&gt;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;age = %p\n&quot;</span>, &amp;((struct student*)<span class="number">0</span>)-&gt;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;age = %p\n&quot;</span>, &amp;((struct student*)<span class="number">0</span>)-&gt;math);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line">在上面程序中，将数字<span class="number">0</span>通过强制类型转换，转换为一个指向结构体类型student的常量指针</span><br><span class="line">然后分别打印这个变量指针指向的各个成员地址。其运行结果如下：</span><br><span class="line">```c</span><br><span class="line">&amp;age = <span class="number">00000000</span></span><br><span class="line">&amp;num = <span class="number">00000004</span></span><br><span class="line">&amp;math = <span class="number">00000008</span></span><br></pre></td></tr></table></figure>

<p>因为常量指针的值为0，即可以看作结构体首地址为0，<br><strong>所以结构体每个成员变量的地址即该成员相对于结构体首地址的偏移</strong>。<br>这正是<code>offsetof</code>宏的功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span><br></pre></td></tr></table></figure>
<p>根据运算符优先级分析：</p>
<ul>
<li><code>(TYPE *)0</code>: 将0地址强制转化为一个指向TYPE类型的结构体常量指针</li>
<li><code>(TYPE *)0)-&gt;MEMBER</code>: 通过常量指针，访问成员MEMBER</li>
<li><code>&amp;((TYPE *)0)-&gt;MEMBER</code>: 获取MEMBER成员的地址，地址值即为MEMBER成员在TYPE结构中的偏移量</li>
<li><code>(size_t) &amp;((TYPE *)0)-&gt;MEMBER</code>: 将地址值强制转化为size_t类型的整形数</li>
</ul>
<h3 id="const-typeof-type-0-gt-member-mptr-ptr"><a href="#const-typeof-type-0-gt-member-mptr-ptr" class="headerlink" title="const typeof(((type *)0)-&gt;member) * __mptr = (ptr);"></a>const typeof(((type *)0)-&gt;member) * __mptr = (ptr);</h3><p>结构体中的成员数据可以是任意数据类型，为了让这个宏兼容各种数据类型，定义了一个临时指针变量<code>__mptr</code>,用来存储结构体成员MEMBER的地址，即存储宏中参数<code>ptr</code>的值。</p>
<p>必须保证<code>__mptr</code>和<code>ptr</code>的指针类型一样，因此使用<code>typeof</code>关键字，用来获取结构体成员MEMBER的数据类型。</p>
<blockquote>
<p>typeof 是 GNU C 新增的一个关键字，用来获取数据类型。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>List</title>
    <url>/2022/02/12/Linux%E9%A9%B1%E5%8A%A8-linux-list/</url>
    <content><![CDATA[<p>内核链表的操作常用的二个宏<code>list_for_each_entry</code>和<code>list_for_each_entry_safe</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * list_for_each_entry	-	iterate over list of given type</span></span><br><span class="line"><span class="comment"> * @pos:	the type * to use as a loop cursor.</span></span><br><span class="line"><span class="comment"> * @head:	the head for your list.</span></span><br><span class="line"><span class="comment"> * @member:	the name of the list_head within the struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> list_for_each_entry(pos, head, member)				\</span></span><br><span class="line"><span class="meta">	for (pos = list_first_entry(head, typeof(*pos), member);	\</span></span><br><span class="line"><span class="meta">	     !list_entry_is_head(pos, head, member);			\</span></span><br><span class="line"><span class="meta">	     pos = list_next_entry(pos, member))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * list_for_each_entry_safe - iterate over list of given type safe against removal of list entry</span></span><br><span class="line"><span class="comment"> * @pos:	the type * to use as a loop cursor.</span></span><br><span class="line"><span class="comment"> * @n:		another type * to use as temporary storage</span></span><br><span class="line"><span class="comment"> * @head:	the head for your list.</span></span><br><span class="line"><span class="comment"> * @member:	the name of the list_head within the struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> list_for_each_entry_safe(pos, n, head, member)			\</span></span><br><span class="line"><span class="meta">	for (pos = list_first_entry(head, typeof(*pos), member),	\</span></span><br><span class="line"><span class="meta">		n = list_next_entry(pos, member);			\</span></span><br><span class="line"><span class="meta">	     !list_entry_is_head(pos, head, member); 			\</span></span><br><span class="line"><span class="meta">	     pos = n, n = list_next_entry(n, member))</span></span><br></pre></td></tr></table></figure>

<p><code>list_for_each_entry</code>宏是一个for循环语句，for循环的第一个参数就是让(head)-&gt;next指向member成员所在数据结构的指针，也就是将pos初始化为链表头指向的第一个实体链表成员，for的第三句话通过pos-&gt;member.next指针遍历整个实体链表，当pos-&gt;member.next再次指向我们的链表头的时候跳出for循环。整个过程没有对链表头进行遍历（不需要被遍历），所以使用list_for_each_entry遍历链表必须从链表头开始。 因此可以看出，list_for_each_entry的功能就是遍历以head为链表头的实体链表，对实体链表中的数据结构进行处理；</p>
<p><code>list_for_each_entry_safe</code>用指针n对链表的下一个数据结构进行了临时存储，所以如果在遍历链表的时候需要做删除链表中的当前项操作时，用list_for_each_entry_safe可以安全的删除，而不会影响接下来的遍历过程（用n指针可以继续完成接下来的遍历， 而list_for_each_entry则无法继续遍历，删除后会导致无法继续遍历）。</p>
]]></content>
      <categories>
        <category>Linux驱动</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Error</title>
    <url>/2022/02/12/git-git-error/</url>
    <content><![CDATA[<h1 id="“error-invalid-path”"><a href="#“error-invalid-path”" class="headerlink" title="“error: invalid path”"></a>“error: invalid path”</h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The Git cloning of repository succeeds on a Linux client but fails on a Windows client with an “invalid path” error.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Depending on the filename, configuring Git to ignore NTFS naming may workaround the issue.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.protectNTFS false</span><br></pre></td></tr></table></figure>

<p>Turning off protectNTFS will stop Git from complaining about files that have a base name that is reserved but will not prevent an error if the filename is one of the reserved names.</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Dma_buf</title>
    <url>/2022/02/12/Linux%E9%A9%B1%E5%8A%A8-dma-buf/</url>
    <content><![CDATA[<h1 id="dma-buf"><a href="#dma-buf" class="headerlink" title="dma-buf"></a>dma-buf</h1><p>dma-buf的出现是为了解决各驱动之间buffer共享的问题，因此它本质上是<strong>buffer和file的结合</strong>，即它既是一块物理连续的buffer，<br>也是一个linux file。buffer是内容，file是媒介，通过file这个媒介来实现buffer的共享。</p>
<p>一个典型的dma-buf的应用框架如下：<br><img src="/2022/02/12/Linux%E9%A9%B1%E5%8A%A8-dma-buf/dma-buf1.png"></p>
<p>通常，分配buffer的模块称为<code>exportor</code>，使用该buffer的模块称为<code>importor</code>或<code>user</code>。</p>
<p>一个最简单的dma-buf驱动包含以下元素：</p>
<ol>
<li>dma_buf_ops</li>
<li>DEFINE_DMA_BUF_EXPORT_INFO</li>
<li>dma_buf_export()</li>
</ol>
<h1 id="dma-buf-不仅仅只能用于DMA硬件访问"><a href="#dma-buf-不仅仅只能用于DMA硬件访问" class="headerlink" title="dma-buf 不仅仅只能用于DMA硬件访问"></a>dma-buf 不仅仅只能用于DMA硬件访问</h1><p><strong>dma-buf本质是buffer和file的结合</strong>，任然是一块buffer，不仅能用于DMA硬件访问，也同样适应CPU软件访问，这也是dma-buf在内核中<br>广受欢迎的一个重要原因。经过他的API都带有<em>dma</em>字样。</p>
<h1 id="dma-buf既能分配物理连续的buffer，也可以是离散的buffer"><a href="#dma-buf既能分配物理连续的buffer，也可以是离散的buffer" class="headerlink" title="dma-buf既能分配物理连续的buffer，也可以是离散的buffer"></a>dma-buf既能分配物理连续的buffer，也可以是离散的buffer</h1><p>分配那种beffer最终取决与exportor驱动采用何种方式来分配buffer。例如：采用内核中最常见的<code>kmalloc()</code>函数来分配dma-buf,这块buffer<br>自然就是物理连续的。</p>
<h1 id="CPU-Access"><a href="#CPU-Access" class="headerlink" title="CPU Access"></a>CPU Access</h1><p>从 linux-3.4 开始，dma-buf 引入了 CPU 操作接口，使得开发人员可以在内核空间里直接使用 CPU 来访问 dma-buf 的物理内存。</p>
<p>如下 dma-buf API 实现了 CPU 在内核空间对 dma-buf 内存的访问：</p>
<ul>
<li>dma_buf_kmap()</li>
<li>dma_buf_kmap_atomic()</li>
<li>dma_buf_vmap()</li>
</ul>
<p>（它们的反向操作分别对应各自的 unmap 接口）<br>通过 <code>dma_buf_kmap() / dma_buf_vmap()</code> 操作，就可以把实际的物理内存，映射到 kernel 空间，并转化成 CPU 可以连续访问的虚拟地址<br>方便后续软件直接读写这块物理内存。因此，无论这块 buffer 在物理上是否连续，在经过 kmap / vmap 映射后的虚拟地址一定是连续的。</p>
<p>上述的3个接口分别和 linux 内存管理子系统（MM）中的 <code>kmap()、 kmap_atomic()</code> 和 <code>vmap()</code> 函数一一对应，三者的区别如下：<br>|函数|    说明|<br>|–|–|<br>|kmap()|    一次只能映射1个page，可能会睡眠，只能在进程上下文中调用|<br>|kmap_atomic()|    一次只能映射1个page，不会睡眠，可在中断上下文中调用|<br>|vmap()|    一次可以映射多个pages，且这些pages物理上可以不连续，只能在进程上下文中调用|</p>
<blockquote>
<p>  从 linux-4.19 开始，dma_buf_kmap_atomic() 不再被支持。<br>  dma_buf_ops 中的 map / map_atomic 接口名，其实原本就叫 kmap / kmap_atomic，只是后来发现与 highmem.h 中的宏定义重名了，<br>  了避免开发人员在自己的驱动中引用 highmem.h 而带来的命名冲突问题，于是去掉了前面的“k”字。</p>
</blockquote>
<h1 id="DMA-Access"><a href="#DMA-Access" class="headerlink" title="DMA Access"></a>DMA Access</h1><p>dma-buf 允许CPU 在 kernel 空间访问 dma-buf 物理内存，但通常这种操作方法在内核中出现的频率并不高，因为 dma-buf 设计之初<br>就是为满足那些大内存访问需求的硬件而设计的，如GPU/DPU。在这种场景下，如果使用CPU直接去访问 memory，那么性能会大大降低。<br>因此，dma-buf 在内核中出现频率最高的还是</p>
<ul>
<li>dma_buf_attach() </li>
<li>dma_buf_map_attachment() </li>
</ul>
<p>这两个接口是dma-buf提供给DMA硬件访问的主要API，而且两者有严格的调用顺序，必须先<code>attach</code>，再<code>map_attachment</code>，因为后者的参数<br>是由前者提供的，所以通常这两个接口形影不离。<br>两个 API 相对应的反向操作接口为： <code>dma_buf_dettach()</code> 和 <code>dma_buf_unmap_attachment()</code></p>
<h1 id="sg-table"><a href="#sg-table" class="headerlink" title="sg_table"></a>sg_table</h1><p><code>sg_table</code> 是 dma-buf 供 DMA 硬件访问的终极目标，也是 DMA 硬件访问离散 memory 的唯一途径。</p>
<p>sg_table 本质上是由一块块单个物理连续的 buffer 所组成的链表，但是这个链表整体上看却是离散的，<br>因此它可以很好的描述从<code>高端内存</code>上分配出的离散 buffer。当然，它同样可以用来描述从<code>低端内存</code>上分配出的物理连续 buffer。<br>如下图所示：<br><img src="/2022/02/12/Linux%E9%A9%B1%E5%8A%A8-dma-buf/dma-buf2.png"></p>
<p>sg_table代表着整个链表，而它的每一个链表项则由<code>scatterlist</code>来表示。因此，1个<code>scatterlist</code>也就对应着一块<code>物理连续</code>的 buffer。<br>通过如下接口来获取一个<code>scatterlist</code>对应 buffer 的物理地址和长度：</p>
<ul>
<li>sg_dma_address(sgl)</li>
<li>sg_dma_len(sgl)</li>
</ul>
<p>有了 buffer 的物理地址和长度，可以将这两个参数配置到 DMA 硬件寄存器中，这样就可以实现 DMA 硬件对这一小块 buffer 的访问。<br>如果需要访问整块离散 buffer ，可通过使用 for 循环，不断的解析<code>scatterlist</code>，不断的配置 DMA 硬件寄存器。</p>
<blockquote>
<p>对于现代多媒体硬件来说，IOMMU 的出现，解决了程序员编写 for 循环的烦恼。因为在 for 循环中，每次配置完 DMA 硬件寄存器后，<br>都需要等待本次 DMA 传输完毕，然后才能进行下一次循环，这大大降低了软件的执行效率。而 IOMMU 的功能就是用来解析 sg_table 的，<br>它会将 sg_table 内部一个个离散的小 buffer 映射到自己内部的设备地址空间，使得这整块 buffer 在自己内部的设备地址空间上是连续的<br>这样，在访问离散 buffer 的时候，只需要将 IOMMU 映射后的设备地址（与 MMU 映射后的 CPU 虚拟地址不是同一概念）和整块 buffer 的<br>size 配置到 DMA 硬件寄存器中即可，中途无需再多次配置，便完成了 DMA 硬件对整块离散 buffer 的访问，大大的提高了软件的效率。</p>
</blockquote>
<h2 id="dma-buf-attach"><a href="#dma-buf-attach" class="headerlink" title="dma_buf_attach()"></a>dma_buf_attach()</h2><p>该函数实际上是<code>dma-buf attach device</code>的缩写，用于建立一个<code>device</code>与<code>dma-buf</code>的链接关系，这个连接关系被存放在新创建的<br><code>dma_buf_attachment</code>对象中，供后续调用<code>dma_buf_map_attachment()</code>使用。</p>
<p>该函数对应<code>dma_buf_ops</code>中的回调接口，如果device对后续的map_attachment操作没有特殊要求，可以不实现。</p>
<h2 id="dma-buf-map-attachment"><a href="#dma-buf-map-attachment" class="headerlink" title="dma_buf_map_attachment()"></a>dma_buf_map_attachment()</h2><p>该函数实际上是<code>dma-buf map attachment into sg_table</code>的缩写，主要完成2件事：</p>
<ul>
<li>生成 sg_table</li>
<li>同步 Cache</li>
</ul>
<p>选择返回<code>sg_table</code>而不是物理地址，是为了兼容所有DMA硬件（带或不带IOMMU），因为<code>sg_table</code>既可以表示连续物理内存，也可以表示<br>非连续物理内存。</p>
<p>同步<code>Cache</code>是为了防止该buffer事先被CPU填充过，数据暂存在Cache中而非DDR上，导致DMA访问的不是最新的有效数据。<br>通过刷cache避免此类问题。同样的，在DMA访问内存结束后，需要将Cache设置为无效（no-Cache），以便后续CPU直接从DDR上读取数据。<br>通常使用如下流式DMA映射接口来完成Cache的同步：</p>
<ul>
<li>dma_map_single() / dma_unmap_single()</li>
<li>dma_map_page() / dma_unmap_page()</li>
<li>dma_map_sg() / dma_unmap_sg()</li>
</ul>
<p><code>dma_buf_map_attachment()</code> 对应 <code>dma_buf_ops</code> 中的 <code>map_dma_buf</code> 回调接口，<br>该回调接口（包括 unmap_dma_buf 在内）被强制要求实现。</p>
<blockquote>
<p>延伸：<code>dma_buf_ops</code>中部分回调被要求强制实现。</p>
</blockquote>
<h2 id="为什么要attach操作"><a href="#为什么要attach操作" class="headerlink" title="为什么要attach操作"></a>为什么要attach操作</h2><p>同一个 dma-buf 可能会被多个 DMA 硬件访问，而每个 DMA 硬件可能会因为自身硬件能力的限制，对这块 buffer 有自己特殊的要求。<br>比如硬件 A 的寻址能力只有0x0 ~ 0x10000000，而硬件 B 的寻址能力为 0x0 ~ 0x80000000，那么在分配 dma-buf 的物理内存时，<br>就必须以硬件 A 的能力为标准进行分配，这样硬件 A 和 B 都可以访问这段内存。<br>否则，如果只满足 B 的需求，那么 A 可能就无法访问超出 0x10000000 地址以外的内存空间，道理其实类似于木桶理论。<br>因此，attach 操作可以让 exporter 驱动根据不同的 device 硬件能力，来分配最合适的物理内存。</p>
<blockquote>
<p>通过设置 device-&gt;dma_params 参数，来告知 exporter 驱动该 DMA 硬件的能力限制。</p>
</blockquote>
<h2 id="何时分配内存"><a href="#何时分配内存" class="headerlink" title="何时分配内存"></a>何时分配内存</h2><p>既可以在 export 阶段分配，也可以在 map_attachment 阶段分配，甚至可以在两个阶段都分配，这通常由 DMA 硬件能力来决定。</p>
<p>首先，驱动人员需要统计当前系统中都有哪些 DMA 硬件要访问 dma-buf；<br>然后，根据不同的 DMA 硬件能力，来决定在何时以及如何分配物理内存。</p>
<p>通常的策略如下（假设只有 A、B 两个硬件需要访问 dma-buf ）：</p>
<ul>
<li>如果硬件 A 和 B 的寻址空间有交集，则在 export 阶段进行内存分配，分配时以 A / B 的交集为准；</li>
<li>如果硬件 A 和 B 的寻址空间没有交集，则只能在 map attachment 阶段分配内存。</li>
</ul>
<p>对于第二种策略，因为 A 和 B 的寻址空间没有交集（即完全独立），所以它们实际上是无法实现内存共享的。<br>此时的解决办法是： A 和 B 在 map attachment 阶段，都分配各自的物理内存，然后通过 CPU 或 通用DMA 硬件，<br>将 A 的 buffer 内容拷贝到 B 的 buffer 中去，以此来间接的实现 buffer “共享”。</p>
<p>另外还有一种策略，就是不管三七二十一，先在 export 阶段分配好内存，然后在首次 map attachment 阶段<br>通过 dma_buf-&gt;attachments 链表，与所有 device 的能力进行一一比对，如果满足条件则直接返回 sg_table；<br>如果不满足条件，则重新分配符合所有 device 要求的物理内存，再返回新的 sg_table。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>sg_table 是 DMA 硬件操作的关键；</li>
<li>attach 的目的是为了让后续 map attachment 操作更灵活；</li>
<li>map attachment 主要完成两件事：生成 sg_table 和 Cache 同步；</li>
<li>DMA 的硬件能力决定了 dma-buf 物理内存的分配时机；</li>
</ol>
<h1 id="在user-space-访问-dma-buf"><a href="#在user-space-访问-dma-buf" class="headerlink" title="在user space 访问 dma-buf"></a>在user space 访问 dma-buf</h1><p>user space 访问 dma-buf 也属于 CPU Access 的一种。</p>
<h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h2><p>为了方便应用程序能直接在用户空间读写 dma-buf 的内存，<code>dma_buf_ops</code>为我们提供了一个<code>mmap</code>回调接口，<br>可以把 dma-buf 的物理内存直接映射到用户空间，这样应用程序就可以像访问普通文件那样访问 dma-buf 的物理内存了。</p>
<blockquote>
<p>在 Linux 设备驱动中，大多数驱动的 mmap 操作接口都是通过调用<code>remap_pfn_range()</code>函数来实现的，dma-buf 也不例外</p>
</blockquote>
<p>除了<code>dma_buf_ops</code>提供的 mmap 回调接口外，dma-buf 还为我们提供了<code>dma_buf_mmap()</code>内核 API，<br>使得我们可以在其他设备驱动中就地取材，直接引用 dma-buf 的 mmap 实现，以此来间接的实现设备驱动的 mmap 文件操作接口</p>
<p><img src="/2022/02/12/Linux%E9%A9%B1%E5%8A%A8-dma-buf/dma-buf3.png"></p>
<h1 id="file"><a href="#file" class="headerlink" title="file"></a>file</h1><p>dma-buf 本质上是 buffer 与 file 的结合，既然与file有关系，就涉及到<code>fd</code></p>
<h2 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h2><p>如下内核 API 实现了 dma-buf 与 fd 之间的相互转换：</p>
<ul>
<li>dma_buf_fd()：dma-buf –&gt; new fd</li>
<li>dma_buf_get()：fd –&gt; dma-buf</li>
</ul>
<p>通常使用方法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd = dma_buf_fd(dmabuf);</span><br><span class="line">dmabuf = dma_buf_get(fd);</span><br></pre></td></tr></table></figure>

<h2 id="get-put"><a href="#get-put" class="headerlink" title="get / put"></a>get / put</h2><p>只要是文件，内部都会有一个引用计数(f_count)。当<code>dma_buf_export()</code>函数创建dma-buf时，该引用计数被初始化为1；当这个引用计数为0时，则会自动触发<br><code>dma_buf_ops</code>的<code>release</code>回调接口，并释放<code>dma-buf</code>对象。</p>
<p>linux内核中操作file引用计数的常用函数为<code>fget()</code>和<code>fput()</code>，而dma-buf又在此基础上进行了封装，如下：</p>
<ul>
<li>get_dma_buf()</li>
<li>dma_buf_get()</li>
<li>dma_buf_put()</li>
</ul>
<p>其中区别如下：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>区别</th>
</tr>
</thead>
<tbody><tr>
<td>get_dma_buf()</td>
<td>仅引用计数加1</td>
</tr>
<tr>
<td>dma_buf_get()</td>
<td>引用计数加1，并将 fd 转换成 dma_buf 指针</td>
</tr>
<tr>
<td>dma_buf_put()</td>
<td>引用计数减1</td>
</tr>
<tr>
<td>dma_buf_fd()</td>
<td>引用计数不变，仅创建 fd</td>
</tr>
</tbody></table>
<h2 id="release"><a href="#release" class="headerlink" title="release"></a>release</h2><p>通常 release 回调接口用来释放 dma-buf 所对应的物理 buffer。<br>凡是所有和该 dma-buf 相关的私有数据也都应该在这里被 free 掉。</p>
<p>前面说过，只有当 dma-buf 的引用计数递减到0时，才会触发 release 回调接口。因此</p>
<ul>
<li>如果不想正在使用的 buffer 被突然释放，请提前 get；</li>
<li>如果想在 kernel space 释放 buffer，请使劲 put；</li>
<li>如果想从 user space 释放 buffer，请尝试 close；</li>
</ul>
<p><strong>这就是为什么在内核设备驱动中，我们会看到那么多 dma-buf get 和 put 的身影</strong></p>
<blockquote>
<p>如果没有任何程序来修改该 dma-buf 的引用计数，自始自终都保持为1，会无法执行 release 接口<br>这会导致 buffer 无法被释放，造成<strong>内存泄漏</strong></p>
</blockquote>
<h2 id="跨进程-fd"><a href="#跨进程-fd" class="headerlink" title="跨进程 fd"></a>跨进程 fd</h2><p>做 Linux 应用开发的同事都知道，fd 属于进程资源，它的作用域只在单个进程空间范围内有效，即同样的 fd 值，<br>在进程 A 和 进程 B 中所指向的文件是不同的。因此 fd 是不能在多个进程之间共享的，<br>也就是说 dma_buf_fd() 与 dma_buf_get() 只能是在同一进程中调用。</p>
<p>fd 并不是完全不能在多进程中共享，而是需要采用特殊的方式进行传递。<br>在 linux 系统中，最常用的做法就是通过 socket 来实现 fd 的传递。而在 Android 系统中，则是通过 Binder 来实现的。<br>需要注意的是，传递后 fd 的值可能会发生变化，但是它们所指向的文件都是同一文件。<br>总之，有了 Binder，dma_buf_fd() 和 dma_buf_get() 就可以不用严格限制在同一进程中使用了。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>为什么需要fd?</p>
<ol>
<li><p>方便应用程序直接在 user space 访问该 buffer，通过 mmap；</p>
</li>
<li><p>方便该 buffer 在各个驱动模块之间流转，而无需拷贝；</p>
</li>
<li><p>降低了各驱动之间的耦合度。</p>
</li>
</ol>
</li>
<li><p>如何实现 fd 跨进程共享？ Binder!</p>
</li>
<li><p>get / put 将影响 dma-buf 的内存释放</p>
</li>
</ul>
<h2 id="Cache-一致性"><a href="#Cache-一致性" class="headerlink" title="Cache 一致性"></a>Cache 一致性</h2><p>dma-buf 有以下接口用于 Cache 同步：</p>
<ul>
<li>begin_cpu_access </li>
<li>end_cpu_access</li>
</ul>
<p>CPU 与 DMA 访问 DDR 之间的区别：<br><img src="/2022/02/12/Linux%E9%A9%B1%E5%8A%A8-dma-buf/dma-buf4.png"></p>
<p>CPU 在访问内存时是要经过 Cache 的，而 DMA 外设则是直接和 DDR 打交道，因此这就存在 Cache 一致性的问题了<br>即 Cache 里面的数据是否和 DDR 里面的数据保持一致。<br>比如 DMA 外设早已将 DDR 中的数据改写了，而 CPU 却浑然不知，仍然在访问 Cache 里面暂存的旧数据。</p>
<p>所以 Cache 一致性问题，只有在 CPU 参与访问的情况下才会发生。<br>如果一个 dma-buf 自始自终都只被一个硬件访问（要么CPU，要么DMA），那么 Cache 一致性问题就不会存在。</p>
<blockquote>
<p>当然，如果一个 dma-buf 所对应的物理内存本身就是 Uncache 的（也叫一致性内存），<br>或者说该 buffer 在被分配时是以 coherent 方式分配的，<br>这种情况下，CPU 是不经过 cache 而直接访问 DDR 的，自然 Cache 一致性问题也就不存在了。</p>
</blockquote>
<h2 id="为什么需要-begin-end-操作？"><a href="#为什么需要-begin-end-操作？" class="headerlink" title="为什么需要 begin / end 操作？"></a>为什么需要 begin / end 操作？</h2><p>dma-buf使用流式 DMA 映射接口来实现 Cache 同步操作。这类接口的特点就是 Cache 同步只是<strong>一次性</strong>的，<br>即在 dma map 的时候执行一次 Cache Flush 操作，在 dma unmap 的时候执行一次 Cache Invalidate 操作，<br>而这<strong>中间的过程是不保证 Cache 和 DDR 上数据的一致性的</strong>。</p>
<p>因此如果 CPU 在 dma map 和 unmap 之间又去访问了这块内存，<br>那么有可能 CPU 访问到的数据就只是暂存在 Cache 中的旧数据，这就带来了问题。</p>
<p>那么什么情况下会出现 CPU 在 dma map 和 unmap 期间又去访问这块内存呢？<br>一般不会出现 DMA 硬件正在传输过程中突然 CPU 发起访问的情况，<br>而更多的是在 DMA 硬件发起传输之前，或 DMA 硬件传输完成之后，<br>并且仍然处于 dma map 和 unmap 操作之间的时候，CPU 对这段内存发起了访问。</p>
<p>针对这种情况，就需要在 CPU 访问内存前，先将 DDR 数据同步到 Cache 中（Invalidate）；<br>在 CPU 访问结束后，将 Cache 中的数据回写到 DDR 上（Flush），以便 DMA 能获取到 CPU 更新后的数据。<br>这也就是 dma-buf 给我们预留 {begin,end}_cpu_access 的原因。</p>
<h2 id="Kernel-API"><a href="#Kernel-API" class="headerlink" title="Kernel API"></a>Kernel API</h2><p>dma-buf 为我们提供了如下内核 API，用来在 dma map 期间发起 CPU 访问操作：</p>
<ul>
<li>dma_buf_begin_cpu_access()</li>
<li>dma_buf_end_cpu_access()</li>
</ul>
<p>它们分别对应 <code>dma_buf_ops</code> 中的 <code>begin_cpu_access</code> 和 <code>end_cpu_access</code> 回调接口。</p>
<p>通常在驱动设计时， <code>begin_cpu_access / end_cpu_access</code> 使用如下流式 DMA 接口来实现 Cache 同步：</p>
<ul>
<li>dma_sync_single_for_cpu() / dma_sync_single_for_device()</li>
<li>dma_sync_sg_for_cpu() / dma_sync_sg_for_device()</li>
</ul>
<p>CPU 访问内存之前，通过调用 <code>dma_sync_&#123;single,sg&#125;_for_cpu()</code> 来 <code>Invalidate Cache</code>，<br>这样 CPU 在后续访问时才能重新从 DDR 上加载最新的数据到 Cache 上。</p>
<p>CPU 访问内存结束之后，通过调用 <code>dma_sync_&#123;single,sg&#125;_for_device()</code> 来 <code>Flush Cache</code>，将 Cache 中的数据全部回写到 DDR 上，<br>这样后续 DMA 才能访问到正确的有效数据。</p>
<h2 id="User-API"><a href="#User-API" class="headerlink" title="User API"></a>User API</h2><p>考虑到 mmap() 操作，dma-buf 也为我们提供了 Userspace 的同步接口，通过 <code>DMA_BUF_IOCTL_SYNC ioctl()</code> 来实现。<br>该 cmd 需要一个 <code>struct dma_buf_sync</code> 参数，用于表明当前是 begin 还是 end 操作，是 read 还是 write 操作。</p>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul>
<li>只有在 DMA map/unmap 期间 CPU 又要访问内存的时候，才有必要使用 begin / end 操作；</li>
<li>{ begin,end }_cpu_access 实际是 dma_sync()* 接口的封装，目的是要 invalidate 或 flush cache；</li>
<li>Usespace 通过 DMA_BUF_IOCTL_SYNC 来触发 begin / end 操作；</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>U-BOOT DM驱动模型</title>
    <url>/2022/02/13/uboot-uboot-dirver-model/</url>
    <content><![CDATA[<h1 id="U-BOOT-DM驱动模型"><a href="#U-BOOT-DM驱动模型" class="headerlink" title="U-BOOT DM驱动模型"></a>U-BOOT DM驱动模型</h1><h2 id="Before-driver-model"><a href="#Before-driver-model" class="headerlink" title="Before driver model"></a>Before driver model</h2><ul>
<li>U-Boot has 10 useful design principles (e.g. small, fast, simple, portable)<ul>
<li>Huge community, over 1000 boards supported by the end of 2011</li>
<li>But Ad-hoc driver model started to bite</li>
</ul>
</li>
<li>Drivers were invoked through direct C calls<ul>
<li>i2c_read() is implemented by whichever driver is compiled in</li>
<li>CONFIG option select which I2C driver to use, clock speed, bus number, etc.</li>
</ul>
</li>
<li>Hard to scale<ul>
<li>Multiple I2C drivers must be munged into a single driver</li>
<li>Or an ad-hoc framework created to handle this requirements</li>
</ul>
</li>
<li>Configuration becoming unwieldy<ul>
<li>6000 CONFIG options at its peak</li>
<li>Kconfig conversion helps, but that’s still a lot of options</li>
</ul>
</li>
</ul>
<h3 id="dm-u-boot-pdf"><a href="#dm-u-boot-pdf" class="headerlink" title="dm-u-boot.pdf"></a>dm-u-boot.pdf</h3><p>U-Boot Mini Summit talk on driver model at ELCE 2014</p>
<p>Why driver model?</p>
<ul>
<li>Device init and access is ad-hoc<br>  – scsi_init(), mmc_init(), nand_init()</li>
<li>Many subsystems only allow one driver<br>  – But I have USB2 and USB3!</li>
<li>Communication between subsystems is tricky<br>  – How does an I2C expander or PMIC provide a GPIO?</li>
<li>Hard to answer simple questions<br>  – How many GPIOs? What is my serial console?</li>
<li>Board file functions provide the glue<br>  – What GPIO provides my MMC card detect?</li>
</ul>
<h2 id="Architecture-体系结构"><a href="#Architecture-体系结构" class="headerlink" title="Architecture 体系结构"></a>Architecture 体系结构</h2><p>DM (Driver Model)是 U-Boot 中的驱动框架。</p>
<ul>
<li><p>udevice 描述具体的某一个硬件设备。</p>
<ul>
<li>Instance of a driver</li>
<li>Created from some platform-specific information bound to a driver</li>
</ul>
</li>
<li><p>driver 是与这个设备匹配的驱动。</p>
<ul>
<li>Code to talk to a peripheral type (e.g. Ethernet switch, I2C controller, LCD)</li>
</ul>
</li>
<li><p>uclass 是同一类设备的抽象，提供管理同一类设备的抽象接口。</p>
<ul>
<li>A way of grouping devices which operate the same way</li>
</ul>
</li>
<li><p>Device tree and hierarchy</p>
<ul>
<li>设备树和层次结构</li>
</ul>
</li>
<li><p>Memory allocation</p>
</li>
<li><p>Sequence numbers</p>
<ul>
<li>序列号</li>
</ul>
</li>
</ul>
<p><img src="/2022/02/13/uboot-uboot-dirver-model/hierarchy.png"></p>
<p>像 Kernel 中的驱动三要素 device 、bus 、driver 一样，DM 也有自己的三要素：udevice、uclass、driver。以 serial 驱动为例：</p>
<p><img src="/2022/02/13/uboot-uboot-dirver-model/serial.png"></p>
<h2 id="Device-tree-configuration"><a href="#Device-tree-configuration" class="headerlink" title="Device tree configuration"></a>Device tree configuration</h2><p><img src="/2022/02/13/uboot-uboot-dirver-model/Device_tree_configuration.png"></p>
<h2 id="Device-sequence"><a href="#Device-sequence" class="headerlink" title="Device sequence"></a>Device sequence</h2><p><img src="/2022/02/13/uboot-uboot-dirver-model/Device_sequence.png"></p>
<h2 id="Automatic-memory-allocation"><a href="#Automatic-memory-allocation" class="headerlink" title="Automatic memory allocation"></a>Automatic memory allocation</h2><p><img src="/2022/02/13/uboot-uboot-dirver-model/Automatic_memory_allocation.png"></p>
<h2 id="Architecture-2"><a href="#Architecture-2" class="headerlink" title="Architecture 2"></a>Architecture 2</h2><ul>
<li>Binding and probing<ul>
<li>Bing creates the device but does not touch hardware</li>
<li>Probing activates the device ready for use</li>
</ul>
</li>
<li>Avoid private data structures<ul>
<li>Everything out in the open</li>
</ul>
</li>
<li>SPL support<ul>
<li>fdtgrep</li>
<li>Simple malloc()</li>
<li>Drop device removal code, warnings, etc.</li>
</ul>
</li>
</ul>
<h1 id="Driver-model-benefits-en"><a href="#Driver-model-benefits-en" class="headerlink" title="Driver model benefits (en)"></a>Driver model benefits (en)</h1><ul>
<li>Consistent view of devices regardless of their type</li>
<li>Multiple driver can be used with the same subsystem<ul>
<li>Drivers can be created which use others driver for their transport layer</li>
</ul>
</li>
<li>The lifecycle of a device is clear and consistent</li>
<li>Devices can be bound automatically<ul>
<li>Then probed automatically when used</li>
</ul>
</li>
<li>Supports device tree for configuration<ul>
<li>Thus sharing this with Linux and potentially other projects </li>
<li>Avoids recreating the same information again in a different format</li>
</ul>
</li>
</ul>
<h1 id="Driver-model-benefits-zh"><a href="#Driver-model-benefits-zh" class="headerlink" title="Driver model benefits (zh)"></a>Driver model benefits (zh)</h1><ul>
<li>一致的设备视图，无论其类型如何</li>
<li>同一个子系统可以使用多个驱动程序<ul>
<li>可以创建使用其他驱动程序作为传输层的驱动程序</li>
</ul>
</li>
<li>设备生命周期清晰一致</li>
<li>设备可自动绑定<ul>
<li>然后使用时自动探测</li>
</ul>
</li>
<li>支持设备树配置<ul>
<li>因此与 Linux 和潜在的其他项目共享这个</li>
<li>避免以不同的格式重新创建相同的信息</li>
</ul>
</li>
</ul>
<h1 id="DM-Limitations"><a href="#DM-Limitations" class="headerlink" title="DM Limitations"></a>DM Limitations</h1><ul>
<li>A driver can be in only one uclass<ul>
<li>Multi-function devices must use separate child devices</li>
</ul>
</li>
<li>Uses flattened device tree (FDT,即 device tree, dts)<ul>
<li>Driver model uses the device tree offset</li>
<li>Overlays and other mutations are not supported</li>
</ul>
</li>
</ul>
<h1 id="Comparisons-with-Linux"><a href="#Comparisons-with-Linux" class="headerlink" title="Comparisons with Linux"></a>Comparisons with Linux</h1><ul>
<li><p>Classes</p>
</li>
<li><p>Buses</p>
</li>
<li><p>Binding and probing </p>
</li>
<li><p>Memory allocation</p>
</li>
<li><p>Relocation and SPL //重定位 &amp; SPL</p>
</li>
<li><p>device visibility</p>
</li>
<li><p>Locking</p>
</li>
<li><p>Data structure size</p>
<ul>
<li>Core structure sizes are moderate<ul>
<li>struct uclass</li>
<li>struct udevice</li>
<li>struct driver</li>
</ul>
</li>
</ul>
</li>
<li><p>automatic memory allocation</p>
</li>
</ul>
<p><img src="/2022/02/13/uboot-uboot-dirver-model/Comparing_automatic_memory_allocation.png"></p>
<h2 id="A-few-examples"><a href="#A-few-examples" class="headerlink" title="A few examples"></a>A few examples</h2><h3 id="Example-1-Requesting-GPIOs"><a href="#Example-1-Requesting-GPIOs" class="headerlink" title="Example 1: Requesting GPIOs"></a>Example 1: Requesting GPIOs</h3><p><img src="/2022/02/13/uboot-uboot-dirver-model/Requesting_GPIOs.png"></p>
<h3 id="Example-2-Enabling-power"><a href="#Example-2-Enabling-power" class="headerlink" title="Example 2: Enabling power"></a>Example 2: Enabling power</h3><p><img src="/2022/02/13/uboot-uboot-dirver-model/Enabling_power.png"></p>
<h1 id="重要数据结构"><a href="#重要数据结构" class="headerlink" title="重要数据结构"></a>重要数据结构</h1><h2 id="udevice"><a href="#udevice" class="headerlink" title="udevice"></a>udevice</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct udevice - An instance of a driver</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This holds information about a device, which is a driver bound to a</span></span><br><span class="line"><span class="comment"> * particular port or peripheral (essentially a driver instance).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A device will come into existence through a &#x27;bind&#x27; call, either due to</span></span><br><span class="line"><span class="comment"> * a U_BOOT_DEVICE() macro (in which case platdata is non-NULL) or a node</span></span><br><span class="line"><span class="comment"> * in the device tree (in which case of_offset is &gt;= 0). In the latter case</span></span><br><span class="line"><span class="comment"> * we translate the device tree information into platdata in a function</span></span><br><span class="line"><span class="comment"> * implemented by the driver ofdata_to_platdata method (called just before the</span></span><br><span class="line"><span class="comment"> * probe method if the device has a device tree node.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * All three of platdata, priv and uclass_priv can be allocated by the</span></span><br><span class="line"><span class="comment"> * driver, or you can use the auto_alloc_size members of struct driver and</span></span><br><span class="line"><span class="comment"> * struct uclass_driver to have driver model do this automatically.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @driver: The driver used by this device</span></span><br><span class="line"><span class="comment"> * @name: Name of device, typically the FDT node name</span></span><br><span class="line"><span class="comment"> * @platdata: Configuration data for this device</span></span><br><span class="line"><span class="comment"> * @parent_platdata: The parent bus&#x27;s configuration data for this device</span></span><br><span class="line"><span class="comment"> * @uclass_platdata: The uclass&#x27;s configuration data for this device</span></span><br><span class="line"><span class="comment"> * @node: Reference to device tree node for this device</span></span><br><span class="line"><span class="comment"> * @driver_data: Driver data word for the entry that matched this device with</span></span><br><span class="line"><span class="comment"> *		its driver</span></span><br><span class="line"><span class="comment"> * @parent: Parent of this device, or NULL for the top level device</span></span><br><span class="line"><span class="comment"> * @priv: Private data for this device</span></span><br><span class="line"><span class="comment"> * @uclass: Pointer to uclass for this device</span></span><br><span class="line"><span class="comment"> * @uclass_priv: The uclass&#x27;s private data for this device</span></span><br><span class="line"><span class="comment"> * @parent_priv: The parent&#x27;s private data for this device</span></span><br><span class="line"><span class="comment"> * @uclass_node: Used by uclass to link its devices</span></span><br><span class="line"><span class="comment"> * @child_head: List of children of this device</span></span><br><span class="line"><span class="comment"> * @sibling_node: Next device in list of all devices</span></span><br><span class="line"><span class="comment"> * @flags: Flags for this device DM_FLAG_...</span></span><br><span class="line"><span class="comment"> * @req_seq: Requested sequence number for this device (-1 = any)</span></span><br><span class="line"><span class="comment"> * @seq: Allocated sequence number for this device (-1 = none). This is set up</span></span><br><span class="line"><span class="comment"> * when the device is probed and will be unique within the device&#x27;s uclass.</span></span><br><span class="line"><span class="comment"> * @devres_head: List of memory allocations associated with this device.</span></span><br><span class="line"><span class="comment"> *		When CONFIG_DEVRES is enabled, devm_kmalloc() and friends will</span></span><br><span class="line"><span class="comment"> *		add to this list. Memory so-allocated will be freed</span></span><br><span class="line"><span class="comment"> *		automatically when the device is removed / unbound</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">udevice</span> &#123;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">driver</span> *<span class="title">driver</span>;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">void</span> *platdata;</span><br><span class="line">	<span class="keyword">void</span> *parent_platdata;</span><br><span class="line">	<span class="keyword">void</span> *uclass_platdata;</span><br><span class="line">	ofnode node;</span><br><span class="line">	ulong driver_data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">udevice</span> *<span class="title">parent</span>;</span></span><br><span class="line">	<span class="keyword">void</span> *priv;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">uclass</span> *<span class="title">uclass</span>;</span></span><br><span class="line">	<span class="keyword">void</span> *uclass_priv;</span><br><span class="line">	<span class="keyword">void</span> *parent_priv;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">uclass_node</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">child_head</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">sibling_node</span>;</span></span><br><span class="line">	<span class="keyword">uint32_t</span> flags;</span><br><span class="line">	<span class="keyword">int</span> req_seq;</span><br><span class="line">	<span class="keyword">int</span> seq;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEVRES</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">devres_head</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>有三种途径生成一个 udevice：</p>
<ol>
<li><p>dts 设备节点</p>
</li>
<li><p>UBOOTDEVICE(__name) 宏申明</p>
</li>
<li><p>调用 ‘bind’ API, device_bind_xxx</p>
</li>
</ol>
<h1 id="Device-Model-Start-up-sequence"><a href="#Device-Model-Start-up-sequence" class="headerlink" title="Device Model Start-up sequence"></a>Device Model Start-up sequence</h1><p>DM 启动顺序, core/root.c</p>
<ul>
<li>dm_init_and_scan():</li>
<li>dm_init()<ul>
<li>Creates an empty list of devices and uclasses</li>
<li>Binds and probes a root device</li>
</ul>
</li>
<li>dm_scan_platdata()<ul>
<li>Scans available platform data looking devices to be created</li>
<li>Platform data may only be used when memory constrains prohibit device tree</li>
</ul>
</li>
<li>dm_scan_fdt()<ul>
<li>Scan device tree and bind driver to nodes to create devices</li>
</ul>
</li>
</ul>
<p>根据当前 U-Boot 的编程哲学，基本大部分设备都是通过 dts 来描述，还有少部分设备因为特殊原因，可以通过 U_BOOT_DEVICE(_name) 宏申明。</p>
<h2 id="匹配过程"><a href="#匹配过程" class="headerlink" title="匹配过程"></a>匹配过程</h2><p>在UBoot DM 初始化阶段(initfdm 和 initrdm)，通过调用 dm_init_and_scan(boolpre_reloc_only) 根据名称 (UBOOT_DEVICE 中和 driver 的 name，或者 dts 和 driver 的 compatible) 匹配到对应的 driver，</p>
<p>然后调用 device_bind_common 函数生成 udevice，udevice 会和 driver 绑定，</p>
<p>并根据 driver 中的uclass id 找到对应的 uclass driver，并生成相应的 uclass， 并把该设备挂到 uclass 的设备节点之下。</p>
<p>最后调用 driver 的 bind 函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">| -&gt; dm_init_and_scan</span><br><span class="line">    | -&gt; dm_init</span><br><span class="line">        | -&gt; INIT_LIST_HEAD <span class="comment">//创建 root 节点</span></span><br><span class="line">        | -&gt; device_bind_by_name()</span><br><span class="line">            | -&gt; lists_driver_lookup_name <span class="comment">//lists_driver_lookup_name(&quot;root_driver&quot;), This function returns a pointer a driver given its name.</span></span><br><span class="line">                | -&gt; ll_entry_start    <span class="comment">//Point to first entry of linker-generated array</span></span><br><span class="line">                | -&gt; ll_entry_count    <span class="comment">//Return the number of elements in linker-generated array</span></span><br><span class="line">                | -&gt; <span class="keyword">for</span> &#123; <span class="built_in">strcmp</span> &#125;    <span class="comment">//通过名字来遍历，得到匹配的 driver</span></span><br><span class="line">            | -&gt; device_bind_common</span><br><span class="line">                | -&gt; uclass_get</span><br><span class="line">                    | -&gt; uclass_find    <span class="comment">//Find uclass by uclass_id</span></span><br><span class="line">                | -&gt; list_add_tail    <span class="comment">//put dev into parent&#x27;s successor list</span></span><br><span class="line">                | -&gt; uclass_bind_device    </span><br><span class="line">        | -&gt; device_probe</span><br><span class="line">            | -&gt; </span><br><span class="line">    | -&gt; dm_scan_platdata</span><br><span class="line">    | -&gt; dm_extended_scan_fdt</span><br><span class="line">    | -&gt; dm_scan_other</span><br></pre></td></tr></table></figure>



<p>还有部分特殊的驱动，他们并不存在实际意义上的设备，比如 MMC 子系统中的 mmcblk 驱动，</p>
<p>该驱动主要是把所有的 mmc 设备注册到更上一层的 blk 子系统中，向 blk 层提供操作 mmc 设备的 blkops，向下通过mmc uclass 提供的统一接口控制 mmc 设备。显然，这个驱动位于抽象层，它不和具体的硬件设备直接交互，并不适合用一个 dts(dts 是用来描述具体的硬件信息的) 节点或者 UBOOTDEVICE(_name) 宏来为这个驱动显示的申明设备。这种情形下一般通过主动调用 device_bind_xxx 系列 API 来完成驱动和设备已经更上一层 uclass 之间的 bind。</p>
<p><img src="/2022/02/13/uboot-uboot-dirver-model/NO1.jpeg"></p>
<p>A：生成 udevice。<br>B：绑定 udevice 和 driver。<br>C：把设备挂到 uclass 的dev_head 链表下。<br>D：调用设备驱动的 bind 接口。</p>
<h1 id="uclass"><a href="#uclass" class="headerlink" title="uclass"></a>uclass</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct uclass - a U-Boot drive class, collecting together similar drivers</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A uclass provides an interface to a particular function, which is</span></span><br><span class="line"><span class="comment"> * implemented by one or more drivers. Every driver belongs to a uclass even</span></span><br><span class="line"><span class="comment"> * if it is the only driver in that uclass. An example uclass is GPIO, which</span></span><br><span class="line"><span class="comment"> * provides the ability to change read inputs, set and clear outputs, etc.</span></span><br><span class="line"><span class="comment"> * There may be drivers for on-chip SoC GPIO banks, I2C GPIO expanders and</span></span><br><span class="line"><span class="comment"> * PMIC IO lines, all made available in a unified way through the uclass.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @priv: Private data for this uclass</span></span><br><span class="line"><span class="comment"> * @uc_drv: The driver for the uclass itself, not to be confused with a</span></span><br><span class="line"><span class="comment"> * &#x27;struct driver&#x27;</span></span><br><span class="line"><span class="comment"> * @dev_head: List of devices in this uclass (devices are attached to their</span></span><br><span class="line"><span class="comment"> * uclass when their bind method is called)</span></span><br><span class="line"><span class="comment"> * @sibling_node: Next uclass in the linked list of uclasses</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uclass</span> &#123;</span></span><br><span class="line">	<span class="keyword">void</span> *priv;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">uclass_driver</span> *<span class="title">uc_drv</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">dev_head</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">sibling_node</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里主要的成员是 uclassdriver 和 devhead 链表。</p>
<ul>
<li>dev_head 是一个链表头， 用来链接该类下的所有设备。可以通过 uclass_foreach_dev(dev,uc) 遍历该class 下的所有设备。</li>
<li>uclass_driver 是针对某一类设备提供的通用<strong>操作接口</strong>，然后通过 udevice-&gt;driver-&gt;ops 操作到具体的硬件设备。<br>uclassdriver 通过 UCLASSDRIVER(name) 宏申明， 在 device_bind_common 中根据 设备对应的驱动 driver 中的 uclass id 找到 uclassdriver，并生成相应的 uclass， 并把设备挂到该 uclass 的设备节点 dev_head 下。</li>
</ul>
<h2 id="以-pwm-backlight-为例："><a href="#以-pwm-backlight-为例：" class="headerlink" title="以 pwm backlight 为例："></a>以 pwm backlight 为例：</h2><p><img src="/2022/02/13/uboot-uboot-dirver-model/NO2.jpeg"></p>
<p>通过 UBOOTDRIVER 的 id 可以看出，该设备(pwm backlight)驱动属于 UCLASSPANELBACKLIGHT 类。</p>
<p><img src="/2022/02/13/uboot-uboot-dirver-model/NO3.jpeg"></p>
<p>这里定义了 backlight 的 UCLASS_DRIVER。该 uclass driver 提供了<code> backlight_enable(struct udevice*dev) 和 backlight_set_brightness(struct udevice*dev,intpercent)</code> 两个通用的 API 供应用调用，可以看到他们都需要传递对应设备的 udevice ，然后通过 backlight_get_ops(dev) 拿到对该设备的操作接口。</p>
<p>#define backlight_get_ops(dev)  ((struct backlight_ops *)(dev)-&gt;driver-&gt;ops)</p>
<h1 id="driver"><a href="#driver" class="headerlink" title="driver"></a>driver</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct driver - A driver for a feature or peripheral</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This holds methods for setting up a new device, and also removing it.</span></span><br><span class="line"><span class="comment"> * The device needs information to set itself up - this is provided either</span></span><br><span class="line"><span class="comment"> * by platdata or a device tree node (which we find by looking up</span></span><br><span class="line"><span class="comment"> * matching compatible strings with of_match).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Drivers all belong to a uclass, representing a class of devices of the</span></span><br><span class="line"><span class="comment"> * same type. Common elements of the drivers can be implemented in the uclass,</span></span><br><span class="line"><span class="comment"> * or the uclass can provide a consistent interface to the drivers within</span></span><br><span class="line"><span class="comment"> * it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @name: Device name</span></span><br><span class="line"><span class="comment"> * @id: Identifies the uclass we belong to</span></span><br><span class="line"><span class="comment"> * @of_match: List of compatible strings to match, and any identifying data</span></span><br><span class="line"><span class="comment"> * for each.</span></span><br><span class="line"><span class="comment"> * @bind: Called to bind a device to its driver</span></span><br><span class="line"><span class="comment"> * @probe: Called to probe a device, i.e. activate it</span></span><br><span class="line"><span class="comment"> * @remove: Called to remove a device, i.e. de-activate it</span></span><br><span class="line"><span class="comment"> * @unbind: Called to unbind a device from its driver</span></span><br><span class="line"><span class="comment"> * @ofdata_to_platdata: Called before probe to decode device tree data</span></span><br><span class="line"><span class="comment"> * @child_post_bind: Called after a new child has been bound</span></span><br><span class="line"><span class="comment"> * @child_pre_probe: Called before a child device is probed. The device has</span></span><br><span class="line"><span class="comment"> * memory allocated but it has not yet been probed.</span></span><br><span class="line"><span class="comment"> * @child_post_remove: Called after a child device is removed. The device</span></span><br><span class="line"><span class="comment"> * has memory allocated but its device_remove() method has been called.</span></span><br><span class="line"><span class="comment"> * @priv_auto_alloc_size: If non-zero this is the size of the private data</span></span><br><span class="line"><span class="comment"> * to be allocated in the device&#x27;s -&gt;priv pointer. If zero, then the driver</span></span><br><span class="line"><span class="comment"> * is responsible for allocating any data required.</span></span><br><span class="line"><span class="comment"> * @platdata_auto_alloc_size: If non-zero this is the size of the</span></span><br><span class="line"><span class="comment"> * platform data to be allocated in the device&#x27;s -&gt;platdata pointer.</span></span><br><span class="line"><span class="comment"> * This is typically only useful for device-tree-aware drivers (those with</span></span><br><span class="line"><span class="comment"> * an of_match), since drivers which use platdata will have the data</span></span><br><span class="line"><span class="comment"> * provided in the U_BOOT_DEVICE() instantiation.</span></span><br><span class="line"><span class="comment"> * @per_child_auto_alloc_size: Each device can hold private data owned by</span></span><br><span class="line"><span class="comment"> * its parent. If required this will be automatically allocated if this</span></span><br><span class="line"><span class="comment"> * value is non-zero.</span></span><br><span class="line"><span class="comment"> * @per_child_platdata_auto_alloc_size: A bus likes to store information about</span></span><br><span class="line"><span class="comment"> * its children. If non-zero this is the size of this data, to be allocated</span></span><br><span class="line"><span class="comment"> * in the child&#x27;s parent_platdata pointer.</span></span><br><span class="line"><span class="comment"> * @ops: Driver-specific operations. This is typically a list of function</span></span><br><span class="line"><span class="comment"> * pointers defined by the driver, to implement driver functions required by</span></span><br><span class="line"><span class="comment"> * the uclass.</span></span><br><span class="line"><span class="comment"> * @flags: driver flags - see DM_FLAGS_...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">driver</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> *name;</span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">uclass_id</span> <span class="title">id</span>;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">udevice_id</span> *<span class="title">of_match</span>;</span></span><br><span class="line">	<span class="keyword">int</span> (*bind)(struct udevice *dev);</span><br><span class="line">	<span class="keyword">int</span> (*probe)(struct udevice *dev);</span><br><span class="line">	<span class="keyword">int</span> (*remove)(struct udevice *dev);</span><br><span class="line">	<span class="keyword">int</span> (*unbind)(struct udevice *dev);</span><br><span class="line">	<span class="keyword">int</span> (*ofdata_to_platdata)(struct udevice *dev);</span><br><span class="line">	<span class="keyword">int</span> (*child_post_bind)(struct udevice *dev);</span><br><span class="line">	<span class="keyword">int</span> (*child_pre_probe)(struct udevice *dev);</span><br><span class="line">	<span class="keyword">int</span> (*child_post_remove)(struct udevice *dev);</span><br><span class="line">	<span class="keyword">int</span> priv_auto_alloc_size;</span><br><span class="line">	<span class="keyword">int</span> platdata_auto_alloc_size;</span><br><span class="line">	<span class="keyword">int</span> per_child_auto_alloc_size;</span><br><span class="line">	<span class="keyword">int</span> per_child_platdata_auto_alloc_size;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">void</span> *ops;	<span class="comment">/* driver-specific operations */</span></span><br><span class="line">	<span class="keyword">uint32_t</span> flags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>通过 UBOOTDRIVER(__name) 宏声明。如果 driver 实现了 bind 接口，该bind 将在 device_bind_common 中 device 和 driver 匹配上后被调用, 而且在 device_bind_common 中会完成 udevice 和 driver 的绑定。</p>
<p>driver 一般都有对应的 probe 接口，通过 device_probe(structudevice*dev) 调用，需要注意的是driver 的 bind 接口调用的比 probe 接口早， 大部分在 dm_init_and_scan 中就被调用了。</p>
<p>driver 一般会提供 ops 操作接口，供上一层调用。</p>
<p>需要说明的是，driver 一般都不需要把自己注册到 uclass 中，而是在 device_bind _common 阶段实现driver 、uclass、device 三者的对接，然后 uclass 层通过 udevice-&gt;driver-&gt;ops 获取对应 driver 的操作接口。</p>
<h1 id="设备驱动的使用"><a href="#设备驱动的使用" class="headerlink" title="设备驱动的使用"></a>设备驱动的使用</h1><p>一般应用层的代码要使用某个设备的时候，首先需要通过 uclass_get_device_xxx 系列 API 拿到该设备的 udevice， 然后通过该设备的 uclass 提供的 API 操作该设备。</p>
<p>uclass_get_device_xxx 拿到该设备的 udevice 后会调用该设备的 probe 接口。</p>
<p>以前面提到的 pwm backlight 为例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * drivers/video/simple_panel.c</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">udevice</span> *<span class="title">bldev</span>;</span></span><br><span class="line">uclass_get_device_by_phandle(UCLASS_PANEL_BACKLIGHT, dev, <span class="string">&quot;backlight&quot;</span>, &amp;bldev);</span><br><span class="line">backlight_enable(bldev);</span><br><span class="line">backlight_set_brightness(bldev, percent);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uboot</category>
      </categories>
      <tags>
        <tag>uboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Framebuffer</title>
    <url>/2022/02/13/Linux%E9%A9%B1%E5%8A%A8-LCD%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p>像素颜色</p>
<p>用红绿蓝三颜色来表示，可以用24位数据来表示红绿蓝，也可以用16位等等格式，比如：</p>
<ul>
<li>bpp：bits per pixel，每个像素用多少位来表示</li>
<li>24bpp：实际上会用到32位，其中8位未使用，其余24位中分别用8位表示红(R)、绿(G)、蓝(B) 。24位使用32位来存储方便寻址。</li>
<li>16bpp：有rbg565，rgb555<ul>
<li>rgb565：用5位表示红、6位表示绿、5位表示蓝。人眼对绿色较敏感，能分辨出其中的细微差别</li>
<li>rgb555：16位数据中用5位表示红、5位表示绿、5位表示蓝，浪费一位</li>
</ul>
</li>
</ul>
<p><img src="002_rgb.png"></p>
<p>注：有些LCD控制器可以设置红绿蓝三原色的位置，比如24位的数据里，可能是RGB888，也可能是BGR888</p>
<h1 id="Framebuffer"><a href="#Framebuffer" class="headerlink" title="Framebuffer"></a>Framebuffer</h1><p>存储像素数据的一块特殊内存，<strong>显存</strong></p>
<ul>
<li>也有芯片手册称为 <strong>GRAM</strong>, G指图形</li>
</ul>
<h2 id="对于应用工程师"><a href="#对于应用工程师" class="headerlink" title="对于应用工程师"></a>对于<strong>应用工程师</strong></h2><p>使用LCD只需要掌握三点：</p>
<ol>
<li>颜色格式：16bpp/24bpp</li>
<li>Framebuffer基地址</li>
<li>LCD屏幕分辨率，根据分辨率才能找到像素点在显存的任意位置</li>
</ol>
<p>应用工程师将数据写入Framebuffer即可，LCD controler （LCD控制器）会帮助更新屏幕上像素的颜色。</p>
<h2 id="对于驱动工程师"><a href="#对于驱动工程师" class="headerlink" title="对于驱动工程师"></a>对于驱动工程师</h2><p>对LCD的理解要深入硬件，比如要回答这几个问题：</p>
<ul>
<li>Framebuffer在哪里？</li>
</ul>
<p>LCD里面还是LCD外面</p>
<ul>
<li>谁把Framebuffer中的数据发给LCD？</li>
</ul>
<p>LCD controler，驱动工程师很大一部分工作既是设置初始化LCD controler</p>
<h1 id="统一的硬件模型"><a href="#统一的硬件模型" class="headerlink" title="统一的硬件模型"></a>统一的硬件模型</h1><p>LCD接口众多，但硬件模型一致，原理一致</p>
<p><img src="004_lcd_hardware_block.png"></p>
<h2 id="MCU常用的8080接口LCD模组"><a href="#MCU常用的8080接口LCD模组" class="headerlink" title="MCU常用的8080接口LCD模组"></a>MCU常用的8080接口LCD模组</h2><p>内存，LCD控制器，LCD屏幕组合成一个<strong>LCM模组</strong>，单片机F103直接跟模组通信</p>
<p>F103一般通过以下信号线跟LCM模组通信</p>
<ul>
<li>CS 片选线</li>
<li>RD / WD 读写控制线</li>
<li>DataBus 数据总线</li>
<li>Data / cmd 控制引脚，决定DataBus上传输的是数据还是地址等其他信息</li>
</ul>
<h2 id="MPU常用的TFT-RGB接口"><a href="#MPU常用的TFT-RGB接口" class="headerlink" title="MPU常用的TFT RGB接口"></a>MPU常用的TFT RGB接口</h2><p>只有LCD屏幕在外面，LCD控制器位于ARM芯片内部，可外接显存。LCD控制器通过RGB三组线以及其他控制信号线对LCD屏幕进行控制</p>
<ul>
<li>DCLK 移动一个像素点</li>
<li>HSYNC 从最右跳到下一行</li>
<li>VSYNC 从最后一个跳到第一个</li>
<li>DE 决定是否接受RGB数据，在像素点跳转时禁用RGB数据</li>
</ul>
<h2 id="RGB三组线"><a href="#RGB三组线" class="headerlink" title="RGB三组线"></a>RGB三组线</h2><ul>
<li><p>对于使用真彩色的LCD控制器，RGB引脚上的数据直接来自自Framebuffer；</p>
</li>
<li><p>对于使用调色板的LCD控制器，Framebuffer中的数据只是用来取出调色板中的颜色，调色板中的数据会被放到RGB引脚上去。</p>
</li>
</ul>
<h1 id="编写Framebuffer框架"><a href="#编写Framebuffer框架" class="headerlink" title="编写Framebuffer框架"></a>编写Framebuffer框架</h1><p>分配显存时，不可以使用kmalloc函数。</p>
<p>显存要保证物理地址连续，kamlloc函数分配的内存可以保证虚拟地址的联系，但在物理地址上不一定是连续的。</p>
<p>Framebuffer框架分为上下两层：</p>
<ul>
<li>fbmem.c：承上启下<ul>
<li>实现、注册file_operations结构体</li>
<li>把APP的调用向下转发到具体的硬件驱动程序</li>
</ul>
</li>
<li>xxx_fb.c：硬件相关的驱动程序<ul>
<li>实现、注册fb_info结构体</li>
<li>实现硬件操作</li>
</ul>
</li>
</ul>
<h2 id="Framebuffer核心："><a href="#Framebuffer核心：" class="headerlink" title="Framebuffer核心："></a>Framebuffer核心：</h2><ul>
<li><p>分配fb_info</p>
<ul>
<li>framebuffer_alloc</li>
</ul>
</li>
<li><p>设置fb_info</p>
<ul>
<li>var</li>
<li>fbops</li>
<li>硬件相关操作</li>
</ul>
</li>
<li><p>注册fb_info</p>
<ul>
<li>register_framebuffer</li>
</ul>
</li>
</ul>
<h1 id="imx6ull-LCD-控制器"><a href="#imx6ull-LCD-控制器" class="headerlink" title="imx6ull LCD 控制器"></a>imx6ull LCD 控制器</h1><h2 id="控制器模块"><a href="#控制器模块" class="headerlink" title="控制器模块"></a>控制器模块</h2><ul>
<li>硬件框架</li>
<li>数据传输与处理</li>
<li>时序控制</li>
</ul>
<p>数据处理过程</p>
<ol>
<li>从显存读数据 32bit * n</li>
<li>判断是否交换</li>
<li>使用哪种RGB格式 RGB555， RGB565, RGB888</li>
<li>设置时序，用于发送数据</li>
<li>RGB 数据格式 跟LCD屏幕匹配</li>
</ol>
<p>例如：RGB 888 - &gt; 16bpp的LCD ，在8位中只传五位</p>
<h2 id="LCD控制器寄存器简介"><a href="#LCD控制器寄存器简介" class="headerlink" title="LCD控制器寄存器简介"></a>LCD控制器寄存器简介</h2><p>查看任何芯片的LCD控制器寄存器时，记住几个要点：</p>
<p>① 怎么把LCD的信息告诉LCD控制器：即分辨率、行列时序、像素时钟等；<br>② 怎么把显存地址、像素格式告诉LCD控制器。</p>
<h1 id="内核中的LCD驱动程序"><a href="#内核中的LCD驱动程序" class="headerlink" title="内核中的LCD驱动程序"></a>内核中的LCD驱动程序</h1><p>如何确定内存LCD驱动程序</p>
<p>在已经编译好的内核中 <code>drivers/video/fbdev</code>目录下，有哪些<code>.o</code>文件，对应的<code>.c</code>文件。</p>
<h1 id="编程-LCD驱动程序框架-使用设备树"><a href="#编程-LCD驱动程序框架-使用设备树" class="headerlink" title="编程_LCD驱动程序框架_使用设备树"></a>编程_LCD驱动程序框架_使用设备树</h1><p>Linux驱动程序 = 驱动程序框架 + 硬件编程。</p>
<p>驱动程序框架核心就是：</p>
<ul>
<li>分配fb_info</li>
<li>设置fb_info</li>
<li>注册fb_info</li>
<li>硬件相关的设置</li>
</ul>
<h2 id="硬件相关的设置"><a href="#硬件相关的设置" class="headerlink" title="硬件相关的设置"></a>硬件相关的设置</h2><ul>
<li>引脚设置</li>
<li>时钟设置</li>
<li>LCD控制器设置</li>
</ul>
<p>入口函数注册<code>platform_driver</code></p>
<p>设备树结点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">framebuffer-mylcd &#123;</span><br><span class="line">        compatible = &quot;huahui,lcd_drv&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="编写probe函数"><a href="#编写probe函数" class="headerlink" title="编写probe函数"></a>编写probe函数</h2><ul>
<li>驱动程序框架核心 fb_info</li>
<li>硬件相关的设置</li>
</ul>
<h1 id="引脚配置"><a href="#引脚配置" class="headerlink" title="引脚配置"></a>引脚配置</h1><p>主要使用<strong>pinctrl子系统</strong>把引脚配置为LCD功能，对于背光引脚等使用<strong>GPIO子系统</strong>的函数控制它的输出电平。</p>
<p>设备树结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pinctrl-names = <span class="string">&quot;default&quot;</span>;</span><br><span class="line">pinctrl<span class="number">-0</span> = &lt;&amp;pmylcd_pinctrl&gt;;</span><br><span class="line">backlight-gpios = &lt;&amp;gpio1 <span class="number">8</span> GPIO_ACTIVE_HIGH&gt;;</span><br></pre></td></tr></table></figure>



<h1 id="时钟配置"><a href="#时钟配置" class="headerlink" title="时钟配置"></a>时钟配置</h1><p>通过芯片手册，查看需要使能那些时钟</p>
<p>设备树结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">clocks = &lt;&amp;clks IMX6UL_CLK_LCDIF_PIX&gt;,</span><br><span class="line">         &lt;&amp;clks IMX6UL_CLK_LCDIF_APB&gt;;</span><br><span class="line">clock-names = <span class="string">&quot;pix&quot;</span>, <span class="string">&quot;axi&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="配置LCD控制器"><a href="#配置LCD控制器" class="headerlink" title="配置LCD控制器"></a>配置LCD控制器</h1><h2 id="在设备树里指定LCD参数"><a href="#在设备树里指定LCD参数" class="headerlink" title="在设备树里指定LCD参数"></a>在设备树里指定LCD参数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">framebuffer-mylcd &#123;</span><br><span class="line">		compatible = &quot;100ask,lcd_drv&quot;;</span><br><span class="line">        pinctrl-names = &quot;default&quot;;</span><br><span class="line">		pinctrl-0 = &lt;&amp;mylcd_pinctrl&gt;;</span><br><span class="line">		backlight-gpios = &lt;&amp;gpio1 8 GPIO_ACTIVE_HIGH&gt;;</span><br><span class="line"></span><br><span class="line">           clocks = &lt;&amp;clks IMX6UL_CLK_LCDIF_PIX&gt;,</span><br><span class="line">                    &lt;&amp;clks IMX6UL_CLK_LCDIF_APB&gt;;</span><br><span class="line">           clock-names = &quot;pix&quot;, &quot;axi&quot;;</span><br><span class="line">           </span><br><span class="line">           display = &lt;&amp;display0&gt;;</span><br><span class="line"></span><br><span class="line">		display0: display &#123;</span><br><span class="line">			bits-per-pixel = &lt;24&gt;;</span><br><span class="line">			bus-width = &lt;24&gt;;</span><br><span class="line"></span><br><span class="line">			display-timings &#123;</span><br><span class="line">				native-mode = &lt;&amp;timing0&gt;;</span><br><span class="line"></span><br><span class="line">				 timing0: timing0_1024x768 &#123;</span><br><span class="line">				 clock-frequency = &lt;50000000&gt;;</span><br><span class="line">				 hactive = &lt;1024&gt;;</span><br><span class="line">				 vactive = &lt;600&gt;;</span><br><span class="line">				 hfront-porch = &lt;160&gt;;</span><br><span class="line">				 hback-porch = &lt;140&gt;;</span><br><span class="line">				 hsync-len = &lt;20&gt;;</span><br><span class="line">				 vback-porch = &lt;20&gt;;</span><br><span class="line">				 vfront-porch = &lt;12&gt;;</span><br><span class="line">				 vsync-len = &lt;3&gt;;</span><br><span class="line"></span><br><span class="line">				 hsync-active = &lt;0&gt;;</span><br><span class="line">				 vsync-active = &lt;0&gt;;</span><br><span class="line">				 de-active = &lt;1&gt;;</span><br><span class="line">				 pixelclk-active = &lt;0&gt;;</span><br><span class="line">				 &#125;;</span><br><span class="line"></span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;;            </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="从设备树获得参数"><a href="#从设备树获得参数" class="headerlink" title="从设备树获得参数"></a>从设备树获得参数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line">u32 width;</span><br><span class="line">u32 bits_per_pixel;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">display_timings</span> *<span class="title">timings</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* get display node from device tree , pdev-&gt;dev.of_node : from father node*/</span></span><br><span class="line">display_np = of_parse_phandle(pdev-&gt;dev.of_node, <span class="string">&quot;display&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* get common info 通用属性 */</span></span><br><span class="line">ret = of_property_read_u32(display_np, <span class="string">&quot;bus-width&quot;</span>, &amp;width);</span><br><span class="line">ret = of_property_read_u32(display_np, <span class="string">&quot;bits-per-pixel&quot;</span>,</span><br><span class="line">			   &amp;bits_per_pixel);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* get timings from device tree */</span></span><br><span class="line">  timings = of_get_display_timings(display_np);</span><br></pre></td></tr></table></figure>

<h2 id="使用参数配置LCD控制器"><a href="#使用参数配置LCD控制器" class="headerlink" title="使用参数配置LCD控制器"></a>使用参数配置LCD控制器</h2><p>根据芯片手册，一个一个设置寄存器：</p>
<ul>
<li>Framebuffer地址设置</li>
<li>Framebuffer中数据格式设置</li>
<li>LCD时序参数设置</li>
<li>LCD引脚极性设置</li>
</ul>
<p>注意：硬件参数，例如lcd控制器物理地址等，最好在设备树中指定，而不是写在代码中</p>
<h1 id="调试LCD驱动程序"><a href="#调试LCD驱动程序" class="headerlink" title="调试LCD驱动程序"></a>调试LCD驱动程序</h1><p>要做的事情</p>
<ul>
<li><p>去除内核自带的驱动程序</p>
</li>
<li><p>加入我们编写的驱动程序、设备树文件</p>
</li>
<li><p>重新编译内核、设备树</p>
</li>
<li><p>上机测试：使用编译出来的内核、设备树启动板子</p>
</li>
</ul>
<h1 id="单Buffer的缺点与改进方法"><a href="#单Buffer的缺点与改进方法" class="headerlink" title="单Buffer的缺点与改进方法"></a>单Buffer的缺点与改进方法</h1><h2 id="单buffer的缺点"><a href="#单buffer的缺点" class="headerlink" title="单buffer的缺点"></a>单buffer的缺点</h2><ul>
<li><p>如果APP速度很慢，可以看到它在LCD上缓慢绘制图案</p>
</li>
<li><p>即使APP速度很高，LCD控制器不断从Framebuffer中读取数据来显示，而APP不断把数据写入Framebuffer</p>
<ul>
<li><p>假设APP想把LCD显示为整屏幕的蓝色、红色</p>
</li>
<li><p>很大几率出现这种情况：</p>
<ul>
<li><p>LCD控制器读取Framebuffer数据，读到一半时，在LCD上显示了半屏幕的蓝色</p>
</li>
<li><p>这是APP非常高效地把整个Framebuffer的数据都改为了红色</p>
</li>
<li><p>LCD控制器继续读取数据，于是LCD上就会显示半屏幕蓝色、半屏幕红色</p>
</li>
<li><p>人眼就会感觉到屏幕闪烁、撕裂</p>
<img src="048_singble_buffer.png" style="zoom:53%;" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="使用多Buffer来改进"><a href="#使用多Buffer来改进" class="headerlink" title="使用多Buffer来改进"></a>使用多Buffer来改进</h2><p>上述两个缺点的根源是一致的：Framebuffer中的数据还没准备好整帧数据，就被LCD控制器使用了。</p>
<ul>
<li>使用双buffer甚至多buffer可以解决这个问题。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* 假设有2个Framebuffer：FB0、FB1</span><br><span class="line">* LCD控制器正在读取FB0</span><br><span class="line">* APP写FB1</span><br><span class="line">* 写好FB1后，让LCD控制器切换到FB1</span><br><span class="line">* APP写FB0</span><br><span class="line">* 写好FB0后，让LCD控制器切换到FB0	</span><br></pre></td></tr></table></figure>

<p>具体流程：</p>
<p><img src="049_drv_app_use_double_buff.png"></p>
<ul>
<li>驱动：分配多个buffer</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fb_info-&gt;fix.smem_len = SZ_32M;</span><br><span class="line">fbi-&gt;screen_base = dma_alloc_writecombine(fbi-&gt;device, <span class="comment">//fbi-&gt;screen_base虚拟地址</span></span><br><span class="line">				fbi-&gt;fix.smem_len,</span><br><span class="line">				(<span class="keyword">dma_addr_t</span> *)&amp;fbi-&gt;fix.smem_start, <span class="comment">//fix.smem_start物理地址</span></span><br><span class="line">				GFP_DMA | GFP_KERNEL);</span><br></pre></td></tr></table></figure>

<ul>
<li>驱动：保存buffer信息</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fb_info-&gt;fix.smem_len  <span class="comment">// 含有总buffer大小 </span></span><br><span class="line">fb_info-&gt;var           <span class="comment">// 含有单个buffer信息</span></span><br></pre></td></tr></table></figure>

<p>fb_info固定信息 fix：显存起始地址，大小</p>
<p>可变信息 var：x / y 分辨率</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*一般情况下*/</span> <span class="comment">/*分配了多个buffer，在y轴上叠加*/</span></span><br><span class="line">yres_virtual = yres *n; xres_virtual = xres; </span><br><span class="line"><span class="comment">/* 但驱动程序一开始并不使能多buffer </span></span><br><span class="line"><span class="comment">*  即yres_virtual = yres；</span></span><br><span class="line"><span class="comment">*  需要 set : yres_virtual = yres *n;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>APP : 读取buffer信息</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ioctl(fd_fb, FBIOGET_FSCREENINFO, &amp;fix);</span><br><span class="line">ioctl(fd_fb, FBIOGET_VSCREENINFO, &amp;var);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算是否支持多buffer，有多少个buffer</span></span><br><span class="line">screen_size = var.xres * var.yres * var.bits_per_pixel / <span class="number">8</span>;</span><br><span class="line">nBuffers = fix.smem_len / screen_size;</span><br></pre></td></tr></table></figure>

<ul>
<li>APP：使能多buffer</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">var.yres_virtual = nBuffers * var.yres;</span><br><span class="line">ioctl(fd_fb, FBIOPUT_VSCREENINFO, &amp;var);</span><br></pre></td></tr></table></figure>

<ul>
<li>APP : 写buffer</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fb_base = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)mmap(<span class="literal">NULL</span> , fix.smem_len, PROT_READ | PROT_WRITE, MAP_SHARED, fd_fb, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* get buffer */</span></span><br><span class="line">pNextBuffer =  fb_base + nNextBuffer * screen_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* set buffer */</span></span><br><span class="line">lcd_draw_screen(pNextBuffer, colors[i]);</span><br></pre></td></tr></table></figure>

<ul>
<li>APP : 切换buffer</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* switch buffer */</span></span><br><span class="line">var.yoffset = nNextBuffer * var.yres;</span><br><span class="line">ioctl(fd_fb, FBIOPAN_DISPLAY, &amp;var);</span><br></pre></td></tr></table></figure>

<ul>
<li>驱动：切换buffer</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fbmem.c</span></span><br><span class="line"><span class="function">fb_ioctl</span></span><br><span class="line"><span class="function">    do_fb_ioctl</span></span><br><span class="line"><span class="function">    	<span class="title">fb_pan_display</span><span class="params">(info, &amp;var)</span></span>;</span><br><span class="line">			err = info-&gt;fbops-&gt;fb_pan_display(var, info) <span class="comment">// 调用硬件相关的函数   </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux驱动</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>driver</tag>
      </tags>
  </entry>
  <entry>
    <title>Inline</title>
    <url>/2022/02/13/C%E7%BC%96%E7%A8%8B-inline/</url>
    <content><![CDATA[<h1 id="inline-内联函数"><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h1><p>有些函数短小精悍而且调用频繁，调用开销大，经常保护现场，恢复现场，算下来性价比不高。这时就可以将这个函数声明为内联函数。编译器在编译过程中遇到内联函数，<strong>像宏一样，将内联函数直接在调用处展开</strong>，这样就可以减少函数调用的开支：<strong>直接执行内联函数展开的代码，不用再保存现场和恢复现场</strong>。</p>
<h2 id="内联函数和宏"><a href="#内联函数和宏" class="headerlink" title="内联函数和宏"></a>内联函数和宏</h2><p>内联函数和宏的功能差不多，为什么不直接定义一个宏定义？而是定义一个内联函数？</p>
<p>存在即合理，内联函数在 C 语言中有广泛运用，自然有其原因。与宏相比，内联函数有以下优势：</p>
<ul>
<li><p>参数类型检查</p>
<pre><code>    内联函数随有宏的展开特性，但其本质仍是函数，在编译过程中，编译器仍可以对其进行参数检查，而宏不具备这个功能。
</code></pre>
</li>
<li><p>便于调试</p>
<p>​        函数支持的调试功能有断点、单步等，内联函数同样支持。        </p>
</li>
<li><p>返回值</p>
<p>​        内联函数有返回值，返回一个结果给调用者。这个优势是相对 ANSI C 说的，因为现在宏也可以有返回值和类型了，如前面使用语句表达式的宏。</p>
</li>
<li><p>接口封装</p>
<p>​        有些内联函数可以用来封装一个接口，而宏不具备这个功能。</p>
</li>
</ul>
<h2 id="内联函数不足"><a href="#内联函数不足" class="headerlink" title="内联函数不足"></a>内联函数不足</h2><p>内联函数并不是完美无瑕的，也存在不足。</p>
<ul>
<li>内联函数会增大函数体积。<br>  如果一个文件中多次调用内联函数，多次展开，那整个程序的体积就会变大，在一定程度上会减低程序的执行效率。</li>
<li>减低代码复用性。<br>  函数的作用之一就是提高代码的复用性。我们将一些代码封装成函数，进行模块化编程，可以减轻软件开发的工作量，而内联函数往往又减低函数的复用性。</li>
</ul>
<h2 id="编译器对内联函数的处理"><a href="#编译器对内联函数的处理" class="headerlink" title="编译器对内联函数的处理"></a>编译器对内联函数的处理</h2><p>我们通过 <code>inline</code>关键字将一个函数声明为内联函数，但编译器不一定会对这个内联函数在进行展开。编译器也要根据实际情况进行评估。除了检测用户定义的内联函数是否含有指针、循环、递归，还会在函数执行效率和函数调用开销之间进行权衡。</p>
<p>从程序员角度出发，是否展开主要考虑如下因素：</p>
<ul>
<li>函数体积大小</li>
<li>函数体内无指针赋值、递归、循环等语句</li>
<li>调用频繁</li>
</ul>
<p>当我们认为一个函数体积小，而且被大量调用，应该做内联展开。</p>
<h3 id="属性声明：noinline"><a href="#属性声明：noinline" class="headerlink" title="属性声明：noinline"></a>属性声明：noinline</h3><p>明确告诉编译器不展开内联函数</p>
<h3 id="属性声明：always-inline"><a href="#属性声明：always-inline" class="headerlink" title="属性声明：always_inline"></a>属性声明：always_inline</h3><p>明确告诉编译器展开内联函数</p>
<h2 id="内联函数定义在头文件中"><a href="#内联函数定义在头文件中" class="headerlink" title="内联函数定义在头文件中"></a>内联函数定义在头文件中</h2><p>在Linux 内核中，有大量的内联函数被定义在头文件中，而且经常使用 <code>static</code>修饰。</p>
<p>Q: 为什么内联函数要定义在头文件中？</p>
<blockquote>
<p> A: 因为它是一个内联函数，可以像宏一样展开，任何像使用这个内联函数的源文件，都不必亲自去定义一遍，直接包含这个头文件即可，即像宏定义一样使用。</p>
</blockquote>
<p>Q：为什么要加<code>static</code>修饰</p>
<blockquote>
<p>inline 定义的内联函数不一定会展开，当一个工程中多个文件都包含这个内联函数的定义时，编译时就有可能报重定义错误。使用 static 关键字修饰，则可以将这个函数的作用域限制在各自的文件内，避免重定义错误的发生。</p>
</blockquote>
]]></content>
      <categories>
        <category>C编程</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>GDB 内存操作</title>
    <url>/2022/02/15/gdb-gdb-memory/</url>
    <content><![CDATA[<h1 id="gdb查看内存数据"><a href="#gdb查看内存数据" class="headerlink" title="gdb查看内存数据"></a>gdb查看内存数据</h1><p>格式: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x/nfu</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><code>x</code> 是 examine 的缩写，意思是检查</li>
<li><code>n</code>表示要显示的内存单元的个数</li>
<li><code>f</code>表示显示方式</li>
<li><code>u</code>表示一个地址单元的长度：</li>
</ul>
<h2 id="显示方式-f-取值"><a href="#显示方式-f-取值" class="headerlink" title="显示方式 f 取值"></a>显示方式 f 取值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x 按十六进制格式显示变量。</span><br><span class="line">d 按十进制格式显示变量。</span><br><span class="line">u 按十进制格式显示无符号整型。</span><br><span class="line">o 按八进制格式显示变量。</span><br><span class="line">t 按二进制格式显示变量。</span><br><span class="line">a 按十六进制格式显示变量。</span><br><span class="line">i 指令地址格式</span><br><span class="line">c 按字符格式显示变量。</span><br><span class="line">f 按浮点数格式显示变量。</span><br></pre></td></tr></table></figure>
<h2 id="地址单元长度-u-取值"><a href="#地址单元长度-u-取值" class="headerlink" title="地址单元长度 u 取值"></a>地址单元长度 u 取值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b表示单字节，</span><br><span class="line">h表示双字节，</span><br><span class="line">w表示四字节，</span><br><span class="line">g表示八字节</span><br></pre></td></tr></table></figure>

<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x/50xw 0x40451400</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>50</code>是数量，<code>x</code>是16进制，<code>w</code>是四字节</p>
<h1 id="Examining-Memory"><a href="#Examining-Memory" class="headerlink" title="Examining Memory"></a>Examining Memory</h1><p>You can use the command <code>x</code> (for “examine”) to examine memory in any of several formats, independently of your program’s data types.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x/nfu addr</span><br><span class="line">x addr</span><br><span class="line">x</span><br></pre></td></tr></table></figure>

<p>Use the x command to examine memory.</p>
<p><code>n</code>, <code>f</code>, and <code>u</code> are all optional parameters that specify how much memory to display and how to format it; addr is an expression giving the address where you want to start displaying memory. If you use defaults for nfu, you need not type the slash ‘/’. Several commands set convenient defaults for addr.</p>
<h2 id="n-the-repeat-count"><a href="#n-the-repeat-count" class="headerlink" title="n, the repeat count"></a>n, the repeat count</h2><pre><code>The repeat count is a decimal integer; the default is 1. 
It specifies how much memory (counting by units u) to display. 
If a negative number is specified, memory is examined backward from addr.
</code></pre>
<h2 id="f-the-display-format"><a href="#f-the-display-format" class="headerlink" title="f, the display format"></a>f, the display format</h2><pre><code>The display format is one of the formats used by print 
(‘x’, ‘d’, ‘u’, ‘o’, ‘t’, ‘a’, ‘c’, ‘f’, ‘s’), 
‘i’ (for machine instructions) and ‘m’ (for displaying memory tags). 
The default is ‘x’ (hexadecimal) initially. 
The default changes each time you use either x or print.
</code></pre>
<h2 id="u-the-unit-size"><a href="#u-the-unit-size" class="headerlink" title="u, the unit size"></a>u, the unit size</h2><p>The unit size is any of</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b</span><br><span class="line">Bytes.</span><br><span class="line"></span><br><span class="line">h</span><br><span class="line">Halfwords (two bytes).</span><br><span class="line"></span><br><span class="line">w</span><br><span class="line">Words (four bytes). This is the initial default.</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">Giant words (eight bytes).</span><br></pre></td></tr></table></figure>

<ul>
<li>Each time you specify a unit size with x, that size becomes the default unit the next time you use x. </li>
<li>For the ‘i’ format, the unit size is ignored and is normally not written. </li>
<li>For the ‘s’ format, the unit size defaults to ‘b’, unless it is explicitly given. </li>
<li>Use x /hs to display 16-bit char strings and x /ws to display 32-bit strings. The next use of x /s will again display 8-bit strings. </li>
<li>Note that the results depend on the programming language of the current compilation unit. </li>
<li>If the language is C, the ‘s’ modifier will use the UTF-16 encoding while ‘w’ will use UTF-32. The encoding is set by the programming language and cannot be altered.</li>
</ul>
<h1 id="modify-memory"><a href="#modify-memory" class="headerlink" title="modify memory"></a>modify memory</h1><p>In order to set the variable g, use </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) set var g=4</span><br></pre></td></tr></table></figure>
<p>GDB allows more implicit conversions in assignments than C; you can freely store an integer value into a pointer variable or vice versa,<br>and you can convert any structure to any other structure that is the same length or shorter.</p>
<p>To store values into arbitrary places in memory, use the ‘{…}’ construct to generate a value of specified type at a specified address (see Expressions).<br>For example, {int}0x83040 refers to memory location 0x83040 as an integer (which implies a certain size and representation in memory), and</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set &#123;int&#125;0x83040 = 4</span><br></pre></td></tr></table></figure>
<p>stores the value 4 into that memory location.</p>
<p>This should work for any valid pointer, and can be cast to any appropriate data type.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set *((int *) 0xbfbb0000) = 20</span><br></pre></td></tr></table></figure>

<p>e.g.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">set *(unsigned char      *)&lt;memaddr&gt; = &lt;value&gt;  ; write 1 byte</span><br><span class="line">set *(unsigned short     *)&lt;memaddr&gt; = &lt;value&gt;  ; write 2 bytes</span><br><span class="line">set *(unsigned int       *)&lt;memaddr&gt; = &lt;value&gt;  ; write 4 bytes</span><br><span class="line">set *(unsigned long long *)&lt;memaddr&gt; = &lt;value&gt;  ; write 8 bytes</span><br><span class="line"> </span><br><span class="line">or</span><br><span class="line"> </span><br><span class="line">set *(char      *)&lt;memaddr&gt; = &lt;value&gt;           ; write 1 byte</span><br><span class="line">set *(short     *)&lt;memaddr&gt; = &lt;value&gt;           ; write 2 bytes</span><br><span class="line">set *(int       *)&lt;memaddr&gt; = &lt;value&gt;           ; write 4 bytes</span><br><span class="line">set *(long long *)&lt;memaddr&gt; = &lt;value&gt;           ; write 8 bytes</span><br></pre></td></tr></table></figure>

<p>or use</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set *0xbfbb0000=20</span><br></pre></td></tr></table></figure>
<p>change memory locations directly.</p>
]]></content>
      <categories>
        <category>gdb</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile 特殊符号</title>
    <url>/2022/02/15/makefile-makefile/</url>
    <content><![CDATA[<h1 id="Makefile-特殊符号"><a href="#Makefile-特殊符号" class="headerlink" title="Makefile 特殊符号"></a>Makefile 特殊符号</h1><p> <code>- @ + $ $$</code></p>
<h2 id="符号-连字符"><a href="#符号-连字符" class="headerlink" title="- 符号 (连字符)"></a><code>-</code> 符号 (连字符)</h2><p>任何命令行的任何非零退出状态都被忽略，忽略当前命令行执行时所遇到的错误。<br>make 在执行命令的时候，如果遇到 error，会退出执行。加上减号的目的是即便此命令行执行出错，那么也不要管，继续执行 make。<br>通常删除或者创建文件时，遇到文件不存在或者已经创建。如果希望忽略掉错误，继续执行，就可以在命令行前面添加 <code>-</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">	-rm $(objects)</span><br></pre></td></tr></table></figure>
<h2 id="符号-at-符号"><a href="#符号-at-符号" class="headerlink" title="@ 符号 (at 符号)"></a><code>@</code> 符号 (at 符号)</h2><p>通常 makefile 会将其执行的命令行在执行前输出到屏幕上。如果将 @ 添加到命令行前，这个命令将不被 make 回显出来，<strong>即不显示命令本身而只显示结果</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">all :</span><br><span class="line">	@echo &quot;Make&quot;</span><br></pre></td></tr></table></figure>
<h2 id="符号-加号"><a href="#符号-加号" class="headerlink" title="+ 符号 (加号)"></a><code>+</code> 符号 (加号)</h2><p>使用加号修饰符让命令始终执行。命令行执行时不受到 make 的 -n -t -q 三个参数的影响，忽略这三个参数。<br>如果 make 执行时，使用 -n 或 –just-print。该参数显示命令，不会执行命令。这个功能有利于调试 Makefile，方便查看执行的命令形式和顺序。</p>
<h2 id="符号-美元符号"><a href="#符号-美元符号" class="headerlink" title="$ 符号 (美元符号)"></a><code>$</code> 符号 (美元符号)</h2><p>美元符号 <code>$</code>，扩展打开 makefile 中定义的变量。</p>
<h2 id="符号"><a href="#符号" class="headerlink" title="$$ 符号"></a><code>$$</code> 符号</h2><p><code>$$</code> 符号，扩展打开 makefile 中定义的 shell 变量。</p>
]]></content>
      <categories>
        <category>makefile</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Tig</title>
    <url>/2022/02/15/git-Tig/</url>
    <content><![CDATA[<h1 id="How-to-use-Tig-to-browse-Git-logs"><a href="#How-to-use-Tig-to-browse-Git-logs" class="headerlink" title="How to use Tig to browse Git logs"></a>How to use Tig to browse Git logs</h1><p>Tig is more than just a text-mode interface for Git. Here’s how it can enhance your daily workflow.</p>
<p>If you work with Git as your version control system, you’ve likely already resigned yourself to the fact that Git is a complicated beast. It is a fantastic tool, but it can be cumbersome to navigate Git repositories. That’s where a tool like Tig comes in.</p>
<p>From the <a href="http://manpages.ubuntu.com/manpages/jammy/man1/tig.1.html">Tig man page</a>:</p>
<blockquote>
<p>Tig is an ncurses-based text-mode interface for git. It functions mainly as a Git repository browser, but can also assist in staging changes for commit at chunk level and act as a pager for output from various Git commands.</p>
</blockquote>
<p>This basically means that Tig provides a text-based user interface you can run in your terminal. Tig makes it easy to browse your Git logs, but it can do much more than just bounce you around from your last commit to a previous one.</p>
<p><img src="/2022/02/15/git-Tig/1-default.png"></p>
<p>Many of the examples in this quick introduction to Tig have been poached directly from its excellent man page. I highly recommend reading it to learn more.</p>
<h1 id="Install-Tig"><a href="#Install-Tig" class="headerlink" title="Install Tig"></a>Install Tig</h1><ul>
<li>Fedora and RHEL: <code>sudo dnf install tig</code></li>
<li>Ubuntu and Debian: <code>sudo apt install tig</code></li>
<li>MacOS: <code>brew install tig</code></li>
</ul>
<p>See the official <a href="https://jonas.github.io/tig/INSTALL.html">installation instructions</a> for even more options.</p>
<h1 id="Browse-commits-in-your-current-branch"><a href="#Browse-commits-in-your-current-branch" class="headerlink" title="Browse commits in your current branch"></a>Browse commits in your current branch</h1><p>If you want to browse the latest commits in your branch, enter:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tig</span><br></pre></td></tr></table></figure>
<p>That’s it. This three-character command will launch a browser where you can navigate the commits in your current branch. You can think of it as a wrapper around <strong>git log</strong>.</p>
<p>To navigate the output, you can use the <code>Up</code> and <code>Down</code> arrow keys to move from one commit to another. Pressing the <code>Return/Enter</code> key will open a vertical split with the contents of the chosen commit on the right-hand side. You can continue to browse up and down in your commit history on the left-hand side, and your changes will appear on the right. Use <code>k</code> and <code>j</code> to navigate up and down by line and <code>-</code> and the <code>Space Bar</code> to page up and down on the right-hand side. Use <code>q</code> to exit the right-hand pane.</p>
<p>Searching on tig output is simple as well. Use <code>/</code> to search forward and <code>?</code> to search backward on both the left and right panes.</p>
<p><img src="/2022/02/15/git-Tig/2-commit.png"></p>
<p>That’s enough to get you started navigating your commits. There are too many key bindings to cover here, but clicking <code>h</code> will display a Help menu where you can discover its navigation and command options. You can also use <code>/</code> and <code>?</code> to search the Help menu. Use <code>q</code> to exit Help.</p>
<p><img src="/2022/02/15/git-Tig/3-help.png"></p>
<h1 id="Browse-revisions-for-a-single-file"><a href="#Browse-revisions-for-a-single-file" class="headerlink" title="Browse revisions for a single file"></a>Browse revisions for a single file</h1><p>Since Tig is a wrapper around <code>git log</code>, it conveniently accepts the same arguments that can be passed to <code>git log</code>. For instance, to browse the commit history for a single file, enter:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tig README.md</span><br></pre></td></tr></table></figure>
<p>Compare this with the output of the Git command being wrapped to get a clearer view of how Tig enhances the output.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log README.md</span><br></pre></td></tr></table></figure>
<p>To include the patches in the raw Git output, you can add a <code>-p</code> option:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p README.md</span><br></pre></td></tr></table></figure>
<p>If you want to narrow the commits down to a specific date range, try something like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tig --after=&quot;2017-01-01&quot; --before=&quot;2018-05-16&quot; -- README.md</span><br></pre></td></tr></table></figure>
<p>Again, you can compare this with the raw Git version:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --after=&quot;2017-01-01&quot; --before=&quot;2018-05-16&quot; -- README.md</span><br></pre></td></tr></table></figure>
<h1 id="Browse-who-changed-a-file"><a href="#Browse-who-changed-a-file" class="headerlink" title="Browse who changed a file"></a>Browse who changed a file</h1><p>Sometimes you want to find out who made a change to a file and why. The command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tig blame README.md</span><br></pre></td></tr></table></figure>
<p>is essentially a wrapper around <code>git blame</code>. As you would expect, it allows you to see who the last person was to edit a given line, and it also allows you to navigate to the commit that introduced the line. This is somewhat like the <code>:Gblame</code> command Vim’s <code>vim-fugitive</code> plugin provides.</p>
<h1 id="Browse-your-stash"><a href="#Browse-your-stash" class="headerlink" title="Browse your stash"></a>Browse your stash</h1><p>If you’re like me, you may have a pile of edits in your stash. It’s easy to lose track of them. You can view the latest item in your stash via: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash show -p stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>
<p>You can find the second most recent item via:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash show -p stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>
<p>and so on. If you can recall these commands whenever you need them, you have a much sharper memory than I do.</p>
<p>As with the Git commands above, Tig makes it easy to enhance your Git output with a simple invocation:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tig stash</span><br></pre></td></tr></table></figure>
<p>Try issuing this command in a repository with a populated stash. You’ll be able to browse and search your stash items, giving you a quick overview of everything you saved for a rainy day.</p>
<h1 id="Browse-your-refs"><a href="#Browse-your-refs" class="headerlink" title="Browse your refs"></a>Browse your refs</h1><p>A Git ref is the hash of something you have committed. This includes files as well as branches. Using the <code>tig refs</code> command allows you to browse all of your refs and drill down to specific commits.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tig refs</span><br></pre></td></tr></table></figure>
<p>When you’re finished, use <code>q</code> to return to a previous menu.</p>
<h1 id="Browse-git-status"><a href="#Browse-git-status" class="headerlink" title="Browse git status"></a>Browse git status</h1><p>If you want to view which files have been staged and which are untracked, use tig status, a wrapper around <code>git status</code>.</p>
<p><img src="/2022/02/15/git-Tig/4-status.png"></p>
<h1 id="Browse-git-grep"><a href="#Browse-git-grep" class="headerlink" title="Browse git grep"></a>Browse git grep</h1><p>You can use the <code>grep</code> command to search for expressions in text files. The command <code>tig grep</code> allows you to navigate the output of <code>git grep</code>. For example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tig grep -i foo lib/Bar</span><br></pre></td></tr></table></figure>
<p>will navigate the output of a case-insensitive search for <code>foo</code> in the <code>lib/Bar</code> directory.</p>
<h1 id="Pipe-output-to-Tig-via-STDIN"><a href="#Pipe-output-to-Tig-via-STDIN" class="headerlink" title="Pipe output to Tig via STDIN"></a>Pipe output to Tig via STDIN</h1><p>If you are piping a list of commit IDs to Tig, you must use the <code>--stdin</code> flag so that <code>tig show</code> reads from stdin. Otherwise, <code>tig show</code> launches without input (rendering an empty screen).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rev-list --author=olaf HEAD | tig show --stdin</span><br></pre></td></tr></table></figure>
<h1 id="Add-custom-bindings"><a href="#Add-custom-bindings" class="headerlink" title="Add custom bindings"></a>Add custom bindings</h1><p>You can customize Tig with an <code>rc</code> file. Here’s how you can configure Tig to your liking, using the example of adding some helpful custom key bindings.</p>
<p>Create a file in your home directory called <code>.tigrc</code>. Open <code>~/.tigrc</code> in your favorite editor and add:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Apply the selected stash</span><br><span class="line">bind stash a !?git stash apply %(stash)</span><br><span class="line"></span><br><span class="line"># Drop the selected stash item</span><br><span class="line">bind stash x !?git stash drop %(stash)</span><br></pre></td></tr></table></figure>
<p>Run <code>tig stash</code> to browse your stash, as above. However, with these bindings in place, you can press <code>a</code> to apply an item from the stash to your repository and <code>x</code> to drop an item from the stash. Keep in mind that you’ll need to perform these commands when browsing the stash list. If you’re browsing a stash item, enter <code>q</code> to exit that view and press <code>a</code> or <code>x</code> to get the effect you want.</p>
<p>For more information, you can read more about <a href="https://github.com/jonas/tig/wiki/Bindings">Tig key bindings.</a></p>
<p>Wrapping up<br>I hope this has been a helpful demonstration of how Tig can enhance your daily workflow. Tig can do even more powerful things (such as staging lines of code), but that’s outside the scope of this introductory article. There’s enough information here to make you dangerous, but there’s still more to explore.</p>
<p>via: <a href="https://opensource.com/article/19/6/what-tig">https://opensource.com/article/19/6/what-tig</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Tig</tag>
      </tags>
  </entry>
  <entry>
    <title>Tig Manual</title>
    <url>/2022/02/15/git-Tig-manual/</url>
    <content><![CDATA[<p>NAME</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tig - text-mode interface for Git</span><br></pre></td></tr></table></figure>
<p>SYNOPSIS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tig        [options] [revisions] [--] [paths]</span><br><span class="line">tig log    [options] [revisions] [--] [paths]</span><br><span class="line">tig show   [options] [revisions] [--] [paths]</span><br><span class="line">tig reflog [options] [revisions]</span><br><span class="line">tig blame  [options] [rev] [--] path</span><br><span class="line">tig grep   [options] [pattern]</span><br><span class="line">tig refs   [options]</span><br><span class="line">tig stash</span><br><span class="line">tig status</span><br><span class="line">tig &lt;      [Git command output]</span><br></pre></td></tr></table></figure>
<p>DESCRIPTION</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tig is an ncurses-based text-mode interface for git(1). It functions mainly as a Git</span><br><span class="line">repository browser, but can also assist in staging changes for commit at chunk level and</span><br><span class="line">act as a pager for output from various Git commands.</span><br></pre></td></tr></table></figure>
<p>OPTIONS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Command line options recognized by Tig include all valid git-log(1) and git-diff(1)</span><br><span class="line">options, as well as the following subcommands and Tig-specific options. The first command</span><br><span class="line">line parameter not starting with &quot;-&quot; is interpreted as being either a revision</span><br><span class="line">specification or a path and will end the option parsing. All additional options will be</span><br><span class="line">passed to the underlying Git command.</span><br><span class="line"></span><br><span class="line">show</span><br><span class="line">    Open diff view using the given git-show(1) options.</span><br><span class="line"></span><br><span class="line">blame</span><br><span class="line">    Show given file annotated by commits. Takes zero or more git-blame(1) options.</span><br><span class="line">    Optionally limited from given revision.</span><br><span class="line"></span><br><span class="line">status</span><br><span class="line">    Start up in status view.</span><br><span class="line"></span><br><span class="line">log</span><br><span class="line">    Start up in log view, displaying git-log(1) output.</span><br><span class="line"></span><br><span class="line">reflog</span><br><span class="line">    Start up in reflog view.</span><br><span class="line"></span><br><span class="line">refs</span><br><span class="line">    Start up in refs view.</span><br><span class="line"></span><br><span class="line">stash</span><br><span class="line">    Start up in stash view.</span><br><span class="line"></span><br><span class="line">grep</span><br><span class="line">    Open the grep view. Supports the same options as git-grep(1).</span><br><span class="line"></span><br><span class="line">+&lt;number&gt;</span><br><span class="line">    Show the first view with line &lt;number&gt; visible and selected.</span><br><span class="line"></span><br><span class="line">-v, --version</span><br><span class="line">    Show version and exit.</span><br><span class="line"></span><br><span class="line">-h, --help</span><br><span class="line">    Show help message and exit.</span><br><span class="line"></span><br><span class="line">-C&lt;path&gt;</span><br><span class="line">    Run as if Tig was started in &lt;path&gt; instead of the current working directory.</span><br></pre></td></tr></table></figure>
<p>PAGER MODE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tig enters pager mode when input is provided via stdin and supports the following</span><br><span class="line">subcommands and options:</span><br><span class="line"></span><br><span class="line">·   When the show subcommand is specified and the --stdin option is given, stdin is</span><br><span class="line">    assumed to be a list of commit IDs and will be forwarded to the diff view’s underlying</span><br><span class="line">    git-show(1) command. For example:</span><br><span class="line"></span><br><span class="line">    $ git rev-list --author=vivien HEAD | tig show --stdin</span><br><span class="line"></span><br><span class="line">·   When --stdin is given, stdin is assumed to be a list of commit IDs and will be</span><br><span class="line">    forwarded to the main view’s underlying git-log(1) command. For example:</span><br><span class="line"></span><br><span class="line">    $ tig --no-walk --stdin &lt; cherry-picks.txt</span><br><span class="line"></span><br><span class="line">·   When --pretty=raw is given, stdin is assumed to be a &quot;pretty=raw&quot; formatted output</span><br><span class="line">    similar to that of git-log(1). For example:</span><br><span class="line"></span><br><span class="line">    $ git reflog --pretty=raw | tig --pretty=raw</span><br><span class="line"></span><br><span class="line">When no subcommands nor options are given, the pager view will be used for displaying the</span><br><span class="line">Git command input given on stdin. The pager view assumes the input is either from</span><br><span class="line">git-log(1) or git-diff(1) and will highlight it similar to the log and diff views. For</span><br><span class="line">example:</span><br><span class="line"></span><br><span class="line">    $ git log -Schange -p --raw | tig</span><br></pre></td></tr></table></figure>
<p>EXAMPLES</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Display the list of commits for the current branch:</span><br><span class="line"></span><br><span class="line">    $ tig</span><br><span class="line"></span><br><span class="line">Display commits from one or more branches:</span><br><span class="line"></span><br><span class="line">    $ tig test master</span><br><span class="line"></span><br><span class="line">Pretend as if all the refs in refs/ are listed on the command line:</span><br><span class="line"></span><br><span class="line">    $ tig --all</span><br><span class="line"></span><br><span class="line">Display differences between two branches:</span><br><span class="line"></span><br><span class="line">    $ tig test..master</span><br><span class="line"></span><br><span class="line">Display changes for sub-module versions:</span><br><span class="line"></span><br><span class="line">    $ tig --submodule</span><br><span class="line"></span><br><span class="line">Display changes for a single file:</span><br><span class="line"></span><br><span class="line">    $ tig -- README</span><br><span class="line"></span><br><span class="line">Display contents of the README file in a specific revision:</span><br><span class="line"></span><br><span class="line">    $ tig show tig-0.8:README</span><br><span class="line"></span><br><span class="line">Display revisions between two dates for a specific file:</span><br><span class="line"></span><br><span class="line">    $ tig --after=&quot;2004-01-01&quot; --before=&quot;2006-05-16&quot; -- README</span><br><span class="line"></span><br><span class="line">Blame file with copy detection enabled:</span><br><span class="line"></span><br><span class="line">    $ tig blame -C README</span><br><span class="line"></span><br><span class="line">Display the list of stashes:</span><br><span class="line"></span><br><span class="line">    $ tig stash</span><br><span class="line"></span><br><span class="line">Grep all files for lines containing DEFINE_ENUM:</span><br><span class="line"></span><br><span class="line">    $ tig grep -p DEFINE_ENUM</span><br><span class="line"></span><br><span class="line">Show references (branches, remotes and tags):</span><br><span class="line"></span><br><span class="line">    $ tig refs</span><br><span class="line"></span><br><span class="line">Use word diff in the diff view:</span><br><span class="line"></span><br><span class="line">    $ tig --word-diff=plain</span><br></pre></td></tr></table></figure>
<p>ENVIRONMENT VARIABLES</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In addition to environment variables used by Git (e.g. GIT_DIR), Tig defines the ones</span><br><span class="line">below. The command related environment variables have access to the internal state of Tig</span><br><span class="line">via replacement variables, such as %(commit) and %(blob). See tigrc(5) for a full list.</span><br><span class="line"></span><br><span class="line">TIGRC_USER</span><br><span class="line">    Path of the user configuration file (defaults to ~/.tigrc or</span><br><span class="line">    $XDG_CONFIG_HOME/tig/config).</span><br><span class="line"></span><br><span class="line">TIGRC_SYSTEM</span><br><span class="line">    Path of the system wide configuration file (defaults to &#123;sysconfdir&#125;/tigrc). Define to</span><br><span class="line">    empty string to use built-in configuration.</span><br><span class="line"></span><br><span class="line">TIG_LS_REMOTE</span><br><span class="line">    Command for retrieving all repository references. The command should output data in</span><br><span class="line">    the same format as git-ls-remote(1).</span><br><span class="line"></span><br><span class="line">TIG_DIFF_OPTS</span><br><span class="line">    The diff options to use in the diff view. The diff view uses git-show(1) for</span><br><span class="line">    formatting and always passes --patch-with-stat. You may also set the diff-options</span><br><span class="line">    setting in the configuration file.</span><br><span class="line"></span><br><span class="line">TIG_TRACE</span><br><span class="line">    Path for trace file where information about Git commands are logged.</span><br><span class="line"></span><br><span class="line">TIG_SCRIPT</span><br><span class="line">    Path to script that should be executed automatically on startup. If this environment</span><br><span class="line">    variable is defined to the empty string, the script is read from stdin. The script is</span><br><span class="line">    interpreted line-by-line and can contain prompt commands and key mappings.</span><br><span class="line"></span><br><span class="line">TIG_NO_DISPLAY</span><br><span class="line">    Open Tig without rendering anything to the terminal. This force Ncurses to write to</span><br><span class="line">    /dev/null. The main use is for automated testing of Tig.</span><br></pre></td></tr></table></figure>
<p>FILES</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$XDG_CONFIG_HOME/tig/config, ~/.config/tig/config, ~/.tigrc</span><br><span class="line">    The Tig user configuration file is loaded in the following way. If $XDG_CONFIG_HOME is</span><br><span class="line">    set, read user configuration from $XDG_CONFIG_HOME/tig/config. If $XDG_CONFIG_HOME is</span><br><span class="line">    empty or undefined, read user configuration from ~/.config/tig/config if it exists and</span><br><span class="line">    fall back to ~/.tigrc if it does not exist. See tigrc(5) for examples.</span><br><span class="line"></span><br><span class="line">/etc/tigrc</span><br><span class="line">    System wide configuration file.</span><br><span class="line"></span><br><span class="line">$GIT_DIR/config, ~/.gitconfig, /etc/gitconfig</span><br><span class="line">    Git configuration files. Read on start-up with the help of git-config(1).</span><br><span class="line"></span><br><span class="line">$XDG_DATA_HOME/tig/history, ~/.local/share/tig/history, ~/.tig_history</span><br><span class="line">    When compiled with readline support, Tig writes a persistent command and search</span><br><span class="line">    history. The location of the history file is determined in the following way. If</span><br><span class="line">    $XDG_DATA_HOME is set and $XDG_DATA_HOME/tig/ exists, store history to</span><br><span class="line">    $XDG_DATA_HOME/tig/history. If $XDG_DATA_HOME is empty or undefined, store history to</span><br><span class="line">    ~/.local/share/tig/history if the directory ~/.local/share/tig/ exists, and fall back</span><br><span class="line">    to ~/.tig_history if it does not exist.</span><br></pre></td></tr></table></figure>
<p>BUGS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please visit Tig’s home page[1] or main Git repository[2] for information about new</span><br><span class="line">releases and how to report bugs or feature request.</span><br></pre></td></tr></table></figure>
<p>COPYRIGHT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Copyright (c) 2006-2014 Jonas Fonseca &lt;jonas.fonseca@gmail.com[3]&gt;</span><br><span class="line"></span><br><span class="line">This program is free software; you can redistribute it and/or modify it under the terms of</span><br><span class="line">the GNU General Public License as published by the Free Software Foundation; either</span><br><span class="line">version 2 of the License, or (at your option) any later version.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Tig</tag>
      </tags>
  </entry>
  <entry>
    <title>GTAGS</title>
    <url>/2022/03/16/tags/</url>
    <content><![CDATA[<h1 id="使用Gtags辅助查看kernel源码"><a href="#使用Gtags辅助查看kernel源码" class="headerlink" title="使用Gtags辅助查看kernel源码"></a>使用Gtags辅助查看kernel源码</h1><p>使用<code>make gtags</code>在kernel根目录下生成索引文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gtags       - Generate GNU GLOBAL index</span><br></pre></td></tr></table></figure>
<p>kernel已对该命令进行封装，不必手动生成索引文件。在生成索引文件时还可以指定架构，这可以有效减少干扰项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make gtags ARCH=arm</span><br><span class="line">make gtags ARCH=riscv</span><br></pre></td></tr></table></figure>

<p>kernel根目录下会生成三个新文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls G*</span></span><br><span class="line">GPATH	GRTAGS	GTAGS</span><br></pre></td></tr></table></figure>

<h1 id="gtags-vim"><a href="#gtags-vim" class="headerlink" title="gtags.vim"></a>gtags.vim</h1><p>General form of Gtags command is as follows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:Gtags [option] pattern</span><br></pre></td></tr></table></figure>
<p>To go to ‘func’, you can say</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags func</span><br></pre></td></tr></table></figure>
<p>Input completion is available. If you forgot the name of a function but recall only some characters of the head, please input them and press <TAB> key.</TAB></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags fu&lt;TAB&gt;</span><br><span class="line">:Gtags func			&lt;- Vim will append &#x27;nc&#x27;.</span><br></pre></td></tr></table></figure>

<p>To go to the referenced point of ‘func’, add <code>-r</code> option.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags -r func</span><br></pre></td></tr></table></figure>
<p>To go to any symbols which are not defined in GTAGS, try this.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags -s func</span><br></pre></td></tr></table></figure>
<p>To go to any string other than symbol, try this.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags -g ^[sg]et_</span><br></pre></td></tr></table></figure>
<p>This command accomplishes the same function as grep(1) but is more convenient because it retrieves an entire directory structure.</p>
<p>To get list of objects in a file ‘main.c’, use -f command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags -f main.c</span><br></pre></td></tr></table></figure>
<p>If you are editing main.c itself, you can use ‘%’ instead.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags -f %</span><br></pre></td></tr></table></figure>
<p>You can get a list of files whose path include specified pattern.<br>For example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   :Gtags -P /vm/			&lt;- all files under &#x27;vm&#x27; directory.</span><br><span class="line">   :Gtags -P \.h$			&lt;- all include files.</span><br><span class="line">:Gtags -P init			&lt;- all paths includes &#x27;init&#x27;</span><br></pre></td></tr></table></figure>
<p>If you omitted an argument and input only <ENTER> key to the prompt, vim shows list of all files in the project.</ENTER></p>
<p>Since all short options are sent to global(1) as is, you can  use the -i, -o, -O, and so on.</p>
<p>For example, if you want to ignore case distinctions in pattern.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags -gi paTtern</span><br></pre></td></tr></table></figure>
<p>It will match to both of ‘PATTERN’ and ‘pattern’.</p>
<p>If you want to search a pattern which starts with a hyphen like ‘-C’<br> then you can use the -e option like grep(1).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags -ge -C</span><br></pre></td></tr></table></figure>
<p>By default, Gtags command search only in source files. If you want to<br>search in both source files and text files, or only in text files then</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Gtags -go pattern		# both source and text</span><br><span class="line">:Gtags -gO pattern		# only text file</span><br></pre></td></tr></table></figure>

<h1 id="gtags-cscope"><a href="#gtags-cscope" class="headerlink" title="gtags-cscope"></a>gtags-cscope</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Find symbol		:cs find 0 or s</span><br><span class="line">Find definition		:cs find 1 or g</span><br><span class="line">Find functions called by this function	:cs find 2 or d</span><br><span class="line">Find reference		:cs find 3 or c</span><br><span class="line">Find text string	:cs find 4 or t</span><br><span class="line">Find egrep pattern	:cs find 6 or e</span><br><span class="line">Find path		:cs find 7 or f</span><br><span class="line">Find include file	:cs find 8 or i</span><br><span class="line">Find assignments	:cs find 9 or a</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般情况下，<code>Gtags</code>已能满足需求。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Gtags</tag>
      </tags>
  </entry>
  <entry>
    <title>YUV FORMAT</title>
    <url>/2022/03/16/video-yuv-format/</url>
    <content><![CDATA[<h1 id="YUV简介"><a href="#YUV简介" class="headerlink" title="YUV简介"></a>YUV简介</h1><p>YUV是一种颜色编码方法，它和我们熟知的RGB红绿蓝颜色体系相对应，它们之间能通过公式相互转换。YUV将亮度信息（Y）与色彩信息（UV）分离，没有UV信息一样可以显示完整的图像，只不过是黑白的。</p>
<p>YUV将亮度Y和色差UV三个信号分别进行编码，用同一信道发送出去。YUV不像RGB那样要求三个独立的视频信号同时传输，所以用YUV方式传送占用极少的频宽。</p>
<p>YUV 三个字母的意义分别为：</p>
<ul>
<li>Y：亮度，就是灰度值。除了表示亮度信号外，还含有较多的绿色通道量。单纯的 Y 分量可以显示出完整的黑白图像。</li>
<li>U：蓝色通道与亮度的差值。</li>
<li>V：红色通道与亮度的差值。</li>
</ul>
<p>其中，U、V 分量分别表示蓝 (blue)、红 (red) 分量信号，只含有色度信息，所以 YUV 也称为 YCbCr，其中，Cb、Cr的含义等同于U、V，C 可以理解为 component 或者 color。</p>
<table>
<thead>
<tr>
<th><img src="/2022/03/16/video-yuv-format/NO1_1.JPG"></th>
<th><img src="/2022/03/16/video-yuv-format/NO1.JPG"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2022/03/16/video-yuv-format/NO1_3.JPG"></td>
<td><img src="/2022/03/16/video-yuv-format/NO1_4.PNG"></td>
</tr>
</tbody></table>
<p>第一幅是Y分量描述黑白图像，第二幅是U(V)分量描述，第三幅是V(U)分量描述，第四幅是YUV三幅合成后得到的正常图像</p>
<p>人眼对亮度的敏感超过色度，即使把色度信息减少一点，人眼也无法查觉这一点。如果一张图片使用YUV格式保存将更少地占用存储空间。</p>
<blockquote>
<p>以采集视频为例，RGB24格式一帧的大小size＝width×heigth×3 Bit，RGB32的size＝width×heigth×4，如果是I420（即YUV标准格式4：2：0）的数据量是 size＝width×heigth×1.5 Bit</p>
</blockquote>
<h1 id="YUV详解"><a href="#YUV详解" class="headerlink" title="YUV详解"></a>YUV详解</h1><h2 id="YUV的存储格式"><a href="#YUV的存储格式" class="headerlink" title="YUV的存储格式"></a>YUV的存储格式</h2><p>YUV的存储格式有两大类：planar和packed。</p>
<ul>
<li><p>对于planar的YUV格式，先连续存储所有像素点的Y，紧接着存储所有像素点的U，随后是所有像素点的V。</p>
</li>
<li><p>对于packed的YUV格式，每个像素点的Y,U,V是连续交替存储的。</p>
</li>
</ul>
<h2 id="YUV的采样方式"><a href="#YUV的采样方式" class="headerlink" title="YUV的采样方式"></a>YUV的采样方式</h2><p>YUV采样方式，主要描述像素Y、U、V分量采样比例，即表达每个像素时，Y、U、V分量的数目，通常有三种方式：YUV4:4:4，YUV4:2:2，YUV4:2:0。</p>
<ul>
<li><p>YUV4:4:4采样，每一个Y对应一组UV分量。</p>
</li>
<li><p>YUV4:2:2采样，每两个Y共用一组UV分量。</p>
</li>
<li><p>YUV4:2:0采样，每四个Y共用一组UV分量。</p>
</li>
</ul>
<p>用图直观地表示采集的方式，以黑点表示采样该像点的Y分量，以空心圆圈表示采用该像素点的UV分量<br><img src="/2022/03/16/video-yuv-format/NO2.png"></p>
<ul>
<li><p>使用YUV4:4:4采样，一共要进行12次采样分别4个Y，4个U，4个V，对每一个Y,U,V每个需要8个比特位,就需要12*8=96位，平均下每个像素点需要96/4=24位比特位表示。</p>
</li>
<li><p>使用YUV4:2:2采样,就需要8*8 =64位，平均每个像素64/4=16位。</p>
</li>
<li><p>使用YUV4:2:0采样,就需要6*8 =48位，平均每个像素48/4=12位。</p>
</li>
</ul>
<h2 id="常见的YUV码流的存储方式"><a href="#常见的YUV码流的存储方式" class="headerlink" title="常见的YUV码流的存储方式"></a>常见的YUV码流的存储方式</h2><p>Cb、Cr的含义等同于U、V</p>
<p>YUVY 采用422采样格式，packed存储格式<br><img src="/2022/03/16/video-yuv-format/NO3.png"></p>
<p>YUVY 采用422采样格式，Planar存储格式<br><img src="/2022/03/16/video-yuv-format/NO4.png"></p>
<h2 id="YUV420"><a href="#YUV420" class="headerlink" title="YUV420"></a>YUV420</h2><h3 id="YUV420P-和-YUV420SP"><a href="#YUV420P-和-YUV420SP" class="headerlink" title="YUV420P 和 YUV420SP"></a>YUV420P 和 YUV420SP</h3><ul>
<li>YUV420p：又叫planer平面模式，Y ，U，V分别再不同平面，也就是有三个平面。</li>
<li>YUV420sp：又叫bi-planer或two-planer双平面，Y一个平面，UV在同一个平面交叉存储。<br><img src="/2022/03/16/video-yuv-format/NO5.png"></li>
</ul>
<p>YUV420P –&gt; YUV420SP<br><img src="/2022/03/16/video-yuv-format/NO6.PNG"></p>
<h3 id="NV12-和-NV21"><a href="#NV12-和-NV21" class="headerlink" title="NV12 和 NV21"></a>NV12 和 NV21</h3><ul>
<li>NV12:IOS只有这一种模式。存储顺序是先存Y，再UV交替存储。YYYYUVUVUV</li>
<li>NV21:安卓的模式。存储顺序是先存Y，再存U，再VU交替存储。YYYYVUVUVU</li>
</ul>
<p>NV12: UV交替<br><img src="/2022/03/16/video-yuv-format/NO7.jpg"></p>
<p>NV21:  VU交替</p>
<h3 id="YUV420的内存计算"><a href="#YUV420的内存计算" class="headerlink" title="YUV420的内存计算"></a>YUV420的内存计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Y = width * hight </span><br><span class="line"></span><br><span class="line">U = Y / 4   V = Y / 4</span><br><span class="line"></span><br><span class="line">U + V = Y/2</span><br></pre></td></tr></table></figure>

<p>YUV420中</p>
<ul>
<li>V的步长（也就是宽）是Y的步长的一半，V的行高也是Y的一半。</li>
<li>U的步长和行高与V相同，也就是都是Y的一半。</li>
<li>U 和 V 的内存占用为都Y的 1/4, <code>U + V</code> 的内存占用为 Y 的 1/2</li>
</ul>
<p>所以YUV420 数据在内存中的长度是 width * hight * 3 / 2 = width * hight * 1.5 </p>
<p>以720×488大小图象YUV420 planar为例，</p>
<p>其存储格式是： 共大小为720 × 480× 3 × 1.5字节，</p>
<p>分为三个部分:Y,U和V</p>
<ul>
<li><p>Y分量：    (720×480)个字节</p>
</li>
<li><p>U(Cb)分量：(720×480 × 1/4)个字节</p>
</li>
<li><p>V(Cr)分量：(720×480 × 1/4)个字节</p>
</li>
</ul>
<p>三个部分内部均是行优先存储，三个部分之间是Y,U,V 顺序存储。</p>
<p>即YUV数据</p>
<ul>
<li><p>0－－720×480字节是Y分量值，</p>
</li>
<li><p>720×480－－720×480×5/4字节是U分量</p>
</li>
<li><p>720×480×5/4 －－720×480×3/2字节是V分量。</p>
</li>
</ul>
<h2 id="YUV422"><a href="#YUV422" class="headerlink" title="YUV422"></a>YUV422</h2><p>每两个Y共用一组UV分量。<strong>U/V的步长（也就是宽）是Y的步长的一半，但高与 Y 相同</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Y = width * hight </span><br><span class="line"></span><br><span class="line">U = Y / 2   V = Y / 2</span><br><span class="line"></span><br><span class="line">Y = U + V</span><br></pre></td></tr></table></figure>

<h3 id="NV16-和-NV61"><a href="#NV16-和-NV61" class="headerlink" title="NV16 和 NV61"></a>NV16 和 NV61</h3><ul>
<li><p>NV16: UV 交替</p>
</li>
<li><p>NV61: VU 交替</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NV16：</span><br><span class="line">                    w</span><br><span class="line">            +--------------------+</span><br><span class="line">            |Y0Y1Y2Y3...         |</span><br><span class="line">            |...                 |   h</span><br><span class="line">            |...                 |</span><br><span class="line">            |                    |</span><br><span class="line">            +--------------------+        UV 交替为NV16，VU 交替为NV61</span><br><span class="line">            |U0V0U1V1            |</span><br><span class="line">            |...                 |   h</span><br><span class="line">            |...                 |</span><br><span class="line">            |                    |</span><br><span class="line">            +--------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="YUV420与YUV422"><a href="#YUV420与YUV422" class="headerlink" title="YUV420与YUV422"></a>YUV420与YUV422</h2><p>UV分量的长都是 Y的一般，仅有宽不同， 420 UV的宽是Y的 1/2， 422 UV的宽与 Y 相同</p>
<h2 id="YUV400"><a href="#YUV400" class="headerlink" title="YUV400"></a>YUV400</h2><p>灰度数据，没有色度数据, <strong>即仅有 Y 分量</strong></p>
<h2 id="YUV常用格式附录"><a href="#YUV常用格式附录" class="headerlink" title="YUV常用格式附录"></a>YUV常用格式附录</h2><table>
<thead>
<tr>
<th>格式</th>
<th>Mode</th>
<th>通道</th>
<th>比特</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>GRAY</td>
<td>Planar</td>
<td>1</td>
<td>8</td>
<td>400. Y0Y1…Y15</td>
</tr>
<tr>
<td>I420</td>
<td>Planar</td>
<td>3</td>
<td>12</td>
<td>420. Y0Y1..Y15  U0U1U2U3 V0V1V2V3   * 常用 理解为YU12</td>
</tr>
<tr>
<td>IYUV</td>
<td>Planar</td>
<td>3</td>
<td>12</td>
<td>同I420</td>
</tr>
<tr>
<td>YUV420P</td>
<td>Planar</td>
<td>3</td>
<td>12</td>
<td>同I420 * 感觉 YUV420P 名字更常用</td>
</tr>
<tr>
<td>YUVJ420P</td>
<td>Planar</td>
<td>3</td>
<td>12</td>
<td>同I420,不同的是色彩转换公式，YUVJ使用  JPEG 公式， 输出数据范围[0..255]， I420的范围是 [16-240]</td>
</tr>
<tr>
<td>YV12</td>
<td>Planar</td>
<td>3</td>
<td>12</td>
<td>420. Y0Y1..Y15  V0V1V2V3 U0U1U2U3   * 常用 很多编解码器都用这个格式输入输出</td>
</tr>
<tr>
<td>YVU420P</td>
<td>Planar</td>
<td>3</td>
<td>12</td>
<td>同YV12</td>
</tr>
<tr>
<td>NV12</td>
<td>Planar</td>
<td>2</td>
<td>12</td>
<td>420. Y0Y1..Y15  U0V0U1V1…..U3V3 *常用</td>
</tr>
<tr>
<td>NV21</td>
<td>Planar</td>
<td>2</td>
<td>12</td>
<td>420. Y0Y1..Y15  V0U0V1U1…..V3U3</td>
</tr>
<tr>
<td>YV16</td>
<td>Planar</td>
<td>3</td>
<td>16</td>
<td>422. Y0Y1..Y15  V0V1..V7 U0U1..U7</td>
</tr>
<tr>
<td>YUV422P</td>
<td>Planar</td>
<td>3</td>
<td>16</td>
<td>同YV16 * 感觉 YUV422P 名字更常用</td>
</tr>
<tr>
<td>I422</td>
<td>Planar</td>
<td>3</td>
<td>16</td>
<td>同YV16</td>
</tr>
<tr>
<td>UYVY</td>
<td>Packed</td>
<td>1</td>
<td>16</td>
<td>422. U0Y0V0Y1</td>
</tr>
<tr>
<td>Y422</td>
<td>Packed</td>
<td>1</td>
<td>16</td>
<td>同UYVY</td>
</tr>
<tr>
<td>YUY2</td>
<td>Packed</td>
<td>1</td>
<td>16</td>
<td>422. Y0U0Y1V0</td>
</tr>
<tr>
<td>YUV422</td>
<td>Packed</td>
<td>1</td>
<td>16</td>
<td>同YUY2</td>
</tr>
<tr>
<td>YUYV</td>
<td>Packed</td>
<td>1</td>
<td>16</td>
<td>同YUY2</td>
</tr>
<tr>
<td>YVYU</td>
<td>Packed</td>
<td>1</td>
<td>16</td>
<td>422. Y0V0Y1U0</td>
</tr>
<tr>
<td>YU16</td>
<td>Planar</td>
<td>3</td>
<td>16</td>
<td>422. Y0Y1..Y15 U0U1..U7 V0V1..V7</td>
</tr>
<tr>
<td>NV16</td>
<td>Planar</td>
<td>2</td>
<td>16</td>
<td>422. Y0Y1..Y15  U0V0U1V1..U7V7</td>
</tr>
<tr>
<td>YV24</td>
<td>Planar</td>
<td>3</td>
<td>24</td>
<td>444. Y0Y1..Y15  V0V1..V15 U0U1..U15</td>
</tr>
<tr>
<td>I444</td>
<td>Planar</td>
<td>3</td>
<td>24</td>
<td>同YV24</td>
</tr>
<tr>
<td>IYU2</td>
<td>Packed</td>
<td>1</td>
<td>24</td>
<td>444. U0Y0V0</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>yuv</category>
      </categories>
      <tags>
        <tag>yuv</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2022/07/08/hexo-hexo/</url>
    <content><![CDATA[<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><h2 id="创建新博客"><a href="#创建新博客" class="headerlink" title="创建新博客"></a>创建新博客</h2><p>new指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post -p 后端/test.md </span><br></pre></td></tr></table></figure>

<p>执行后，会在 <code>_posts</code>文件夹下创建子文件夹 “后端”，并创建一篇test.md博文。</p>
<h2 id="创建关联文件夹"><a href="#创建关联文件夹" class="headerlink" title="创建关联文件夹"></a>创建关联文件夹</h2><p><code>_config.yml</code> 配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<h2 id="网页生成"><a href="#网页生成" class="headerlink" title="网页生成"></a>网页生成</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate --&gt; hexo g</span><br><span class="line"></span><br><span class="line">hexo g -d #生成并部署</span><br></pre></td></tr></table></figure>

<h2 id="网页预览"><a href="#网页预览" class="headerlink" title="网页预览"></a>网页预览</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server --&gt; hexo s  #启动服务预览</span><br></pre></td></tr></table></figure>

<h2 id="网页部署"><a href="#网页部署" class="headerlink" title="网页部署"></a>网页部署</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy --&gt; hexo d #部署</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 寄存器</title>
    <url>/2022/07/08/vim-vim%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    <content><![CDATA[<h1 id="VIM寄存器"><a href="#VIM寄存器" class="headerlink" title="VIM寄存器"></a>VIM寄存器</h1><p>VIM有两个地方可以保存临时数据</p>
<pre><code>OS级别-剪切板
VIM级别-寄存器
</code></pre>
<p>VIM寄存器概述</p>
<p>寄存器是VIM用于保存临时数据的地方，不同于传统的编辑器（于系统共享一个寄存器，也成为剪切板），VIM具有多个寄存器，分别保存不同的临时数据，活用多个寄存器可以显著提高数据的安全和可操作性。<br>同时，为了与系统剪切板互通，VIM有一个专用的寄存器，与系统剪切板内容一致，既保证了VIM本身的统一性，也实现了与操作系统的对接。<br>查看寄存器值</p>
<pre><code>查看所有寄存器值：:reg
查看指定寄存器值：:reg &quot;&#123;register_name&#125;
</code></pre>
<p>调取寄存器值</p>
<pre><code>NORMAL Mode：&quot;&#123;register_name&#125;
COMMAND MODE：&lt;C-r&gt;+&quot;寄存器名称 （输入&lt;C-r&gt;后VIM会自动打出&quot;寄存器引用符号。
INSERT MODE：&lt;C-r&gt;+寄存器名称（无需输入寄存器引用符号&quot;）
</code></pre>
<p>VIM寄存器分类</p>
<ol>
<li>无名寄存器（默认寄存器）</li>
</ol>
<p>引用方式： <code>&quot;&quot;</code><br>该寄存器是默认的寄存器，所有的复制和修改操作（x、s、d、c、y）都会将该数据复制到无名寄存器。</p>
<ol start="2">
<li>字母寄存器</li>
</ol>
<p>引用方式：<code>&quot;a - &quot;z 或&quot;A - &quot;Z</code><br>{register_name}只能是一位的26个英文字母，从a-z。<br>大写字母A-Z寄存器内容将会合并到对应小写字母内容后边。</p>
<ol start="3">
<li>数字寄存器</li>
</ol>
<p>引用方式：<code>&quot;0 （数字0）- &quot;9</code></p>
<p>3.1 复制专用寄存器 0</p>
<p>引用方式：<code>&quot;0</code> （数字0）<br>仅当使用复制操作(y)时，该数据将会同时被复制到无名寄存器和复制专用寄存器。</p>
<p>3.2 逐级临时缓存寄存器1-9**</p>
<p>引用方式：”1 - “9 （数字1-9）<br>所有不带范围（‘(’，‘)’，‘{’，‘}’）、操作涉及1行以上的删除修改操作（x、s、d、c）的数据都会复制到逐级临时缓存寄存器，并在新的数据加入时，逐级先后推移。1的数据复制到2，2的复制到3，最后的9寄存器内容将会被删除。</p>
<pre><code>1行以内的数据删除修改操作的数据不会复制到逐级临时缓存寄存器1-9，而是复制到另一个Small Delete Register: &quot;-
</code></pre>
<ol start="4">
<li>黑洞寄存器</li>
</ol>
<p>引用方式：<code>&quot;_</code><br>几乎所有的操作涉及的数据都会被复制到寄存器，如果想让操作的数据不经过寄存器，可以指定黑洞寄存器，数据到该寄存器就会消失掉，不能显示，也不存在。</p>
<ol start="5">
<li>系统剪切板</li>
</ol>
<p>引用方式：<code>&quot;+ 或&quot;*</code><br>于VIM外部的GUI交互数据时，需要使用专用的系统剪切板。<br>在Unix环境下，”+寄存器需要+xterm-clipboard feature的VIM软件才能使用，具有这个feature的VIM可以安装vim-gtk（包含gvim和vim），使用gvim可以正常调用”+寄存器。</p>
<p>“+和”*的區別：</p>
<pre><code>    Under Windows, the * and + registers are equivalent.
    For X11 systems, though, they differ. For X11 systems, * is the selection, and + is the cut buffer (like clipboard).
        Text selected, or otherwise highlighted in one X11 app is available in the selection buffer.
        Text explicitly copied or cut is available in the cut buffer.
</code></pre>
<p>Ref:</p>
<ol>
<li><a href="https://vim.fandom.com/wiki/Accessing_the_system_clipboard">Accessing the system clipboard</a></li>
<li><a href="http://vimcasts.org/blog/2013/11/getting-vim-with-clipboard-support/">Getting Vim with +clipboard support</a></li>
</ol>
<p>5.1 剪切板与自动缩进indent</p>
<p>如果开启了set autoindent，在粘贴具有格式缩进的文本时（如python程序），粘贴的结果将会是缩进混乱的，因为set autoindent的影响。<br>解决这个问题有两个方法：</p>
<ol>
<li><p>使用 <code>set paste</code> 模式<br> 开启paste模式后，autoindent等缩进功能将会被屏蔽，粘贴格式就会不受影响。<br> 每次手工开启关闭paste模式将会比较麻烦，可以在_vimrc中为其设置一个快捷键，每次需要时按一下即可切换：set pastetoggle=<f12></p>
</li>
<li><p>使用普通模式的 <code>&quot;+p </code>命令</p>
</li>
<li><p>插入模式输入 <code>&lt;C-r&gt;&lt;C-p&gt;&quot;+</code></p>
</li>
<li><p>表达式寄存器</p>
</li>
</ol>
<p>引用方式：”=<br>所有寄存器里最特殊的一个，用于计算表达式。<br>输入完该寄存器应用后，会在命令行里提示“=”，按需输入表达式，结果将会显示到光标处。<br>7. 其他寄存器</p>
<p>“% 当前文件名，包含文件路径。<br>“/ 上次查找的内容。<br>“. 上次插入的内容。</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Debug</title>
    <url>/2022/07/08/sysfs-debugfs-sysfs-debugfs/</url>
    <content><![CDATA[<h1 id="sysfs"><a href="#sysfs" class="headerlink" title="sysfs"></a>sysfs</h1><p>在 sysfs 上添加一个文件节点，用于导出一些 debug 信息。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">reset_store</span><span class="params">(struct device *dev, struct device_attribute *devatte, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">bool</span> enable;</span><br><span class="line"></span><br><span class="line">    ret = kstrtobool(buf, &amp;enable);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enable) &#123;</span><br><span class="line">        dev_info(dev, <span class="string">&quot;reset\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR_WO</span><span class="params">(reset)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">debug_show</span><span class="params">(struct device *dev, struct device_attribute *devatte, <span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;This is a debug node\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%sAdd debug info\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR_RO</span><span class="params">(debug)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">attribute</span> *<span class="title">test_attr</span>[] =</span> &#123;</span><br><span class="line">    &amp;dev_attr_debug.attr,</span><br><span class="line">    &amp;dev_attr_reset.attr,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">stsfs_create</span><span class="params">(struct device *dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(test_attr); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!test_attr[i])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sysfs_add_file_to_group(&amp;dev-&gt;kobj, test_attr[i], <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            dev_err(dev, <span class="string">&quot;Failed to craeate test attr.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="debugfs"><a href="#debugfs" class="headerlink" title="debugfs"></a>debugfs</h1><p>在 debugfs 系统上创建一个节点，调试时需要先挂载 debugfs。</p>
<p>实现过程可参考 <code>ab8500-debugfs.c</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -t debugfs none mnt/</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<ol>
<li>在 debugfs 上创建一个 dir</li>
<li>在 dir 下创建文件</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ge_debug_show</span><span class="params">(struct seq_file *s, <span class="keyword">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	seq_printf(s, <span class="string">&quot;This is a debug node\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    seq_printf(s, <span class="string">&quot;%sAdd debug info\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">DEFINE_SHOW_ATTRIBUTE(ge_debug)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">xxx_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">debug_dir</span>;</span></span><br><span class="line"></span><br><span class="line">	debug_dir = debugfs_create_dir(<span class="string">&quot;test&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	debugfs_create_file(<span class="string">&quot;file_name&quot;</span>, (S_IRUGO | S_IWUSR | S_IWGRP), debug_dir, &amp;pdev-&gt;dev, &amp;ge_debug_fops);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>DEFINE_SHOW_ATTRIBUTE</code>会展开，简化代码。详情参考 <code>include/linux/seq_file.h</code></p>
<p>Linux 5.10 未对 <code>reset</code> 节点的实现进行封装。参考 <code>ab8500-debugfs.c</code>实现，代码较繁琐。</p>
]]></content>
      <categories>
        <category>debug</category>
      </categories>
      <tags>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Copy Between Memory and a File</title>
    <url>/2022/08/13/gdb-gdb-file/</url>
    <content><![CDATA[<p>官方文档路径 [Copy Between Memory and a File] (<a href="https://sourceware.org/gdb/onlinedocs/gdb/Dump_002fRestore-Files.html#:~:text=%28GDB%20can%20only%20append%20data%20to%20files%20in,specify%20the%20optional%20keyword%20binary%20after%20the%20filename">https://sourceware.org/gdb/onlinedocs/gdb/Dump_002fRestore-Files.html#:~:text=%28GDB%20can%20only%20append%20data%20to%20files%20in,specify%20the%20optional%20keyword%20binary%20after%20the%20filename</a>)</p>
<h1 id="导出内存为一个文件"><a href="#导出内存为一个文件" class="headerlink" title="导出内存为一个文件"></a>导出内存为一个文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dump [format] memory filename start_addr end_addr</span><br><span class="line">dump [format] value filename expr</span><br></pre></td></tr></table></figure>
<p>Dump the contents of memory from start_addr to end_addr, or the value of expr, to filename in the given format.</p>
<p>The format parameter may be any one of:</p>
<ul>
<li><p>binary</p>
<p>  Raw binary form.</p>
</li>
<li><p>ihex</p>
<p>  Intel hex format.</p>
</li>
<li><p>srec</p>
<p>  Motorola S-record format.</p>
</li>
<li><p>tekhex</p>
<p>  Tektronix Hex format.</p>
</li>
<li><p>verilog</p>
<p>  Verilog Hex format.</p>
</li>
</ul>
<h1 id="将一个文件加载进内存"><a href="#将一个文件加载进内存" class="headerlink" title="将一个文件加载进内存"></a>将一个文件加载进内存</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restore filename [binary] bias start end</span><br></pre></td></tr></table></figure>

<p>Restore the contents of file filename into memory. The restore command can automatically recognize any known BFD file format, except for raw binary. To restore a raw binary file you must specify the optional keyword binary after the filename.</p>
<p>If bias is non-zero, its value will be added to the addresses contained in the file. Binary files always start at address zero, so they will be restored at address bias. Other bfd files have a built-in location; they will be restored at offset bias from that location.</p>
<p>If start and/or end are non-zero, then only data between file offset start and file offset end will be restored. These offsets are relative to the addresses in the file, before the bias argument is applied.</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>将 /dev/fb0 的文件 dump 出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dump binary memory fb0.argb start_addr end_addr</span><br><span class="line"></span><br><span class="line">需要知道虚拟地址（基于物理地址的测试未进行）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将裸数据加载进 fb0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restore fb0.argb binary start_addr</span><br></pre></td></tr></table></figure>

<p>可以忽略 end_addr, 加载完后会显示加载到的地址范围</p>
]]></content>
      <categories>
        <category>gdb</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
</search>
