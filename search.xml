<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vim匹配</title>
    <url>/2021/09/12/vim/vim%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h1 id="按模式匹配还是按原义匹配"><a href="#按模式匹配还是按原义匹配" class="headerlink" title="按模式匹配还是按原义匹配"></a>按模式匹配还是按原义匹配</h1><h2 id="Tip-72-Tune-the-Case-Sensitivity-of-Search-Patterns"><a href="#Tip-72-Tune-the-Case-Sensitivity-of-Search-Patterns" class="headerlink" title="Tip 72 Tune the Case Sensitivity of Search Patterns"></a>Tip 72 Tune the Case Sensitivity of Search Patterns</h2><p>调整搜索大小写敏感度</p>
<p><strong>全局区分大小写</strong></p>
<p>通过设置 :set ignorecase 选项即可开启忽略大小写。需要注意的是, 此设置会对 Vim 关键词补全有一定的影响。</p>
<p><strong>每次搜索区分大小写</strong></p>
<p>可以使用以下选项来覆盖默认的是否忽略大小写:</p>
<ul>
<li><p>\c - 忽略大小写</p>
</li>
<li><p>\C - 区分大小写</p>
</li>
</ul>
<p>每次搜索的时候都可以强制指定是否区分大小写。注意：在替换时\c标志位为手工确认。</p>
<p><strong>启用智能大小写</strong></p>
<p>Vim 提供了预测我们大小写敏感意图的 smartcase 选项， :set smartcase</p>
<p>启用此选项后进行搜索时,</p>
<ul>
<li><p>如果输入的全部是小写字母, 那么就不区分大小写;</p>
</li>
<li><p>但只要包含大写字母, 那么就是大小写敏感的</p>
</li>
</ul>
<h2 id="Tip-73-Use-the-v-Pattern-Switch-for-Regex-Searches"><a href="#Tip-73-Use-the-v-Pattern-Switch-for-Regex-Searches" class="headerlink" title="Tip 73 Use the \v Pattern Switch for Regex Searches"></a>Tip 73 Use the \v Pattern Switch for Regex Searches</h2><p>按正则表达式查找时，使用 \v 模式开关  （开启字符的特殊含义）</p>
<p>我们可以使用 \v 模式(very magic search)开关规范所有的特殊符号, 启用之后, 除了下划线 _, 大小写字母, 和数字外, 所有的字符都具有特殊含义。</p>
<h2 id="Tip-74-Use-the-V-Literal-Switch-for-Verbatim-Searches"><a href="#Tip-74-Use-the-V-Literal-Switch-for-Verbatim-Searches" class="headerlink" title="Tip 74 Use the \V Literal Switch for Verbatim Searches"></a>Tip 74 Use the \V Literal Switch for Verbatim Searches</h2><p>按原义查找文本时，使用 \V 原义开关  (开启字符的特殊含义)</p>
<p>在正则表达式中使用的特殊字符，在按模式查找时用起来很顺手，但如果我们想</p>
<p>按原义查找文本时，它们就变成了阻碍。使用 very nomagic 原义开关，可以消除附</p>
<p>加在 .、 * 以及 ? 等大多数字符上的特殊含义。</p>
<p><strong>使用原义开关 \V，即可激活 very nomagic 搜索模式</strong></p>
<p>例如：搜索匹配“a.k.a.”字符串</p>
<p>/ \Va.k.a.</p>
<p>我们也可以使用转义的方式来消除字符的特殊含义。例如：</p>
<p>/ a.k.a.</p>
<p><strong>使用 “\V” 会使得其后的模式中只有反斜杠有特殊的意义,显然更方便。</strong></p>
<h2 id="Tip-76-Stake-the-Boundaries-of-a-Ward"><a href="#Tip-76-Stake-the-Boundaries-of-a-Ward" class="headerlink" title="Tip 76 Stake the Boundaries of a Ward"></a>Tip 76 Stake the Boundaries of a Ward</h2><p>界定单词的边界</p>
<p>定义一个搜索模型时, 指定单词的开始和结束位置可能很有用, Vim 给我们提供了单词分隔的选项。</p>
<p>例如执行搜索 /the<CR> 的时候, 是会把 these they their 等单词一起搜索出来的。</p>
<p>如果我们想只搜索 the 完整的单词, 而不需要包含 the 片段的词, 那么我们需要指定 词的边界。</p>
<p>在 \v 模式下（开启字符特殊含义）, <strong>&lt; 和 &gt;</strong> 即代表词边界的符号. 所以我们可以使用 /\v<the><CR> 来达到我们的预期。</p>
<p>需要注意的是, 如果我们在 \v 模式下需要匹配 &lt;&gt; 字符, 那么就得加反斜杠来进行转义了。</p>
<h2 id="Tip-78-Escape-Problem-Characters"><a href="#Tip-78-Escape-Problem-Characters" class="headerlink" title="Tip 78 Escape Problem Characters"></a>Tip 78 Escape Problem Characters</h2><p>转义问题字符</p>
<p>在 /V 纯文本模式下可以很容易的来进行纯文本的搜索匹配, 因为绝大部分的字符(如:. + *等)的特殊含义都被禁用了, 但是仍然有极少字符仍然有特殊的含义。</p>
<p>这时要用 \ 进行转义。</p>
<p>正向搜索转义斜杠 ‘/ ’</p>
<p>正向搜索时, 斜杠 / 字符被解释为终止符, 所有在此字符之后的内容都会被忽略，替换模式下在 \ 字符后添加标志位。</p>
<p>在 \v 和 \V 模式下, 如果要匹配 / 字符, 那么需要进行转义。</p>
<p>反向搜索转义问号 ‘ ? ’</p>
<p>当使用反向搜索的时候, 问号 ? 就是搜索的终止符。如果要匹配 ？号，需要转义 ?</p>
<p>每次都转义反斜杠 ‘ \ ’</p>
<p>\ 是需要进行转义的. 通常情况下, 反斜杠 \ 之后的那个字符表示被转义的特殊含义. 所以要匹配反斜杠字符的话就需要加转义, 也就是: \</p>
<p>而且，不管正向还是反向搜索，要匹配 \ 都是需要转义的。</p>
<p>终止符( / 或 ? )</p>
<p>Vim 允许在搜索字段终止符后面追加某些标志来调整搜索命令的行为</p>
<p>例如 /vim/e<CR> 将把光标放到高亮匹配位置的最后而不是前面</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/08/vim/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vim可视化模式</title>
    <url>/2021/09/12/vim/vim%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Visual-Mode"><a href="#Visual-Mode" class="headerlink" title="Visual Mode"></a>Visual Mode</h1><p>可视化模式</p>
<p>Vim 的可视模式允许我们选中一块文本区域并在其上进行操作，并具有 3 种不同的可视模式，分别用于操作字符文本、行文本或块文本。</p>
<p>可视化模式批量编辑或者纵向编辑模式时，可以极大的提高工作效率</p>
<h2 id="Tip-20-Grok-Visual-Mode"><a href="#Tip-20-Grok-Visual-Mode" class="headerlink" title="Tip 20 Grok Visual Mode"></a>Tip 20 Grok Visual Mode</h2><p>深入了解可视化模式</p>
<p><code>Select Mode 选择模式</code> </p>
<p>在一个典型的文本编辑器环境中，当选中一段文本后，再输入任意可见字符时，这些选中的文本将会被删除。Vim中的Select Mode类似于这样的模式。</p>
<p> 使用<code> &lt; C - g &gt;</code>，可以在可视化模式与选择模式中进行切换。不同点在于最后一行显示的是 <code>Visual</code> 以及 <code>Select</code>。</p>
<h2 id="Tip-21-Define-a-Visual-Selection"><a href="#Tip-21-Define-a-Visual-Selection" class="headerlink" title="Tip 21 Define a Visual Selection"></a>Tip 21 Define a Visual Selection</h2><p>定义高亮选区</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Effect</th>
</tr>
</thead>
<tbody><tr>
<td>v</td>
<td>激活面向字符的可视模式</td>
</tr>
<tr>
<td>V</td>
<td>激活面向行的可视模式</td>
</tr>
<tr>
<td>&lt; C - v &gt;</td>
<td>激活面向块的可视模式</td>
</tr>
<tr>
<td>gv</td>
<td>重选上次的高亮选区</td>
</tr>
<tr>
<td>o</td>
<td>切换高亮选区的活动端</td>
</tr>
</tbody></table>
<h2 id="Tip-22-Repeat-Line-wise-Visual-Command"><a href="#Tip-22-Repeat-Line-wise-Visual-Command" class="headerlink" title="Tip 22 Repeat Line-wise Visual Command"></a>Tip 22 Repeat Line-wise Visual Command</h2><p>重复执行面向行的可视化命令</p>
<p>还是<code> .</code>命令，甚至不需要进行<code>gv</code>命令重选上次的高亮选区</p>
<h2 id="Tip-23-Prefer-Operation-to-Visual-Command-Where-Possible"><a href="#Tip-23-Prefer-Operation-to-Visual-Command-Where-Possible" class="headerlink" title="Tip 23 Prefer Operation to Visual Command Where Possible"></a>Tip 23 Prefer Operation to Visual Command Where Possible</h2><p>只要可能，最好用操作符命令，而不是可视命令</p>
<p>可视模式可能比 Vim 的普通模式操作起来更自然一些，但是它有一个缺点：</p>
<ul>
<li>在这个模式下 . 命令有时会有一些异常的表现。 </li>
</ul>
<p>我们可以用普通模式下的操作符命令来规避此缺点。</p>
<h2 id="Tip-24-Edit-Tabular-Data-with-Visual-Block-Mode"><a href="#Tip-24-Edit-Tabular-Data-with-Visual-Block-Mode" class="headerlink" title="Tip 24 Edit Tabular Data with Visual-Block Mode"></a>Tip 24 Edit Tabular Data with Visual-Block Mode</h2><p>用面向列块的可视化模式编辑表格数据</p>
<p>以在列间增加分隔竖线 为例：</p>
<p><img src="vim%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A8%A1%E5%BC%8F_01.JPG" alt="img"></p>
<h2 id="Tip-25-Change-Columns-of-Text"><a href="#Tip-25-Change-Columns-of-Text" class="headerlink" title="Tip 25 Change Columns of Text"></a>Tip 25 Change Columns of Text</h2><p>修改列文本</p>
<p>用列块可视模式可以同时往若干行中插入文本。列块可视模式不仅仅对表格数据有用，在编程时我们也时常受惠于此功能。  </p>
<p><strong>使用<code> &lt; C – v &gt;</code> 模式选中块，可同时修改多行中同一列的数据。</strong></p>
<h2 id="Tip-26-Append-After-a-Ragged-Visual-Block"><a href="#Tip-26-Append-After-a-Ragged-Visual-Block" class="headerlink" title="Tip 26 Append After a Ragged Visual Block"></a>Tip 26 Append After a Ragged Visual Block</h2><p>在<strong>长短不一</strong>的高亮块后添加文本。</p>
<p>以在块可视化模式中为多行添加分号为例：</p>
<p><img src="vim%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A8%A1%E5%BC%8F_02.JPG" alt="img"></p>
<p>处于插入模式期间，任何输入的内容只出现在顶行，然而一旦返回到普通模式，这些修改就会被扩散到其余选中的行上。</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim命令行模式</title>
    <url>/2021/09/12/vim/vim%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Command-Line-Mode"><a href="#Command-Line-Mode" class="headerlink" title="Command-Line Mode"></a>Command-Line Mode</h1><p>命令行模式</p>
<p>Vim 的先祖是 vi，正是 vi 开创了区分模式编辑的范例。而 vi 则奉一个名为 ex的行编辑器为先祖，这就是为什么称在命令行模式输入为<code>Ex</code>命令。</p>
<h2 id="Tip-27-Meet-Command-Line-Mode"><a href="#Tip-27-Meet-Command-Line-Mode" class="headerlink" title="Tip 27 Meet Command-Line Mode"></a>Tip 27 Meet Command-Line Mode</h2><p>结识命令行模式</p>
<p>命令行模式会提示我们输入</p>
<ol>
<li>一条 <code>Ex</code> 命令</li>
<li>一个查找模式</li>
<li>一个表达式。</li>
</ol>
<p>按下<code> ：</code>键进入命令行模式，输入一条命令按<code>&lt; CR &gt;</code>执行它。</p>
<p>常用Ex命令: 读写文件<code> :edit 和 :write</code>，创建新标签页<code>:tabnew</code>及分割窗口<code> :split</code>， 或是操作参数列表<code>:prev/:next</code>及缓冲区列表<code> :bprev/:bnext</code>。事实上， Vim 为几乎所有功能都提供了相应的 Ex 命令。</p>
<p>操作缓冲区文本的 Ex 命令</p>
<table>
<thead>
<tr>
<th><strong>Command</strong></th>
<th><strong>Effect</strong></th>
</tr>
</thead>
<tbody><tr>
<td>:[range]delete [x]</td>
<td>行区间删除 [内容存入寄存器 x]</td>
</tr>
<tr>
<td>:[range]yank [x]</td>
<td>行区间拷贝 [内容存入寄存器 x]</td>
</tr>
<tr>
<td>:[line]put [x]</td>
<td>指定行追加寄存器 x 的内容</td>
</tr>
<tr>
<td>:[range]copy {address}</td>
<td>行区间拷贝后并张贴到指定的位置</td>
</tr>
<tr>
<td>:[range]move {address}</td>
<td>行区间移动到指定的位置</td>
</tr>
<tr>
<td>:[range]join</td>
<td>合并行，连接指定范围内的行</td>
</tr>
<tr>
<td>:[range]normal  {commands}</td>
<td>区间内执行常规模式的命令</td>
</tr>
<tr>
<td>:[range]substitute/{pattern}/{string}/[flags]</td>
<td>区间内按匹配的替换</td>
</tr>
<tr>
<td>:[range]global/{pattern}/[cmd]</td>
<td>区间内匹配的行里执行 Ex 命令: cmd</td>
</tr>
</tbody></table>
<p>在命令行模式中，文本出现在命令行上。命令行模式中也可以用组合键触发命令。</p>
<p>有些命令在插入模式和命令行模式中通用。例如，可以用<code>&lt;C-w&gt;</code>和 <code>&lt;C-u&gt;</code>分别删除至上个单词的开头及行首，也可以用 <code>&lt;C-v&gt;</code> 或<code>&lt;C-k&gt;</code>来插入键盘上找不到的字符，还可以用 <code>&lt;C-r&gt;&#123;register&#125; </code>命令把任意寄存器的内容插入到命令行。</p>
<h2 id="Tip-28-Execute-a-Command-on-One-or-More-Consececutive-Lines"><a href="#Tip-28-Execute-a-Command-on-One-or-More-Consececutive-Lines" class="headerlink" title="Tip 28 Execute a Command on One or More Consececutive Lines"></a>Tip 28 Execute a Command on One or More Consececutive Lines</h2><p>在一行或多行上执行Ex命令</p>
<p>很多<code>Ex</code>命令可以用 <strong>[range]</strong> 指定要操作的范围。我们可以用<strong>行号、位置标记或是查找模式</strong>来指定范围的开始位置及结束位置。</p>
<p><code>Ex </code>命令的优点之一是它们可以在某一范围内的所有行上执行。</p>
<p>通常，一个范围具有如下的形式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">：&#123; start &#125; , &#123; end &#125;</span><br></pre></td></tr></table></figure>

<p>定义范围的语法非常灵活，既可以混合搭配行号、位置标记以及查找模式，也可以对它们加以偏移。</p>
<p>偏移地址的一半形式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">：&#123; address &#125; + n</span><br></pre></td></tr></table></figure>

<p>如果n被省略，那么缺省的偏移量为1。例如：</p>
<table>
<thead>
<tr>
<th>.p</th>
<th>p : print ( 打印简写 )  ，打印当前行</th>
</tr>
</thead>
<tbody><tr>
<td>.+p</td>
<td>打印当前行的下一行</td>
</tr>
</tbody></table>
<p> 特殊符号</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>文件第一行</td>
</tr>
<tr>
<td>$</td>
<td>文件最后一行</td>
</tr>
<tr>
<td>0</td>
<td>虚拟行，文件第0行，位于第一行上方</td>
</tr>
<tr>
<td>.</td>
<td>文件当前行</td>
</tr>
<tr>
<td>‘m</td>
<td>包含位置标记m的行</td>
</tr>
<tr>
<td>‘&lt;</td>
<td>高亮选区的起始行</td>
</tr>
<tr>
<td>‘&gt;</td>
<td>高亮选区的结束行</td>
</tr>
<tr>
<td>%</td>
<td>当前文件中的所有行，相当于 : 1 , $</td>
</tr>
</tbody></table>
<h2 id="Tip-29-Duplicate-or-Move-Lines-Using-‘-t’-and-‘-m’-Commands"><a href="#Tip-29-Duplicate-or-Move-Lines-Using-‘-t’-and-‘-m’-Commands" class="headerlink" title="Tip 29 Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands"></a>Tip 29 Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands</h2><p>使用 <code>:t </code>和<code> :m</code> 命令来复制或移动行</p>
<p><code>:copy </code>命令（及其简写形式<code> :co</code> 以及<code> :t</code>）让我们可以把一行或多行从文档的一部分复制到另一部分。</p>
<p>而<code>:move</code>（简写形式<code> :m</code>）命令则可以让我们把文档移动到其他地方。</p>
<p>为了更好地记忆，可以把<code>：t</code>命令想成“复制到<code> copy TO</code>。</p>
<p>下表展示了<code>:t </code>命令的一些应用实例：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:6t.</td>
<td>把第6行复制到当前行下方</td>
</tr>
<tr>
<td>:t6</td>
<td>把当前行复制到第6行下方</td>
</tr>
<tr>
<td>:t.</td>
<td>为当前行创建一个副本，类似于普通模式下 yyp</td>
</tr>
<tr>
<td>:t$</td>
<td>把当前行复制到文件末尾</td>
</tr>
<tr>
<td>:’&lt;,’&gt;t0</td>
<td>把高亮选中的行复制到文件开头</td>
</tr>
</tbody></table>
<p><strong><code>:t. </code>与 <code>yyp</code> 的区别：<code>yyp</code>会使用寄存器，而 <code>:t. </code>不会</strong></p>
<p>在复制距离较远的行时，<code>:t</code>命令通常更加高效。</p>
<p><code>:move </code>命令看上去和<code>:copy </code>命令很相似，只是他是移动文本。</p>
<p>重复上次的<code> Ex</code> 命令非常简单，只需按 <code>@:</code> 即可</p>
<h2 id="Tip-30-Run-Normal-Mode-Command-Across-a-Range"><a href="#Tip-30-Run-Normal-Mode-Command-Across-a-Range" class="headerlink" title="Tip 30 Run Normal Mode Command Across a Range"></a>Tip 30 Run Normal Mode Command Across a Range</h2><p>在指定范围上执行普通模式命令</p>
<p>如果想在一系列连续行上执行一条普通模式命令，我们可以用 <code>:normal </code>命令。此命令在与<code> .</code> 命令或宏结合使用时，我们只需花费很少的努力就能完成大量重复性任务。</p>
<p>语法如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:[range]normal &#123;commands&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Tip-31-Repeat-the-Last-Ex-Command"><a href="#Tip-31-Repeat-the-Last-Ex-Command" class="headerlink" title="Tip 31 Repeat the Last Ex Command"></a>Tip 31 Repeat the Last Ex Command</h2><p>重复上一次<code>Ex</code>命令</p>
<p><code>.</code>命令可重复上次的修改。但是，<code>.</code>命令不会重复由 <strong>Vim 命令行</strong>中做出的修改。 </p>
<p>作为替代， 我们可以用 <code>@:</code> 来重复上次的 <code>Ex </code>命令</p>
<h2 id="Tip-32-Tab-Complete-Your-Ex-Commands"><a href="#Tip-32-Tab-Complete-Your-Ex-Commands" class="headerlink" title="Tip 32 Tab-Complete Your Ex Commands"></a>Tip 32 Tab-Complete Your Ex Commands</h2><p><code>Tab </code>自动补全Ex命令</p>
<p>如同在 shell 中一样，在命令行上也可以用<code>&lt;Tab&gt;</code>键自动补全命令。</p>
<p>Vim 在选取Tab 补全的补全项时非常智能，它会检查命令行上已经输入的上下文，然后再构建合适的补全列表。例如，可以这样输入：</p>
<p><img src="NO1.JPG" alt="img"></p>
<p><code>&lt;C-d&gt;</code> 命令会让 Vim 显示可用的补全列表，我们多次按<code>&lt;Tab&gt;</code>键的话，命令行上会依次显示 colder、 colorscheme，然后再回到最初的 col，如此循环往复。要想反向遍历补全列表，可以按 <code>&lt;S-Tab&gt;</code>。</p>
<p>假设我们想改配色方案，但是不太记得要用的配色方案的名称，这时可以用<code>&lt;C-d&gt;</code> 命令列出所有的可用选项。</p>
<p>不过在neovim中貌似以及封装好了</p>
<h2 id="Tip-33-Insert-the-Current-Word-at-the-Command-Prompt"><a href="#Tip-33-Insert-the-Current-Word-at-the-Command-Prompt" class="headerlink" title="Tip 33 Insert the Current Word at the Command Prompt"></a>Tip 33 Insert the Current Word at the Command Prompt</h2><p>将当前单词插入命令行</p>
<p>即使是在命令行模式下， Vim 也始终知道光标位于何处以及哪个分割窗口处于活动状态。为节省时间，我们可以把活动窗口中的当前单词（或字串）插入到命令行中。</p>
<p> 在 Vim 的命令行下，<code> &lt;C-r&gt;&lt;C-w&gt; (word)</code>映射项会复制光标下的<strong>单词</strong>并把它插入到命令行中。我们可以利用这一功能减少击键的次数。</p>
<p>而<code>&lt;C-r&gt;&lt;C-a&gt;(WORD)</code>把当前<strong>字串</strong>插入到命令行</p>
<h2 id="Tip-34-Recall-Commands-from-history"><a href="#Tip-34-Recall-Commands-from-history" class="headerlink" title="Tip 34 Recall Commands from history"></a>Tip 34 Recall Commands from history</h2><p>回溯历史命令</p>
<p>我们先按<code>:</code>键切换到命令行模式，在保持提示符为空的情况下按<code>&lt;Up&gt;</code>键，此时最后执行的那条<code>Ex</code>命令就会被填充到命令行上。再接着按 <code>&lt;Up&gt;</code> 键的话，就可以回到更早的<code> Ex</code> 历史命令；按 <code>&lt;Down&gt; </code>键的话，则会沿相反方向滚动。上下方向键也是可以。</p>
<p>结识命令行窗口</p>
<p>在命令行模式下按 <code>&lt;Ctrl-f&gt; </code>从命令行模式切换到命令行窗口。</p>
<p>​    Vim 会打开一个新的窗口，当命令行窗口处于打开状态时，它会始终拥有焦点。这意味着，除非关闭命令行窗口，否则我们无法切换到其他窗口。要想关闭命令行窗口，我们可以执行<code> :q</code> 命令（就像关闭普通 Vim 窗口那样），或是按<code> &lt;CR&gt;</code>。</p>
<p>下表总结了打开命令行窗口的几种方式</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>动作</th>
</tr>
</thead>
<tbody><tr>
<td>q/</td>
<td>打开查找命令历史的命令行窗口（注意是查找命令）</td>
</tr>
<tr>
<td>q:</td>
<td>打开Ex命令历史的命令行窗口</td>
</tr>
<tr>
<td>&lt; C - f &gt;</td>
<td>从命令行模式切换到命令行窗口</td>
</tr>
</tbody></table>
<p><code>q:</code> 命令和<code> :q</code> 命令很容易被搞混。</p>
<h2 id="Tip-35-Run-Command-in-the-shell"><a href="#Tip-35-Run-Command-in-the-shell" class="headerlink" title="Tip 35 Run Command in the shell"></a>Tip 35 Run Command in the shell</h2><p>运行shell命令</p>
<p>在 Vim 的命令行模式中，给命令加一个叹号<code>! </code>前缀就可以调用外部程序。</p>
<p>注意区分<code>:!ls</code>和<code>:ls</code>的不同之处。前者调用的是 shell 中的 ls 命令，而<code> :ls</code>调用的是 Vim 的内置命令，用来显示缓冲区列表的内容。</p>
<p><code>   :!&#123;cmd&#125;</code>这种语法适用于执行一次性命令，而<code>:shell</code>命令会启动一个交互的 shell 会话，可在 shell 中执行数条命令，用 <code>exit</code> 命令可以退出此 shell 并返回 Vim界面。</p>
<p> Vim挂起，即Vim 后台执行: 此方式比 <code>:shell </code>方式要方便一点。<code>&lt;C-z&gt; </code>会把 vim 挂起, 然后切换到终端。</p>
<p>在 Vim 中操作时，我们能很方便地调用 shell 命令  。</p>
<ul>
<li><code>:shell</code> 启动一个 shell (输入 exit 返回 Vim)  </li>
<li><code>:!&#123;cmd&#125;</code> 在 shell 中执行 {cmd}  </li>
</ul>
<p>使用缓冲区的内容进行标准输入或输出:</p>
<ul>
<li><p><code>:read !&#123;cmd&#125;</code> - 把 <em>cmd</em> 执行的结果(标准输出)写入当前文件(缓冲区) 如: :read !ls</p>
</li>
<li><p><code>:write !&#123;cmd&#125;</code> - 和上面相反, 把当前文件(缓冲区)内容当做标准输入传给了 <em>cmd</em> 命令 </p>
</li>
</ul>
<p>! 符号的位置不同有不同的含义:</p>
<ul>
<li><p><code>:[range]write ! sh</code> - 把缓冲区当做标准输入传给了 <em>sh</em> 命令</p>
</li>
<li><p><code>:[range]write! filename</code> - 表示把 <em>filename</em> 内容强制覆盖掉; 相当于内容另存为一个文件   </p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim在文件中跳转</title>
    <url>/2021/09/12/vim/vim%E5%9C%A8%E6%96%87%E4%BB%B6%E4%B8%AD%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="在文件中跳转"><a href="#在文件中跳转" class="headerlink" title="在文件中跳转"></a>在文件中跳转</h1><h2 id="Tip-55-Traverse-the-Jump-List"><a href="#Tip-55-Traverse-the-Jump-List" class="headerlink" title="Tip 55 Traverse the Jump List"></a>Tip 55 Traverse the Jump List</h2><p>遍历跳转列表</p>
<p>Vim 在跳转之前和之后记录我们的位置，并提供一些命令来回溯我们的步骤，类似于Web浏览器中的前进和后退。对vim来说：</p>
<ul>
<li><p>&lt; C - o &gt; - 后退, 跳转到上一个位置</p>
</li>
<li><p>&lt; C - i &gt; - 前进, 后退之后就可以往前了</p>
</li>
</ul>
<p><code>:jumps</code>命令可以查看跳转列表，效果类似于<code> :ls</code></p>
<blockquote>
<p>跳转位置的定义：Any command that changes the active file for the current window can be described as a jump.</p>
</blockquote>
<p>任何更改当前窗口的活动文件的命令都可以描述为跳转。Vim 会把执行跳转命令之前和之后的光标位置，记录到跳转列表中。例如：</p>
<p>如果我们运行<code>:edit</code>命令打开了一个新文件，那么就可以用 <code>&lt;C-o&gt; 和 &lt;C-i&gt; </code>命令在这个新文件以及原本的文件之间来回跳转。</p>
<p>用<code>[count]G</code>命令直接跳到指定的行号也会被当成一次跳转，但每次向上或向下移动一行则不算。面向句子的动作及面向段落的动作都算跳转，但面向字符及面向单词的动作则不算。用一句话来概括，<strong>我们可以说大范围的动作命令可能会被当成跳转，但小范围的动作命令则只能算移动。</strong></p>
<p>下表节选了一些跳转动作：</p>
<table>
<thead>
<tr>
<th>[count]G</th>
<th>行跳转</th>
</tr>
</thead>
<tbody><tr>
<td>/pattern<CR> 或  ?pattern<Cr></td>
<td>跳转到 下一个/上一个 匹配的 <em>pattern</em> 位置</td>
</tr>
<tr>
<td>n / N</td>
<td>同上</td>
</tr>
<tr>
<td>%</td>
<td>跳转到 配对的括号位置 <em>()</em> <em>[]</em> <em>{}</em> <em>&lt;&gt;</em></td>
</tr>
<tr>
<td>( / )</td>
<td>跳转到 前/后 一句内容</td>
</tr>
<tr>
<td>{ / }</td>
<td>跳转到 前/后 一段内容</td>
</tr>
<tr>
<td>H / M / L</td>
<td>跳转到 上/中/下 屏幕</td>
</tr>
<tr>
<td>gf</td>
<td>跳转到 光标处的文件</td>
</tr>
<tr>
<td>&lt;C-]&gt;</td>
<td>跳转到 光标处关键词定义的地方</td>
</tr>
<tr>
<td>`{mark} / ‘{mark}</td>
<td>跳转到 标记 / 标记非空白行首 位置</td>
</tr>
</tbody></table>
<p><C-o> 和 <C-i> 命令本身不会被当成动作命令。也就是说，我们既不能用它们扩大可视模式的选区，也不能在操作符待决模式中使用它们。</p>
<p>​    Vim 可以同时维护多份跳转列表。实际上，<strong>每个单独的窗口都拥有一份自己的跳转列表</strong>。如果你正在使用分割窗口或多标签页，那么 <C-o> 和 <C-i> 命令会<strong>始终在当前活动窗口的跳转列表范围内进行跳转</strong>。</p>
<p>注意：试着在插入模式中按一下 &lt; C- i &gt;，你会发现这和按 <Tab> 键的效果是一样的，</p>
<p>因为 Vim 本来就把 <C-i> 和 <Tab> 当成同一个东西。如果重新映射 <Tab> 键的话，那么也应该意识到，当你按下 <C-i> 时，该映射项也会被触发（反之亦然）。跳转的缺省行为将会被改变，只能单向遍历。</p>
<h2 id="Tip-56-Traverse-the-Change-List"><a href="#Tip-56-Traverse-the-Change-List" class="headerlink" title="Tip 56 Traverse the Change List"></a>Tip 56 Traverse the Change List</h2><p>遍历改变列表</p>
<p>每当对文档做出修改后， Vim 都会记录当时光标所在的位置。遍历改变列表的方法很简单，并且这大概是跳到你要去的地方的最快方式。</p>
<p>撤销/重做 命令：</p>
<ul>
<li><p>u - 撤销变更 （相当于 win &lt;C - z&gt;）</p>
</li>
<li><p><C-r> - 撤销之前的撤销  （相当于 win &lt;C - y&gt;）</p>
</li>
</ul>
<p>Vim 会在编辑会话期间维护一张表，里面记载我们对每个缓冲区所做的修改，此表就是所谓的改变列表，使用 <code>:change </code>命令可以查看其内容。</p>
<p>Vim 为每次修改都记录了行号与列号，我们可以用<code> g; 和 g,</code>命令反向或正向遍历改变列表。可以拿<code>; 和 ,</code>命令当参考，来帮你记忆 g; 与 g, 命令。前两条命令分别用来正向及反向重复 f{char} 命令，加上<strong>g前缀</strong>。</p>
<p>标识上次修改方位的位置标记，Vim 会自动创建一些位置标记，它们是对改变列表的一个有用补充。</p>
<ul>
<li><p>`. 标记总是指向上次修改的位置</p>
</li>
<li><p><strong>`^ 标记则会指向上次退出插入模式时光标所在的位置  ( gi 命令)</strong></p>
</li>
</ul>
<p>Vim 会为编辑会话中的每个单独缓冲区维护一个改变列表，而与之不同的是，每个窗口都会创建一个单独的跳转列表。</p>
<p>在大多数场景下，跳转到 `` . <code>的效果与使用</code> g; <code>命令相同。不过位置标记只指向最后修改的位置，而改变列表中则保存了多组位置。我们可以多次按 g; 命令，每次它都会把我们带到改变列表中较早的一个位置，而 </code> . 则总是把我们带到改变列表的最后一项。</p>
<p>​    ``^ <code>标记指向上次插入的位置，它比上次修改的位置更具体一点。如果我们先退出插入模式，接着又在文档中四处移动，然后，当我们又想快速回到退出的地方继续编辑时，用 **gi （g前缀 i插入**）命令就行了。此命令会用 </code>^ 标记恢复光标位置，并切换到插入模式，这真是省时省力的好办法！</p>
<h2 id="Tip-57-Jump-to-the-Filename-Under-the-Cursor"><a href="#Tip-57-Jump-to-the-Filename-Under-the-Cursor" class="headerlink" title="Tip 57 Jump to the Filename Under the Cursor"></a>Tip 57 Jump to the Filename Under the Cursor</h2><p> 跳转到光标下的文件</p>
<p>Vim 将文档中的文件名视为一种超链接。如果配置正确, 我们可以使用 <code>gf</code> 命令转到光标下的文件名。</p>
<p>指定文件的扩展名</p>
<p>​    <code>suffixesadd</code> 选项允许我们指定一个或多个文件扩展名，当 Vim 用 <code>gf </code>命令搜寻文件名时，会尝试使用这些扩展名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set suffixesadd+=.rb      //添加.rb的文件扩展名</span><br></pre></td></tr></table></figure>

<p>每次用 gf 命令时， Vim 都会在跳转列表中增添一条记录，因此我们总是可以用**<C-o> 命令返回原处**。</p>
<p>指定要搜寻的目录</p>
<p>​    引用的文件不位于工作目录的相对路径中，要引用第三方库的时候，需添加路径<code>path</code>。我们可以把它配置成一个以逗号分隔的目录列表。 当使用 <code>gf </code>命令时， Vim 会检查<code>path</code>列表中的每一个目录，看看该目录中是否包含一个匹配光标下文本的文件名。<code>path</code>设置也会作用域 <code>:find </code>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set path+=app/**   //添加路径</span><br><span class="line"></span><br><span class="line">:set path?            //查看路径</span><br><span class="line"></span><br><span class="line">❮ path=.,/usr/include, ,</span><br><span class="line"></span><br><span class="line">. : 表示 当前文件所在目录</span><br><span class="line"></span><br><span class="line">/usr/include : 这个很明显了</span><br><span class="line"></span><br><span class="line">空 : 两个 , , 中间的空 就表示当前工作目录 （注意，一个文件所在，一个当前工作）</span><br></pre></td></tr></table></figure>


<h2 id="Tip-58-Snap-Between-Files-Using-Global-Marks"><a href="#Tip-58-Snap-Between-Files-Using-Global-Marks" class="headerlink" title="Tip 58 Snap Between Files Using Global Marks"></a>Tip 58 Snap Between Files Using Global Marks</h2><p>用全局位置标记在文件间快速跳转</p>
<p><strong>标记语法 m{letter}</strong></p>
<ul>
<li>m[a-z] - 小写字母的, 创建一个可以在当前文件(缓冲区)进行跳转的标签</li>
<li>m[A-Z] - 大写字母的, 创建一个可以全局的标签, 可以在多个文件之前跳转</li>
</ul>
<p><strong>跳转语法 `{letter}</strong> </p>
<p><strong>编码之前设置全局标记，全局标记在多个文件切换时非常有用。</strong></p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim插入模式</title>
    <url>/2021/09/12/vim/vim%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Tip13-Make-Corrections-Instantly-from-Insert-Mode"><a href="#Tip13-Make-Corrections-Instantly-from-Insert-Mode" class="headerlink" title="Tip13 Make Corrections Instantly from Insert Mode"></a>Tip13 Make Corrections Instantly from Insert Mode</h1><p>插入模式下进行更正</p>
<p>在插入模式下更正错误首先想到退格键，它删除光标前的字符。另外还有使用以下组合键：</p>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>&lt; C – h &gt;</td>
<td>删除前一个字符（同退格键）</td>
</tr>
<tr>
<td>&lt; C - w &gt;</td>
<td>删除前一个单词</td>
</tr>
<tr>
<td>&lt; C - u &gt;</td>
<td>删至行首</td>
</tr>
</tbody></table>
<p>​    注：这些快捷键不是插入模式独有的，甚至不是vim独有的，在vim命令行模式，以及<code>bash shell , cmd, powershell </code>中也可以使用他们。</p>
<h1 id="Tip14-Get-Back-to-Normal-Mode"><a href="#Tip14-Get-Back-to-Normal-Mode" class="headerlink" title="Tip14 Get Back to Normal Mode"></a>Tip14 Get Back to Normal Mode</h1><p>返回普通模式</p>
<p>插入模式只专注于一件事，就是<strong>输入文字</strong>。<strong>普通模式才是我们大部分时间所用的模式</strong>。</p>
<p>切换会普通模式的经典方式是 <code>&lt;Esc&gt; </code>键，我们也可以用<code>&lt; C – [ &gt;</code>替代，效果完全一样。</p>
<table>
<thead>
<tr>
<th>按键操作</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>&lt; Esc &gt;</td>
<td>切换回普通模式</td>
</tr>
<tr>
<td>&lt; C – [ &gt;</td>
<td>切换回普通模式</td>
</tr>
<tr>
<td>&lt; C - o &gt;</td>
<td>切换至插入  - 普通模式</td>
</tr>
</tbody></table>
<p>插入 - 普通模式：普通模式的一个特例，它能让我们执行一次普通模式命令，执行完毕之后，马上有回到插入模式。</p>
<p>例：使用<code>zz</code>命令使光标重新位于屏幕中间。键入<code>&lt; C - o &gt; zz</code> ，在普通模式下触发命令，重绘屏幕，此操作完成后会直接回到插入模式，因此可以不中断打字。</p>
<h1 id="Tip15-Paste-from-a-Register-Without-Leaving-Insert-Mode"><a href="#Tip15-Paste-from-a-Register-Without-Leaving-Insert-Mode" class="headerlink" title="Tip15 Paste from a Register Without Leaving Insert Mode"></a>Tip15 Paste from a Register Without Leaving Insert Mode</h1><p>不离开插入模式，粘贴寄存器中的文本</p>
<table>
<thead>
<tr>
<th>Keystrokes</th>
<th>Buffer Contents</th>
</tr>
</thead>
<tbody><tr>
<td>yt,</td>
<td>Practical  Vim, by Drew Neil  Read Drew Neil’s</td>
</tr>
<tr>
<td>jA␣</td>
<td>Practical Vim, by Drew Neil  Read Drew Neil’s</td>
</tr>
<tr>
<td>&lt; C – r &gt;0</td>
<td>Practical Vim, by Drew Neil  Read Drew Neil’s Practical Vim</td>
</tr>
<tr>
<td>.<Esc></td>
<td>Practical Vim, by Drew Neil  Read Drew Neil’s Practical Vim.</td>
</tr>
</tbody></table>
<p>yt, - 光标到第一个 “,” 之间的文本放入寄存器</p>
<p>jA␣ - 光标移动到下一行, 然后定位到行末并切换为插入模式, 再输入一个空格</p>
<p><C-r>0 - 插入寄存器 0 里的内容, 即刚刚放到寄存器的内容 (:h i_CTRL-R)</p>
<p>.<Esc> - 句号结尾后退出插入模式 </p>
<h1 id="Tip-16-Do-Back-of-the-Envelope-Calculations-in-Place"><a href="#Tip-16-Do-Back-of-the-Envelope-Calculations-in-Place" class="headerlink" title="Tip 16 Do Back-of-the-Envelope Calculations in Place"></a>Tip 16 Do Back-of-the-Envelope Calculations in Place</h1><p>数学计算</p>
<table>
<thead>
<tr>
<th><strong>Keystrokes</strong></th>
<th><strong>Buffer   Contents</strong></th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>6 chairs, each  costing $35, totals $</td>
</tr>
<tr>
<td><C-r>=6*35<CR></td>
<td>6 chairs, each  costing $35, totals $210.</td>
</tr>
</tbody></table>
<h1 id="Tip-17-Insert-Unusual-Characters-by-Character-Code"><a href="#Tip-17-Insert-Unusual-Characters-by-Character-Code" class="headerlink" title="Tip 17 Insert Unusual Characters by Character Code"></a>Tip 17 Insert Unusual Characters by Character Code</h1><p>用字符编码插入非常用字符。插入一些无法通过键盘输入的字符（目前需求不大）</p>
<h1 id="Tip-18-Insert-Unusual-Characters-by-Digraph"><a href="#Tip-18-Insert-Unusual-Characters-by-Digraph" class="headerlink" title="Tip 18 Insert Unusual Characters by Digraph"></a>Tip 18 Insert Unusual Characters by Digraph</h1><p>用二合字母插入非常用字符。插入一些无法通过键盘输入的字符（目前需求不大）</p>
<h1 id="Tip-19-Overwrite-Existing-Text-with-Replace-Mode"><a href="#Tip-19-Overwrite-Existing-Text-with-Replace-Mode" class="headerlink" title="Tip 19 Overwrite Existing Text with Replace Mode"></a>Tip 19 Overwrite Existing Text with Replace Mode</h1><p>覆盖模式</p>
<p>普通模式下按 <code>R </code>即可开启覆盖模式;  <code>r / gr</code> 仅覆盖一个字符</p>
<p>用虚拟替换模式替换制表符:</p>
<p>一些字符使替换模式变得复杂化。以制表符为例，在文件中它以单个字符表示，但在屏幕上它却会占据若干列的宽度，此宽度由 ‘tabstop’ 设置决定。如果把光标移到制表符上，然后进入替换模式，那么我们所输入的下一个字符将会替换制表符。假设 ‘tabstop’ 选项设置为 8（这是缺省值），那么该操作的结果就是把 8 个字符替换成了一个字符，这将大幅缩短当前行的长度。</p>
<p>Vim 还有另外一种替换模式，称为<strong>虚拟替换模式（Virtual Replace mode）</strong>。该模式可由 <code>gR 命令触发</code>，它会把制表符当成一组空格进行处理。假设我们把光标移到一个占屏幕 8 列宽的制表符上，然后切换到虚拟替换模式，在输入前 7 个字符时，每个字符都会被插入到制表符之前；最后，当输入了第 8 个字符时，该字符将会替换制表符。</p>
<p>在虚拟替换模式中，我们是按屏幕上实际显示的宽度来替换字符的，而不是按文件中所保存的字符进行替换。这会减少意外情况的发生，因此建议在可能的情况下尽量使用虚拟替换模式。</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim替换</title>
    <url>/2021/09/12/vim/vim%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><h2 id="Tip-87-Meet-the-Substitute-Command"><a href="#Tip-87-Meet-the-Substitute-Command" class="headerlink" title="Tip 87 Meet the Substitute Command"></a>Tip 87 Meet the Substitute Command</h2><p>结识替换命令，<code>:substitute </code>命令。其允许我们查找和替换一个文本块，语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]</span><br></pre></td></tr></table></figure>

<p>​    命令很复杂.，除了要提供搜索模式和替换文本之外, 还需要指定执行的范围。另外, 还可以提供额外的标识符来调整其行为。</p>
<p><code>[range]</code> 的使用和其他 Ex 命令一样，以逗号分隔</p>
<p><code>&#123;pattern&#125; </code>指代要查找的部分</p>
<p><strong>Flags，标志位调整替换行为</strong></p>
<p>几种常用的 flag 标志符:</p>
<ul>
<li><p>g - 让替换命令应用到全局,可修改一行内的匹配项， 而不是仅改变第一个匹配项. </p>
</li>
<li><p>c -替换前手工确认或拒绝每一处修改, </p>
</li>
<li><p>n - 禁止替换行为, 此功能可用于统计匹配文本的数量 </p>
</li>
<li><p>e - 忽略错误信息. 例如搜索没有匹配项时, 替换命令会提示一个错误信息 “E486: Pattern not found.”</p>
</li>
<li><p>&amp; - 告知 Vim 重用上一次替换命令中的相同标志. </p>
</li>
</ul>
<p><strong>替换域中的特殊字符</strong></p>
<p>查找模式时某些字符是有特殊意义的. 而替换字段也是有一些特殊字符的</p>
<table>
<thead>
<tr>
<th><strong>Symbol</strong></th>
<th><strong>Represents</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\r</td>
<td>插入回车(而不是\n)</td>
</tr>
<tr>
<td>\t</td>
<td>插入 tab 键</td>
</tr>
<tr>
<td>\</td>
<td>插入反斜杠 \</td>
</tr>
<tr>
<td>\1</td>
<td>插入第一个子匹配</td>
</tr>
<tr>
<td>\2</td>
<td>插入第二个只匹配 (依次到 \9)</td>
</tr>
<tr>
<td>\0</td>
<td>插入整个匹配的文本</td>
</tr>
<tr>
<td>&amp;</td>
<td>插入整个匹配的文本</td>
</tr>
<tr>
<td>~</td>
<td>使用上次的 {string} 替换文本</td>
</tr>
<tr>
<td>={Vim  script}</td>
<td>执行 {Vim脚本} 表达式, 把结果结果作为 {string} 替换文本</td>
</tr>
</tbody></table>
<h2 id="Tip-88-Find-and-Replace-Every-Match-in-a-File"><a href="#Tip-88-Find-and-Replace-Every-Match-in-a-File" class="headerlink" title="Tip 88 Find and Replace Every Match in a File"></a>Tip 88 Find and Replace Every Match in a File</h2><p>在文件范围内查找并替换每一处匹配</p>
<ul>
<li><p>标志位 g 处理横轴字符，当前行所有匹配</p>
</li>
<li><p>地址符 % 处理纵轴的文本行，可理解为处理整个文件的匹配项</p>
</li>
</ul>
<p>语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s/content/copy/g</span><br></pre></td></tr></table></figure>



<h2 id="Tip-89-Eyeball-Each-Substitution"><a href="#Tip-89-Eyeball-Each-Substitution" class="headerlink" title="Tip 89 Eyeball Each Substitution"></a>Tip 89 Eyeball Each Substitution</h2><p>手动控制每一次替换操作</p>
<p>标志位 <code>c </code> 手工确认每一处修改</p>
<p>语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%s/content/copy/gc</span><br></pre></td></tr></table></figure>

<p>​    引入标志位 c 后，Vim 会在每处匹配体贴地为我们提示所有的选项<code>y/n/a/q/l/^E/^Y</code>。下表展示了每种答案的含义：</p>
<table>
<thead>
<tr>
<th><strong>Keystrokes</strong></th>
<th><strong>Buffer Contents</strong></th>
</tr>
</thead>
<tbody><tr>
<td>y</td>
<td><em>yes</em> 替换本次修改</td>
</tr>
<tr>
<td>n</td>
<td><em>no</em> 放弃本次修改</td>
</tr>
<tr>
<td>q</td>
<td><em>quit</em> 退出替换</td>
</tr>
<tr>
<td>l</td>
<td><em>last</em> 本次为最后一次替换, 然后退出</td>
</tr>
<tr>
<td>a</td>
<td><em>all</em> 替换本次和剩下的所有项</td>
</tr>
<tr>
<td><C-e></td>
<td>向上滚动屏幕</td>
</tr>
<tr>
<td><C-y></td>
<td>向下滚动屏幕</td>
</tr>
</tbody></table>
<p>不同于以往的是，在 Vim 的替换-确认模式下，键盘上的大多数按键都将失效。尽</p>
<p>管 <Esc> 键可以让我们像往常一样回到普通模式，但除此之外，周围的一切都使我们</p>
<p>感到陌生。</p>
<h2 id="Tip-90-Reuse-the-Last-Search-Pattern"><a href="#Tip-90-Reuse-the-Last-Search-Pattern" class="headerlink" title="Tip 90 Reuse the Last Search Pattern"></a>Tip 90 Reuse the Last Search Pattern</h2><p>重用上次的查找模式</p>
<p>如果你觉得将来会以完整形式来调用历史记录中的 substitute 命令， 就要养成在查</p>
<p>找域中填充内容的习惯。你只需在命令行中输入 <code>&lt;C-r&gt;/</code>，即可把上次的查找内容粘贴进来。</p>
<p>即留空查找域，使用<code>&lt;C-r&gt;/</code>替代</p>
<h2 id="Tip-91-Replace-with-the-Contents-of-a-Register"><a href="#Tip-91-Replace-with-the-Contents-of-a-Register" class="headerlink" title="Tip 91 Replace with the Contents of a Register"></a>Tip 91 Replace with the Contents of a Register</h2><p>用寄存器的内容替换</p>
<p>通过输入<code> &lt;C-r&gt;&#123;register&#125;</code>， 我们可以将寄存器的内容插入到命令行</p>
<h2 id="Tip-92-Repeat-the-Previous-Substitute-Command"><a href="#Tip-92-Repeat-the-Previous-Substitute-Command" class="headerlink" title="Tip 92 Repeat the Previous Substitute Command"></a>Tip 92 Repeat the Previous Substitute Command</h2><p>重复上一次 substitute 命令</p>
<p>假设我们刚刚执行完以下命令（其作用范围为当前行）:s/target/replacement/g</p>
<p>但我们失误，应该加上前缀 % 才对，接下来，我们只需输入 g&amp;，即可在整个文件的范围内重复这条命令。</p>
<p>某条 substitute 命令除了没加 % 前缀之外，其余都正确的时候，不妨试一试 g&amp;</p>
<p>​    gv 命令会激活可视模式，并重新将上次被选中的文本高亮起来（详情参考Tip 21 ）进入命令行模式，此时命令行会提示为 :’&lt;,’&gt; 键入 &amp;&amp;, 第一个 :&amp; 组合为 Ex 命令, 功能为重复最后一次替(:substitute)换命令(参考 :h :&amp;), 而第二个 &amp; 则表示使用前一个替换命令的标志符。</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim查找</title>
    <url>/2021/09/12/vim/vim%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="Tip-79-Meet-the-Search-Command"><a href="#Tip-79-Meet-the-Search-Command" class="headerlink" title="Tip 79 Meet the Search Command"></a>Tip 79 Meet the Search Command</h2><p>结识查找命令</p>
<table>
<thead>
<tr>
<th><strong>Command</strong></th>
<th><strong>Effect</strong></th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>向后搜索</td>
</tr>
<tr>
<td>?</td>
<td>向前搜索</td>
</tr>
<tr>
<td>n</td>
<td>跳转到下一个匹配位置(<em>next match</em>), 保持搜索方向和偏移</td>
</tr>
<tr>
<td>N</td>
<td>调整到上一个匹配位置, 保持搜索方向和偏移</td>
</tr>
<tr>
<td>/<CR></td>
<td>搜索模式不变, 向后跳转到下一个匹配位置</td>
</tr>
<tr>
<td>?<CR></td>
<td>搜索模式不变, 向前调整到上一个匹配位置</td>
</tr>
<tr>
<td>gn</td>
<td>启用可视化模式, 选中下一次的匹配文本</td>
</tr>
<tr>
<td>gN</td>
<td>启用可视化模式, 选中上一次的匹配文本</td>
</tr>
</tbody></table>
<p>回溯之前的查找</p>
<p>Vim 会一直记录我们执行过的查找模式，因此可以方便地重用它们。当查找提示</p>
<p>符出现时，我们可以通过 <Up> 键，滚动浏览之前的查找记录。</p>
<h2 id="Tip-80-Highlight-Search-Matches"><a href="#Tip-80-Highlight-Search-Matches" class="headerlink" title="Tip 80 Highlight Search Matches"></a>Tip 80 Highlight Search Matches</h2><p>高亮查找匹配</p>
<p>通过启用<code>hlsearch</code>选项，在配置文件中设置<code>set hlsearch</code> 可以高亮显示查找匹配。</p>
<p><strong>禁用高亮查找功能</strong></p>
<p>高亮查找有时会使得工作区内到处充斥高亮色调，Vim 提供了一种优雅的解决方案， 即通过 :nohlsearch 命令暂时关闭查找高亮功能（简写 :noh ）。此命令使得高亮功能一直处于关闭状态，直到执行新的或重复的查找命令为止。</p>
<p><strong>创建用于关闭高亮功能的快捷键</strong></p>
<p><code>:noh &lt;CR&gt; </code>虽然可以禁用查找高亮功能，但我们在键盘操作上也花费了不少功夫。</p>
<p>通过创建映射项，可以让我们加速操作，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nnoremap &lt;silent&gt; &lt;C-l&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;&lt;C-l&gt;</span><br></pre></td></tr></table></figure>

<p><C-l> 通常用于清除并重绘显示屏（参见 :h CTRL-L ）。而新的映射项，是在原有基础之上增加了暂时关闭查找高亮的功能。</p>
<h2 id="Tip-81-Preview-the-First-Match-Before-Execution"><a href="#Tip-81-Preview-the-First-Match-Before-Execution" class="headerlink" title="Tip 81 Preview the First Match Before Execution"></a>Tip 81 Preview the First Match Before Execution</h2><p>在执行查找前预览第一处匹配</p>
<p>缺省情况下， 我们在输入查找模式时， Vim 不会进行查找， 只有当我们按下 <CR> 后，它才会立即展开行动。启用‘incsearch’选项，set incsearch , 会让 Vim 根据已在查找域中输入的文本，预览第一处匹配。每当我们新输入一个字符时， Vim 会即时更新预览内容。</p>
<p><strong>根据预览结果对查找域自动补全  （</strong><C-r><C-w><strong>）</strong></p>
<p>例子：我们搜索输入 carr 就直接定位到 carrot 单词了. 假如我们需要匹配整个的 carrot 单词, 用来做替换之类的呢?</p>
<p>​    简单的方式就是手动全部敲完整个单词 carrot, 不过有快捷键可以完成此任务: <code>&lt;C-r&gt;&lt;C-w&gt;</code>. 此快捷键可以把当前预览匹配的词自动补全到搜索字段, 比较长的单词就很好用了。</p>
<p>需要注意的是 <C-r><C-w> 自动补全比较脆弱。</p>
<p>例如在使用 \v 正则模式下搜索时, <C-r><C-w> 将会补全光标处的整个单词 (那么 /\vcarr<C-r><C-w> 将会得到 /\vcarrcarrot 结果)。</p>
<p>因此，只要你找的不是模式，而是单词或词组，基于增量查找的自动补全功能真地能节省一点时间。</p>
<h2 id="Tip-82-统计当前模式的匹配个数"><a href="#Tip-82-统计当前模式的匹配个数" class="headerlink" title="Tip 82 统计当前模式的匹配个数"></a>Tip 82 统计当前模式的匹配个数</h2><p>虽然没有任何方法可以让查找命令统计当前文档中的匹配个数，但是用下面这条命令就可以做到这一点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➾:%s///gn</span><br><span class="line"> 《 117 matches on 65 lines</span><br></pre></td></tr></table></figure>

<p>​    实际上，我们调用的是 <code>:substitute </code>命令，替换命令，但标志位 <code>n </code>会抑制正常的替换动作。该命令不会对每处匹配进行替换，而是简单地统计匹配的次数，并将结果显示到命令</p>
<p>行上。</p>
<p>不管怎样，不要省略任何 / 字符。如果少加了一个/ ，即<code> :%s//gn</code>，将致使</p>
<p>“gn”替换每一处匹配。</p>
<h2 id="Tip-83-Offset-the-Cursor-to-the-End-of-a-Search-Match"><a href="#Tip-83-Offset-the-Cursor-to-the-End-of-a-Search-Match" class="headerlink" title="Tip 83 Offset the Cursor to the End of a Search Match"></a>Tip 83 Offset the Cursor to the End of a Search Match</h2><p>将光标偏移到查找匹配的结尾</p>
<p>​    每当我们执行查找命令时，光标总会被定位于匹配的首字母上。虽然这种缺省操</p>
<p>作看起来比较合理，但我们可能有时更倾向于将光标定位于查找匹配的结尾。Vim 的</p>
<p>查找偏移功能，可以将此想法变为现实。</p>
<p><strong>标志位e</strong></p>
<p>加入标志位e会把光标移到匹配项结尾</p>
<p>例如： /vim/e</p>
<h2 id="Tip-85-Create-Complex-Patterns-by-Iterating-upon-Search-History"><a href="#Tip-85-Create-Complex-Patterns-by-Iterating-upon-Search-History" class="headerlink" title="Tip 85 Create Complex Patterns by Iterating upon Search History"></a>Tip 85 Create Complex Patterns by Iterating upon Search History</h2><p>利用查找历史，迭代完成复杂的模式</p>
<p>写一个正则表达式并不简单. 通常都不是一次就能写对的, 所以如果能在上一次的基础上进行改进就显得很必要. 那么重新调用和编辑搜索历史就是必备的技巧    。</p>
<p>在查找提示符 \ 出现后，键入 <Up>会显示之前的搜索记录</p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim用动作命令在文档中移动</title>
    <url>/2021/09/12/vim/vim%E7%94%A8%E5%8A%A8%E4%BD%9C%E5%91%BD%E4%BB%A4%E5%9C%A8%E6%96%87%E6%A1%A3%E4%B8%AD%E7%A7%BB%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="用动作命令在文档中移动"><a href="#用动作命令在文档中移动" class="headerlink" title="用动作命令在文档中移动"></a>用动作命令在文档中移动</h1><table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>(</td>
<td>前移一句</td>
<td>）</td>
<td>后移一句</td>
</tr>
<tr>
<td>{</td>
<td>前移一段（以空格行分辨）</td>
<td>}</td>
<td>后移一段（以空格行分辨）</td>
</tr>
</tbody></table>
<h2 id="Tip-47-Distinguish-Between-Real-Lines-and-Display-Lines"><a href="#Tip-47-Distinguish-Between-Real-Lines-and-Display-Lines" class="headerlink" title="Tip 47 Distinguish Between Real Lines and Display Lines"></a>Tip 47 Distinguish Between Real Lines and Display Lines</h2><p>区分实际行与屏幕行</p>
<p>除 Vim 以外，其他大多数文本编辑器都没有实际行的概念，它们只提供操作屏幕行的手段。 </p>
<p>vim的 j、 k、 0 和 $ 都用于操作实际行，而如果在这些键前加上 g 前缀的话，就会让 Vim 对屏幕行进行操作。</p>
<p><img src="NO1.png" alt="img"></p>
<p>以截图为例，假设我们想把光标向上移一行( k )，光标会移到单词“ac”上去，这既是所谓的<strong>实际行</strong>。</p>
<p>我们按 gk 就会移到单词“vehicula”上，目标单词位于光标之上的一个屏幕行，这就是<strong>屏幕行</strong>。</p>
<p>Vim 也提供了直接跳到行首及行尾的命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>移动</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>移动到实际行的行首</td>
</tr>
<tr>
<td>g0</td>
<td>移动到屏幕行的行首</td>
</tr>
<tr>
<td>^</td>
<td>移动到实际行的第一个非空白字符</td>
</tr>
<tr>
<td>g^</td>
<td>移动到屏幕行的第一个非空白字符</td>
</tr>
<tr>
<td>$</td>
<td>移动到实际行的行尾</td>
</tr>
<tr>
<td>g$</td>
<td>移动到屏幕行的行尾</td>
</tr>
</tbody></table>
<h2 id="Tip-48-Move-Word-Wise"><a href="#Tip-48-Move-Word-Wise" class="headerlink" title="Tip 48 Move Word-Wise"></a>Tip 48 Move Word-Wise</h2><p>基于单词的移动</p>
<p><img src="NO2.png" alt="img"></p>
<p><code>w</code> 和<code> </code>b命令，可以把它们想作“<em>word</em>”及“<em>back-word</em>”。</p>
<p><code>e </code>和 <code>ge</code> 命令是对此命令集的补充</p>
<p>vim有“单词” <em>word</em> 和“字串” <em>WORD</em> 的区分，以<strong>空白字符为间隔识别字串</strong>。<strong>每个面向单词的动作命令，都有一个面向字串的命令与其对应</strong>，这当中包括 W、 B、 E 和 gE</p>
<ul>
<li><p>“单词”（<em>word</em>）：由 字母+数字+下划线 组成。</p>
</li>
<li><p>“字串”（<em>WORD</em>）：由 一串非空白字符的字符串组成，以空格为间隔识别字串</p>
</li>
</ul>
<p>空白字符 包括： 空格, 制表符(Tab), 换行</p>
<h2 id="Tip-49-Find-by-Character"><a href="#Tip-49-Find-by-Character" class="headerlink" title="Tip 49 Find by Character"></a>Tip 49 Find by Character</h2><p>对字符进行查找</p>
<p>最常用语法 <code>f&#123;char&#125;</code></p>
<p>vim 里最快的移动技能之一; 行内按字符往后搜索, 如果匹配到, 那么光标直接定位到匹配的字符上, 没匹配就保持原状。但<strong>仅能在行内查找</strong>。</p>
<p><code>；</code>移动到下一个匹配项（正向查找） <code>，</code>移动到前一个匹配项（反向查找）</p>
<p>查找字符时，可以包含或是排除目标字符，下表列出了其中的所有命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>f{char}</td>
<td>正向移动到下一个{char}所在之处</td>
</tr>
<tr>
<td>F{char}</td>
<td>反向移动到下一个{char}所在之处</td>
</tr>
<tr>
<td>t{char}</td>
<td>正向移动到下一个{char}所在之处的前一个字符上</td>
</tr>
<tr>
<td>T{char}</td>
<td>反向移动到下一个{char}所在之处的前一个字符上</td>
</tr>
<tr>
<td>；</td>
<td>重复上一次的查找命令</td>
</tr>
<tr>
<td>，</td>
<td>反向查找上一次的字符查找命令</td>
</tr>
</tbody></table>
<h2 id="Tip-50-Search-to-Navigate"><a href="#Tip-50-Search-to-Navigate" class="headerlink" title="Tip 50 Search to Navigate"></a>Tip 50 Search to Navigate</h2><p>通过查找进行移动      </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法 /&#123;chars&#125; 或 /&#123;patterns&#125;</span><br></pre></td></tr></table></figure>

<p>普通模式下，按下 <code>/</code> 启用搜索命令,</p>
<p>键入字符后, 可以看到有多处匹配的结果, <code>&lt;CR&gt;</code> 回车定位到了第一次匹配的地方; 可以按 <code>n</code> 跳转到下一个匹配地方, 也可以按<code> N</code> 反向跳转</p>
<p>匹配到了唯一的结果时, 回车定位直接到匹配的地方</p>
<p>取消高亮选区，命令模式下，输入<code>:nohlsearch </code>也可以<code>:set nohlsearch</code>； 当然，可以简写，<code>:noh</code>或者<code>set noh</code>。</p>
<p>在vim配置文件中加入如下配置会非常实用: ~/.vimrc</p>
<p>set hlsearch  “ 搜索高亮</p>
<p>set incsearch “增量显示部分匹配</p>
<p>set ignorecase “忽略大小写</p>
<h2 id="Tip-51-Trace-Your-Selection-with-Precision-Text-Objects"><a href="#Tip-51-Trace-Your-Selection-with-Precision-Text-Objects" class="headerlink" title="Tip 51 Trace Your Selection with Precision Text Objects"></a>Tip 51 Trace Your Selection with Precision Text Objects</h2><p>用精确的文本对象选择选区</p>
<p>文本对象允许我们操作<strong>括号、 被引用的文本、 XML 标签以及其他文本</strong>中的常见结构。 </p>
<table>
<thead>
<tr>
<th><strong>文本对象</strong></th>
<th><strong>选择区域</strong></th>
<th><strong>文本对象</strong></th>
<th><strong>选择区域</strong></th>
</tr>
</thead>
<tbody><tr>
<td>a) or ab</td>
<td>一对圆括号(parentheses)</td>
<td>i) or ib</td>
<td>一对圆括号(parentheses)内部的内容</td>
</tr>
<tr>
<td>a} or aB</td>
<td>一对花括号{braces}</td>
<td>i} or iB</td>
<td>一对花括号{braces}内部的内容</td>
</tr>
<tr>
<td>a]</td>
<td>一对方括号[brackets]</td>
<td>i]</td>
<td>一对方括号[brackets]里的内容</td>
</tr>
<tr>
<td>a&gt;</td>
<td>尖括号</td>
<td>i&gt;</td>
<td>尖括号的内容</td>
</tr>
<tr>
<td>a’</td>
<td>单引号</td>
<td>i’</td>
<td>单引号的内容</td>
</tr>
<tr>
<td>a”</td>
<td>双引号</td>
<td>i”</td>
<td>双引号的内容</td>
</tr>
<tr>
<td>a`</td>
<td>反引号</td>
<td>i`</td>
<td>反引号的内容</td>
</tr>
<tr>
<td>at</td>
<td>标签</td>
<td>it</td>
<td>标签的内容</td>
</tr>
</tbody></table>
<p>为了便于记忆，可以把<code>i</code>想成<code>inside</code>，而把<code>a</code>想成<code>around</code>或<code>all</code>。</p>
<p>用文本对象执行操作</p>
<p>文本对象并不仅仅局限于可视化选择，每当在vim命令语法里出现<code>&#123;motion&#125;</code> 时，都可以在这个地方使用文本对象，常见的例子包括<code> d&#123;motion&#125;、c&#123;motion&#125;和 y&#123;motion&#125;</code>。</p>
<h2 id="Tip-52-Delete-Around-or-Change-Inside"><a href="#Tip-52-Delete-Around-or-Change-Inside" class="headerlink" title="Tip 52 Delete Around, or Change Inside"></a>Tip 52 Delete Around, or Change Inside</h2><p>删除周边，修改内部</p>
<p>Vim 的文本对象分为两类：</p>
<ul>
<li><p>一类是操作分隔符的文本对象，如 i)、 i” 和 it；另</p>
</li>
<li><p>一类用于操作文本块，如单词、句子和段落。</p>
</li>
<li><p>Tip 51总结前者，Tip 52总结后者。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>文本对象</strong></th>
<th><strong>匹配区域</strong></th>
<th><strong>文本对象</strong></th>
<th><strong>匹配区域</strong></th>
</tr>
</thead>
<tbody><tr>
<td>iw</td>
<td>一个词 <em>word</em></td>
<td>aw</td>
<td>一个词 <em>word</em> 含后面的一个空格</td>
</tr>
<tr>
<td>iW</td>
<td>一个词 <em>WORD</em></td>
<td>aW</td>
<td>一个词 <em>WORD</em> 含空格</td>
</tr>
<tr>
<td>is</td>
<td>一句话</td>
<td>as</td>
<td>一句话含后面的一个空格</td>
</tr>
<tr>
<td>ip</td>
<td>一段话</td>
<td>ap</td>
<td>一段话 含空行</td>
</tr>
</tbody></table>
<p>一般来讲:</p>
<ul>
<li>d{motion} 更适合于: aw as ap 场景</li>
<li>c{motion} 更适合于: iw is ip 场景</li>
</ul>
<h2 id="Tip-53-Mark-Your-Place-and-Snap-Back-to-It"><a href="#Tip-53-Mark-Your-Place-and-Snap-Back-to-It" class="headerlink" title="Tip 53 Mark Your Place and Snap Back to It"></a>Tip 53 Mark Your Place and Snap Back to It</h2><p>位置标记和返回标记</p>
<p>vim 标记可以使我们在文档内快速的进行跳转, 我们可以手动设置标记, vim 也会自动记录我们感兴趣的位置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">标记语法 m[a-z / A-Z]</span><br></pre></td></tr></table></figure>



<ul>
<li><p> [a-z] <em>小写字母</em> 仅在当前缓冲区可访问</p>
</li>
<li><p>[A-Z] <em>大写字母</em> 全局生效, 多个缓冲区可访问</p>
</li>
</ul>
<p>跳转语法</p>
<ul>
<li><p>`{mark} - 跳转到标记为 {mark} 的精确位置</p>
</li>
<li><p>‘{mark} - 跳转到标记为 {mark} 行的行首非空白字符处</p>
</li>
</ul>
<p><code>mm </code>和 ``m `命令是一对便于使用的命令，它们分别设置位置标记 m，以及跳转到该标记</p>
<p>如果你只想记一条命令，那就记住``{mark} `好了。不论你是想恢复到准确的光标位置，还是只想回到正确的行，这条命令都能做到。</p>
<p>自动位置标记</p>
<p>Vim 会自动帮我们设置一些位置标记，这些标记用起来非常方便</p>
<table>
<thead>
<tr>
<th><strong>Keystrokes</strong></th>
<th><strong>Buffer Contents</strong></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
<td>当前文件中最后一次跳转前的位置</td>
</tr>
<tr>
<td>`.</td>
<td>最后修改的位置</td>
</tr>
<tr>
<td>`^</td>
<td>最后插入的位置</td>
</tr>
<tr>
<td>`[</td>
<td>最后一次修改/拷贝的起始位置</td>
</tr>
<tr>
<td>`]</td>
<td>最后一次修改/拷贝的结束位置</td>
</tr>
<tr>
<td>`&lt;</td>
<td>最后一次可视化块的起始位置</td>
</tr>
<tr>
<td>`&gt;</td>
<td>最后一次可视化块的结束位置</td>
</tr>
</tbody></table>
<h2 id="Tip-54-Jump-Between-Matching-Parentheses"><a href="#Tip-54-Jump-Between-Matching-Parentheses" class="headerlink" title="Tip 54 Jump Between Matching Parentheses"></a>Tip 54 Jump Between Matching Parentheses</h2><p>在匹配括号之间跳转</p>
<p><code>%</code> 可以再匹配的括号间进行跳转; 比如:<code> () &#123;&#125; [] &lt;&gt;</code></p>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim解决问题的方式</title>
    <url>/2021/09/12/vim/vim%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Tip1：Meet-the-Dot-Command"><a href="#Tip1：Meet-the-Dot-Command" class="headerlink" title="Tip1：Meet the Dot Command"></a>Tip1：Meet the Dot Command</h1><p>结识 . 命令</p>
<p><strong>.</strong> 命令可以重复上次的修改， Vim 中最为强大的多面手。</p>
<p>每次我们进入插入模式时，就会形成一次修改。从进入插入模式的那一刻起，直到返回普通模式， Vim 会记录每一个按键操作。做出这样一个修改后再用 . 命令的话，它将会重新执行所有这些按键操作 。</p>
<h1 id="Tip2-Don’t-Repeat-Yourself"><a href="#Tip2-Don’t-Repeat-Yourself" class="headerlink" title="Tip2: Don’t Repeat Yourself"></a>Tip2: Don’t Repeat Yourself</h1><p>不要自我重复，不少vim命令是两个甚至多个命令的组合</p>
<p>例如：</p>
<p>行移动：</p>
<ul>
<li><p>$: 将光标移动到当前行的行尾</p>
</li>
<li><p>0: 将光标移动到当前行的行首</p>
</li>
<li><p>^: 将光标移动到当前行的第一个非空字符（行首和当前行非空字符不是一个位置）</p>
</li>
</ul>
<p>文本操作：</p>
<ul>
<li><p>i: 在当前光标的前面插入字符</p>
</li>
<li><p>a: 在当前光标的后面追加字符</p>
</li>
<li><p>o: 在当前光标的下一行行首插入字符</p>
</li>
<li><p>I: 在一行的开头添加文本</p>
</li>
<li><p>A: 在一行的结尾处添加文本</p>
</li>
<li><p>O: 在光标当前行的上一行插入文本</p>
</li>
<li><p>s: 删除当前光标处的字符并进入到插入模式</p>
</li>
<li><p>S: 删除光标所在处的行，并进入到插入模式</p>
</li>
<li><p>u: 撤销修改</p>
</li>
<li><p>c or C : 表示修改当前行上光标后面的部分. 进入编辑状态.</p>
</li>
</ul>
<h1 id="Tip4-Act-Repeat-Reverse"><a href="#Tip4-Act-Repeat-Reverse" class="headerlink" title="Tip4 Act, Repeat, Reverse"></a>Tip4 Act, Repeat, Reverse</h1><p>执行、重复、回退</p>
<p> 在面对重复性工作时，我们需要让移动动作和修改都能够重复，这样就可以达到 一个最佳编辑模式。 Vim会记住我们的操作，使最常见的操作触手可及。</p>
<p>​    . 命令会重复上次修改。@: 可以用来重复任意 Ex 命令，或者我们也可以输入 &amp;来重复上次的:substitute命令（它本身也是一条 Ex 命令）。</p>
<p>​    当 Vim 让一个操作或移动可以很方便地重复时，它总是会提供某种方式，让我们在不小心做过头时能回退回来。</p>
<p> 对 . 命令而言，我们永远可以按 u 键撤销上次的修改。如果在使用 f{char} 命令后，不小心按了太多次 ; 键，就会偏离我们的目标。不过我们可以再按 , 键跳回去，这个命令会反方向查找上次 f{char}所查找的字符。</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>操作</th>
<th>重复</th>
<th>回退</th>
</tr>
</thead>
<tbody><tr>
<td>做出一个修改</td>
<td>{edit}</td>
<td>.</td>
<td>u</td>
</tr>
<tr>
<td>在行内查找下一个指定字符</td>
<td>f{char}/t{char}</td>
<td>;</td>
<td>,</td>
</tr>
<tr>
<td>在行内查找上一个指定字符</td>
<td>F{char}/T{char}</td>
<td>;</td>
<td>,</td>
</tr>
<tr>
<td>在文档中查找下一个匹配项</td>
<td>/pattern<CR></td>
<td>n</td>
<td>N</td>
</tr>
<tr>
<td>在文档中查找上一个匹配项</td>
<td>?pattern<CR></td>
<td>n</td>
<td>N</td>
</tr>
<tr>
<td>执行替换</td>
<td>:/s/target/replacement</td>
<td>&amp;</td>
<td>u</td>
</tr>
<tr>
<td>执行一系列修改</td>
<td>qx{changes}q</td>
<td>@x</td>
<td>u</td>
</tr>
</tbody></table>
<h1 id="Tip5-Find-and-Replace-by-Hand"><a href="#Tip5-Find-and-Replace-by-Hand" class="headerlink" title="Tip5 Find and Replace by Hand"></a>Tip5 Find and Replace by Hand</h1><p>查找并手动替换</p>
<p>一般的查找替换命令<code>:%s/content/copy/g</code>（以copy替换所有行中的content）。</p>
<p>偷懒方法：无需输入就可进行查找。<code>* </code>命令。</p>
<p>把光标移动到<code>content</code>单词上，然后用 <code>* </code>命令对他进行查找。</p>
<p>这会产生两个结果：</p>
<ul>
<li>一是光标会跳到下一个匹配项</li>
<li>二是所有出现这个词的地方都会被高亮显示。</li>
</ul>
<p>执行一次查找后，只需按 n 键就可以跳转到下一个匹配项。使修改可重复</p>
<h2 id="Tip7-Pause-with-Your-Brush-Off-the-Page"><a href="#Tip7-Pause-with-Your-Brush-Off-the-Page" class="headerlink" title="Tip7 Pause with Your Brush Off the Page"></a>Tip7 Pause with Your Brush Off the Page</h2><p>停顿时请移开画笔</p>
<p>​    插入模式专注于<strong>文本修改</strong>，停顿时进入普通模式。</p>
<h2 id="Tip8-Chunk-Your-Undos"><a href="#Tip8-Chunk-Your-Undos" class="headerlink" title="Tip8 Chunk Your Undos"></a>Tip8 Chunk Your Undos</h2><p>大步撤销，把撤销单元切成块</p>
<p> u键会撤销最新的修改。一次修改可以是改变文档内文本的任意操作，其中包括在普通模式、可视模式以及命令行模式中触发的命令。</p>
<p> 在vim中，可以控制撤销的力度。从进入插入模式开始到返回普通模式，在期间插入或删除任何内容都会被当成一次修改。因此，只要控制对<code>&lt;Esc&gt;</code>键的使用就可以使撤销作用于句子、段落或单词。</p>
<p> 注：在插入模式中，使用<code>&lt;up&gt; &lt;Down&gt; &lt;Left&gt; &lt;Right&gt;</code>移动光标会重置修改状态，将会产生一个新的撤销块。</p>
<h1 id="Tip9-Compose-Repeatable-Changes"><a href="#Tip9-Compose-Repeatable-Changes" class="headerlink" title="Tip9 Compose Repeatable Changes"></a>Tip9 Compose Repeatable Changes</h1><p>构造可重复的修改</p>
<p>配合 . 命令选择最优的方案</p>
<p>以删除一个单词为例：</p>
<ul>
<li><p>反向删除 <code>dbx </code></p>
</li>
<li><p>正向删除 <code>bdw</code>    </p>
</li>
<li><p>删除整个单词 <code>daw</code></p>
</li>
</ul>
<p> 命令有助于 . 命令发挥最大威力。反向删除 . == x ; 正向删除 . == dx;  删除整个单词 . == daw</p>
<h1 id="Tip11-Don’t-Count-If-You-Can-Repeat"><a href="#Tip11-Don’t-Count-If-You-Can-Repeat" class="headerlink" title="Tip11 Don’t Count If You Can Repeat"></a>Tip11 Don’t Count If You Can Repeat</h1><p>能重复，就不要用数数</p>
<p>以删除5个单词为例,有两种风格:</p>
<ul>
<li>次数风格（d5w）</li>
<li>重复风格（dw….）</li>
</ul>
<p>对于两种风格的使用存在争议，各有优缺，作者鼓励重复风格，数完估计都操作完了。应用过程中由程序员自由选。</p>
<h1 id="Tip12-Combine-and-Conquer"><a href="#Tip12-Combine-and-Conquer" class="headerlink" title="Tip12 Combine and Conquer"></a>Tip12 Combine and Conquer</h1><p>动作组合</p>
<p>在Vim 中，<strong>操作符 + 动作命令 = 操作</strong></p>
<p><code>d&#123;motion&#125;</code> 命令可以对一个字符<code> dl</code>、一个完整单词<code> daw</code>或一整个段落<code> dap</code> 进行删除操作，它作用的范围由动作命令决定。 <code>c&#123;motion&#125;</code>、 <code>y&#123;motion&#125;</code>以及其他一些命令 也类似，它们被统称为操作符<strong>operator</strong></p>
<p>g~、 gu 和 gU 命令要用两次按键来调用，我们可以把上述命令中的 g 当做一个 前缀字符，用以改变其后面的按键行为。</p>
<p>学习新的动作命令及操作符，就像是在学习 Vim 的词汇一样。如果掌握了这一简单的语法规则，在词汇量增长时，就能表达更多的想法。用 <code>daw</code> 删除一个单词，然后又学到<code> gU</code> 命令。它也是个操作符，所以我们可以用 <code>gUaw </code>把当前单词转换成大写形式。进一步扩充，学会了作用于段落的 <code>ap </code>动作命令，就会发现我们可以进行两个新的操作：用 <code>dap</code> 删除整个段落，或者用 <code>gUap </code>把整段文字转换为大写。</p>
<p>常见VIM操作符命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>修改</td>
</tr>
<tr>
<td>d</td>
<td>删除</td>
</tr>
<tr>
<td>y</td>
<td>复制到寄存器</td>
</tr>
<tr>
<td>g~</td>
<td>反转大小写</td>
</tr>
<tr>
<td>gu</td>
<td>转换为小写</td>
</tr>
<tr>
<td>gU</td>
<td>转换为大写</td>
</tr>
<tr>
<td>&gt;</td>
<td>增加缩进</td>
</tr>
<tr>
<td>&lt;</td>
<td>减小缩进</td>
</tr>
<tr>
<td>=</td>
<td>自动缩进</td>
</tr>
<tr>
<td>!</td>
<td>使用外部程序过滤{motion}所跨越的行</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim管理多个文件</title>
    <url>/2021/09/12/vim/vim%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><h2 id="Tip-36-Track-Open-File-with-the-Buffer-List"><a href="#Tip-36-Track-Open-File-with-the-Buffer-List" class="headerlink" title="Tip 36 Track Open File with the Buffer List"></a>Tip 36 Track Open File with the Buffer List</h2><p>用缓冲区列表管理打开的文件</p>
<p>文件与缓冲区的区别：文件是存储在磁盘上的，而缓冲区则存在于内存中。当 Vim 打开一个文件时，该文件的内容被读入一个具有相同名字的缓冲区。刚开始，缓冲区的内容和文件的内容完全相同，但当我们对缓冲区做出修改时，二者的内容就会出现差别。如果我们决定保留这些修改，就可以再把缓冲区的内容写回到文件里。</p>
<p>Vim允许我们同时在多个缓冲区（<em>buffer</em>）上工作，它会显示一个窗口，但窗口内仅会显示第一个buffer，一个窗口对应一个buffer。另外的buffer在当前窗口不可见，但其内容已经被载入到一个后台的缓冲区了，通过<code>:ls</code>命令可以查看。</p>
<p> <code> :ls</code>命令会列出所有被载入到内存中的缓冲区的列表，例如：</p>
<p><img src="NO1.png" alt="img"></p>
<p><code>% </code>符号指明哪个缓冲区在当前窗口中可见， 而<code>#</code>符号则代表轮换文件。 按 <code>&lt;C-^&gt;</code>可以在当前文件和轮换文件间快速切换。</p>
<p>使用缓冲区列表 (<code> :buffer</code> 命令简写形式为<code> :b</code> )</p>
<p>​    可以用 4 条命令来遍历缓冲区列表。</p>
<ul>
<li><code> :bprev ( :bp )</code>和 <code>:bnext ( :bn ) </code>在列表中反向或正向移动，每次移动一项；</li>
<li><code> :bfirst ( :bf )</code> 和 <code>:blast ( :bl ) </code>则分别跳到列表的开头和结尾。</li>
</ul>
<p> <code>  :ls</code>列表的开头有一个数字，它是在缓冲区创建时由 Vim 自动分配的编号。我们可以用 <code>:buffer N</code> 命令直接凭编号跳转到一个缓冲区<code>:bn</code>。</p>
<p>删除缓冲区</p>
<p>​    每次打开一个文件时， Vim 就会创建一个新的缓冲区。如果想删除缓冲区，可以用 <code>:bdelete</code> 命令 <code>:bd </code>，命令格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:bdelete N1 N2 N3</span><br><span class="line"></span><br><span class="line">:N,M bdelete</span><br></pre></td></tr></table></figure>

<p>如果我们想删除编号 5～ 10（包含 5 和 10）的缓冲区，可以执行 <code>:5,10bd</code> 。然而， 如果想要保留编号为 8 的缓冲区的话， 那么就只能用<code>:bd5 6 7 9 10</code>了。</p>
<p>注意：缓冲区的编号由 Vim 自动分配，没有办法手动改变此编号。因此，如果想删除一个或多个缓冲区，先得进行一番查找以便找出它们的编号。</p>
<p>​    Vim 内置的缓冲区管理功能缺乏灵活性。如果我们想对缓冲区进行组织，使其满足工作过程的需要，使用缓冲区列表并不是最佳选择。<strong>建议最好是把工作区划分成多个分割窗口、标签页，或是使用参数列表</strong>。</p>
<h2 id="Tip-37-Group-Buffers-into-a-Collection-with-the-Argument-List"><a href="#Tip-37-Group-Buffers-into-a-Collection-with-the-Argument-List" class="headerlink" title="Tip 37 Group Buffers into a Collection with the Argument List"></a>Tip 37 Group Buffers into a Collection with the Argument List</h2><p>用参数列表将缓冲区分组</p>
<p>参数列表易于管理，适用于对一批文件进行分组，使其更容易访问。 首先用 Vim 打开一些文件  ，使用<code> :args</code>命令后再查看参数列表：</p>
<p><img src="NO2.png" alt="img"></p>
<p>输出中的“[]”字符则指明了参数列表中的哪个文件是活动文件。</p>
<p>如果只是想在列表里增加几个文件，用这种方式就行了。它的好处是可以指定文件的次序，但它也有一个缺点，那就是手动增加文件的工作量比较大。如果想往参数列表中加入大量文件，那么使用通配符会快得多。</p>
<p>参数列表比缓冲区列表更容易管理，这使其成为对缓冲区进行分组的理想方式。</p>
<p>当不带参数运行 <code>:args</code> 命令时，它会打印当前参数列表的内容。也可以用下列格式来设置参数列表的内容  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:args &#123;arglist&#125; </span><br></pre></td></tr></table></figure>

<p><code>&#123;arglist&#125;</code> 可以包括文件名、通配符，甚至是一条 shell 命令的输出结果 。</p>
<p>接着就可以用 <code>:next </code>及 <code>:prev </code>命令遍历参数列表中的文件，或是用 <code>:argdo </code>命令在列表中的每个缓冲区上执行同一条命令。</p>
<p>缓冲区列表就像是计算机桌面（desktop），它永远是乱七八糟的；而参数列表则像一个整洁的独立工作区（workspace），只有在需要扩展空间时才会用到它。</p>
<h2 id="Tip-38-Manage-Hidden-Files"><a href="#Tip-38-Manage-Hidden-Files" class="headerlink" title="Tip 38 Manage Hidden Files"></a>Tip 38 Manage Hidden Files</h2><p>管理隐藏文件，即隐藏的缓冲区</p>
<p>Vim 对被修改过的缓冲区会给予特殊对待，以防未加保存就意外退出。此技巧将介绍如何隐藏一个被修改过的缓冲区，以及如何在退出 Vim 时处理隐藏缓冲区。</p>
<p><img src="NO3.png" alt="img"></p>
<p>缓冲区 a.txt 前有一个 <code>+ </code>号，表示这个缓冲区被修改过了。如果现在保存文件的话， 缓冲区的内容就会被写入磁盘里， 而 <code>+ </code>号也会消失了。但如果尝试切换一下缓冲区<code>：bn</code>，Vim 会报错。我们需要命令的结尾加一个叹号<code>!</code>，表该命令强制执行。</p>
<p>在退出时处理隐藏缓冲区</p>
<p>当一个缓冲区被隐藏后， Vim 允许我们像往常一样工作。我们可以打开其他缓冲区，对其进行修改、保存等，没有任何不同。然而，当我们想关闭编辑会话时， Vim 就会提醒我们某个缓冲区中有未保存的修改。</p>
<p> Vim 会把第一个有改动的隐藏缓冲区载入当前窗口，这样我们就可以决定如何处理它。</p>
<ul>
<li>如果要保留修改，可以执行 <code>:write （ :w ）</code> 命令把缓冲区保存到文件</li>
<li>如果想摒弃此修改，可以执行 <code>:edit!</code>，重新从磁盘读取此文件，这会用文件的内容覆盖缓冲区中的内容</li>
<li>当缓冲区内容与磁盘文件一致后，我们就可以再次尝试执行 <code>:quit </code>命令了</li>
</ul>
<p> 如果会话里有不止一个被修改过的隐藏缓冲区，那么每次执行<code>:quit</code>命令时，Vim 都会激活下一个未保存的缓冲区。同样的，我们可以用<code>:write</code>及 <code>:edit!</code> 来保存或摒弃此修改。当没有其他窗口和隐藏缓冲区时，<code>:q </code>命令就会关闭 Vim。</p>
<ul>
<li><p>如果想退出 Vim 而不想对未保存的修改进行检查，可以执行 <code>:qall! </code>命令</p>
</li>
<li><p>如果想保存所有有改动的缓冲区而无需逐个检查，可以用<code>:wall</code>命令。</p>
</li>
</ul>
<p>在退出时，处理隐藏缓冲区的方式</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:w[rite]</td>
<td>把缓冲区内容写入磁盘</td>
</tr>
<tr>
<td>:e[dit]!</td>
<td>把磁盘文件内容读入缓冲区（即回滚所做修改）</td>
</tr>
<tr>
<td>:qa[ll]!</td>
<td>关闭所有窗口，摒弃修改而无需警告</td>
</tr>
<tr>
<td>:wa[ll]!</td>
<td>把所有改变的缓冲区写入磁盘</td>
</tr>
</tbody></table>
<p>启用 ‘hidden’ 设置</p>
<p>缺省情况下， Vim 不会让我们从一个改动过的缓冲区切换到其他缓冲区，将设置写入vim配置文件，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set hidden  &quot; 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存</span><br></pre></td></tr></table></figure>

<h2 id="Tip-39-Divide-Your-Workspace-into-Split-Windows"><a href="#Tip-39-Divide-Your-Workspace-into-Split-Windows" class="headerlink" title="Tip 39 Divide Your Workspace into Split Windows"></a>Tip 39 Divide Your Workspace into Split Windows</h2><p>将工作区切分成窗口  </p>
<p>vim对窗口操作的快捷键前缀 ：<code>&lt;C-w&gt;</code> ( window )</p>
<p>在Vim的术语中, 窗口<em>window</em>指是 缓冲区 的可视化窗口<em>viewport</em>。一个缓冲区<em>buffer</em>对应一个窗口。</p>
<p>Vim 允许我们切分工作区来展示多个缓冲区。</p>
<ul>
<li><p> <code>&lt;C-w&gt;s </code>命令可以水平切分此窗口，使之成为两个高度相同的窗口</p>
</li>
<li><p><code> &lt;C-w&gt;v</code> 命令对窗口进行垂直切分。</p>
</li>
</ul>
<p>窗口切分可任意重复多次，可把工作区一次次 地切分为更小的窗口，就像细胞分裂那样</p>
<p><img src="NO4.png" alt="img"></p>
<p>工作区切分窗口方式</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>&lt; C - w &gt;s</td>
<td>水平切分当前窗口，新窗口仍显示当前缓冲区</td>
</tr>
<tr>
<td>&lt; C - w &gt;v</td>
<td>垂直切分当前窗口，新窗口仍显示当前缓冲区</td>
</tr>
<tr>
<td>:sp[list] { file }</td>
<td>水平切分当前窗口，并在新窗口中载入{ file }</td>
</tr>
<tr>
<td>:vsp[list] { file }</td>
<td>垂直切分当前窗口，并在新窗口中载入{ file }</td>
</tr>
</tbody></table>
<p>在窗口间切换</p>
<ul>
<li><p><code>&lt; C - w &gt; </code>配上 <code>h j k l </code>在窗口间方向移动</p>
</li>
<li><p><code>&lt; C - w &gt;w</code> 在窗口间循环切换。</p>
</li>
</ul>
<p>实际上， <code>&lt;C-w&gt;&lt;C-w&gt; </code>完成的功能和<code>&lt;C-w&gt;w </code>相同，也就是说可以一直按住<code>&lt;Ctrl&gt; </code>键，然后再输入 <code>ww </code>（或 <code>wj </code>，或上表中的其他命令）来切换活动窗口。</p>
<p>关闭窗口</p>
<table>
<thead>
<tr>
<th>Ex命令</th>
<th>普通模式下命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:clo[se]</td>
<td><C-w>c</td>
<td>关闭活动窗口</td>
</tr>
<tr>
<td>:on[ly]</td>
<td><C-w>o</td>
<td>只保留活动窗口，关闭其他窗口</td>
</tr>
</tbody></table>
<p>改变窗口大小及重新排列窗口（建议，直接上鼠标）</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><C-w>=</td>
<td>使所有窗口等宽、等高</td>
</tr>
<tr>
<td><C-w>_</td>
<td>最大化活动窗口高度</td>
</tr>
<tr>
<td><C-w>|</td>
<td>最大化活动窗口宽度</td>
</tr>
<tr>
<td>[N]<C-w>_</td>
<td>把活动窗口的高度设为 N 行</td>
</tr>
<tr>
<td>[N]<C-w>|</td>
<td>把活动窗口的宽度设为 N 行</td>
</tr>
</tbody></table>
<h2 id="Tip-40-Organize-Your-Window-Layouts-with-Tab-Pages"><a href="#Tip-40-Organize-Your-Window-Layouts-with-Tab-Pages" class="headerlink" title="Tip 40 Organize Your Window Layouts with Tab Pages"></a>Tip 40 Organize Your Window Layouts with Tab Pages</h2><p>用标签页将窗口分组</p>
<p>在 Vim 中，标签页是可以容纳一系列窗口的容器。</p>
<p>Vim中，一个窗口显示一个<em>bufffer</em>，一个标签页有可以有多个窗口，标签页为这些窗口提供排版，而标签栏显示当前标签页的活动窗口。<strong>窗口与buffer的关系是一对一，标签页于窗口的关系是一对多</strong>。</p>
<p>在 Vim 中，当我们用<code>:edit</code>命令打开一个文件时， Vim 却不会自动创建一个新标签页，而是会创建一个新缓冲区，并把该缓冲区显示到当前窗口。</p>
<p>假设我们正在处理某个工程中的文件，并且已经把工作区分成了几个窗口。然后，突然接到一项紧急任务，我们不得不马上切换工作内容。我们不想在当前标签页里打开新文件，因为这会把我们精心布置的工作区弄乱。此时，我们可以新创建一个标签页，并在此标签页中工作。当我们准备继续做原来的工作时，只需切回原来的标签页即可，所有的窗口都保持着我们离开时的模样。</p>
<p><code>:lcd &#123;path&#125; </code>命令让我们可以设置当前窗口的本地工作目录。如果我们创建了一个新标签页，并用 <code>:lcd</code> 命令切换到另一个目录，那么就可以把每个标签页限制在不同的工程范围内。</p>
<p><strong>注意： :lcd 只影响当前窗口，而非当前标签页。</strong></p>
<p>如果一个标签页包含了两个或更多的窗口，我们可以用<code>:windo lcd &#123;path&#125;</code>命令为所有这些窗口设置本地工作目录。</p>
<p>打开及关闭标签页</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:tabe[dit] { filename }</td>
<td>在新标签页中打开 { filename }</td>
</tr>
<tr>
<td>&lt; C - w &gt;T</td>
<td>把当前窗口移到一个新标签页</td>
</tr>
<tr>
<td>:tabc[lose]</td>
<td>关闭当前标签页以及其中所有窗口</td>
</tr>
<tr>
<td>:tabo[nly]</td>
<td>只保留活动标签页，关闭其他标签页</td>
</tr>
</tbody></table>
<p>实际上也可使用<code>:tabnew</code>来创建标签页</p>
<p>在标签页间切换</p>
<table>
<thead>
<tr>
<th>Ex命令</th>
<th>普通模式命令</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>:tabn[ext]  { N }</td>
<td>{  N }gt</td>
<td>切换到编号为N的标签页</td>
</tr>
<tr>
<td>:tabn[ext]</td>
<td>gt</td>
<td>切换到下一标签页</td>
</tr>
<tr>
<td>:tabp[revious]</td>
<td>gT</td>
<td>切换到上一标签页</td>
</tr>
</tbody></table>
<p>重排标签页</p>
<p>用 <code>:tabmove [N] </code>命令可以重新排列标签页。</p>
<ul>
<li>当<code> [N]</code> 为 0 时，当前标签页会被移到开头；</li>
<li>如果省略了 <code>[N]</code>，当前标签页会被移到结尾。</li>
<li>如果终端支持鼠标，或是正在使用 GVim，可通过鼠标拖曳来进行重排操作。</li>
</ul>
]]></content>
      <categories>
        <category>vim实用技巧</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>I2C子系统</title>
    <url>/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="I2C通信"><a href="#I2C通信" class="headerlink" title="I2C通信"></a>I2C通信</h1><h2 id="I2C协议"><a href="#I2C协议" class="headerlink" title="I2C协议"></a>I2C协议</h2><p>I2C协议运用已经非常广泛，直接看图，一图胜前言。</p>
<p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/NO1.png" alt="image"></p>
<h2 id="I2C设备驱动数据处理"><a href="#I2C设备驱动数据处理" class="headerlink" title="I2C设备驱动数据处理"></a>I2C设备驱动数据处理</h2><ul>
<li>Linux内核代码：<code>drivers\i2c\i2c-core.c</code></li>
</ul>
<p>数据处理函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_transfer - execute a single or combined I2C message</span></span><br><span class="line"><span class="comment"> * @adap: Handle to I2C bus</span></span><br><span class="line"><span class="comment"> * @msgs: One or more messages to execute before STOP is issued to</span></span><br><span class="line"><span class="comment"> *	terminate the operation; each message begins with a START.</span></span><br><span class="line"><span class="comment"> * @num: Number of messages to be executed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns negative errno, else the number of messages executed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that there is no requirement that each message be sent to</span></span><br><span class="line"><span class="comment"> * the same slave address, although that is the most common model.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i2c_transfer</span><span class="params">(struct i2c_adapter *adap, struct i2c_msg *msgs, <span class="keyword">int</span> num)</span></span></span><br></pre></td></tr></table></figure>

<p>使用<code>i2c_transfer</code>函数发送数据之前要先构建好<code> i2c_msg</code>  。 </p>
<p><code>i2c_msg</code> 结构体定义在文件 <code>include/uapi/linux/i2c.h </code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> &#123;</span></span><br><span class="line">	__u16 addr;	<span class="comment">/* slave address			*/</span></span><br><span class="line">	__u16 flags;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_RD		0x0001	<span class="comment">/* read data, from slave to master */</span></span></span><br><span class="line">					<span class="comment">/* I2C_M_RD is guaranteed to be 0x0001! */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_TEN		0x0010	<span class="comment">/* this is a ten bit chip address */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_RECV_LEN		0x0400	<span class="comment">/* length will be first received byte */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_NO_RD_ACK		0x0800	<span class="comment">/* if I2C_FUNC_PROTOCOL_MANGLING */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_IGNORE_NAK	0x1000	<span class="comment">/* if I2C_FUNC_PROTOCOL_MANGLING */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_REV_DIR_ADDR	0x2000	<span class="comment">/* if I2C_FUNC_PROTOCOL_MANGLING */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_NOSTART		0x4000	<span class="comment">/* if I2C_FUNC_NOSTART */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I2C_M_STOP		0x8000	<span class="comment">/* if I2C_FUNC_PROTOCOL_MANGLING */</span></span></span><br><span class="line">	__u16 len;		<span class="comment">/* msg length				*/</span></span><br><span class="line">	__u8 *buf;		<span class="comment">/* pointer to msg data			*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以读取 I2C 设备寄存器数据为例：</p>
<p>(参考正点原子)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[2];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* msg[0]，第一条写消息，发送要读取的寄存器地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].addr = addr; <span class="comment">/* I2C 设备地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].flags = <span class="number">0</span>; <span class="comment">/* 标记为发送数据 */</span></span><br><span class="line">msg[<span class="number">0</span>].buf = &amp;reg; <span class="comment">/* 读取的首地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].len = <span class="number">1</span>; <span class="comment">/* reg 长度 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* msg[1]，第二条读消息，读取寄存器数据 */</span></span><br><span class="line">msg[<span class="number">1</span>].addr = addr; <span class="comment">/* I2C 设备地址 */</span></span><br><span class="line">msg[<span class="number">1</span>].flags = I2C_M_RD; <span class="comment">/* 标记为读取数据 */</span></span><br><span class="line">msg[<span class="number">1</span>].buf = val; <span class="comment">/* 读取数据缓冲区 */</span></span><br><span class="line">msg[<span class="number">1</span>].len = len; <span class="comment">/* 要读取的数据长度 */</span></span><br><span class="line"></span><br><span class="line">ret = i2c_transfer(adapter, msg, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>向 I2C 设备寄存器写入数据：</p>
<p>(参考正点原子)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line">u8 b[<span class="number">256</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">client</span> =</span> (struct i2c_client *)</span><br><span class="line">dev-&gt;private_data;</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = reg; <span class="comment">/* 寄存器首地址 */</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;b[<span class="number">1</span>],buf,len); <span class="comment">/* 将要发送的数据拷贝到数组 b 里面 */</span></span><br><span class="line"></span><br><span class="line">msg.addr = addr; <span class="comment">/* I2C 设备地址 */</span></span><br><span class="line">msg.flags = <span class="number">0</span>; <span class="comment">/* 标记为写数据 */</span></span><br><span class="line"></span><br><span class="line">msg.buf = b; <span class="comment">/* 要发送的数据缓冲区 */</span></span><br><span class="line">msg.len = len + <span class="number">1</span>;   <span class="comment">/* 实际数据长度 + 寄存器地址长度*/</span></span><br><span class="line"></span><br><span class="line">ret = i2c_transfer(client-&gt;adapter, &amp;msg, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>Linux内核对<code>i2c_transfer</code>进一步封装，形成两个API函数分别用于I2C数据的接收和发送操作  。代码位于：<code>drivers\i2c\i2c-core.c</code></p>
<ul>
<li>i2c_master_recv</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_master_recv - issue a single I2C message in master receive mode</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @buf: Where to store data read from slave</span></span><br><span class="line"><span class="comment"> * @count: How many bytes to read, must be less than 64k since msg.len is u16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns negative errno, or else the number of bytes read.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i2c_master_recv</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, <span class="keyword">char</span> *buf, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<ul>
<li>i2c_master_send</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_master_send - issue a single I2C message in master transmit mode</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @buf: Data that will be written to the slave</span></span><br><span class="line"><span class="comment"> * @count: How many bytes to write, must be less than 64k since msg.len is u16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns negative errno, or else the number of bytes written.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i2c_master_send</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> count)</span></span></span><br></pre></td></tr></table></figure>

<h1 id="kernel中i2c驱动"><a href="#kernel中i2c驱动" class="headerlink" title="kernel中i2c驱动"></a>kernel中i2c驱动</h1><h2 id="核心-i2c-driver-结构体"><a href="#核心-i2c-driver-结构体" class="headerlink" title="核心  i2c_driver 结构体"></a>核心  i2c_driver 结构体</h2><p>分配、设置、注册一个i2c_driver结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">i2c_example_driver</span> =</span> &#123;</span><br><span class="line">	.driver = &#123;</span><br><span class="line">		.name = <span class="string">&quot;example&quot;</span>,</span><br><span class="line">		.of_match_table = of_match_ids_example,</span><br><span class="line">	&#125;,</span><br><span class="line">	.probe = i2c_example_driver_probe,</span><br><span class="line">	.remove = i2c_example_driver_remove,</span><br><span class="line">	.id_table = example_ids,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>出入口函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*入口函数 注册一个i2c_drvier */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">i2c_driver_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i2c_add_driver(&amp;i2c_example_driver);</span><br><span class="line">&#125;</span><br><span class="line">module_init(i2c_driver_init);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**出口函数 del一个i2c_drvier */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">i2c_driver_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	i2c_del_driver(&amp;i2c_example_driver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="i2c-driver表明能支持哪些设备"><a href="#i2c-driver表明能支持哪些设备" class="headerlink" title="i2c_driver表明能支持哪些设备"></a>i2c_driver表明能支持哪些设备</h2><p>i2c_driver表明能支持哪些设备：</p>
<ul>
<li><p>使用of_match_table来判断</p>
<ul>
<li>设备树中，某个I2C控制器节点下可以创建I2C设备的节点<ul>
<li>如果I2C设备节点的compatible属性跟of_match_table的某项兼容，则匹配成功</li>
</ul>
</li>
<li>i2c_client.name跟某个of_match_table[i].compatible值相同，则匹配成功</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">of_match_ids_example</span>[] =</span> &#123;</span><br><span class="line">	&#123; .compatible = <span class="string">&quot;com_name,chip_name&quot;</span>,   .data = <span class="literal">NULL</span>&#125;,</span><br><span class="line">	&#123; <span class="comment">/* END OF LIST */</span> &#125;  <span class="comment">/*最后空一项为必须，空闲为end 判断条件*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// of_ 开头一般与设备树关联</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用id_table来判断</p>
<ul>
<li>i2c_client.name跟某个id_table[i].name值相同，则匹配成功</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">example_ids</span>[] =</span> &#123;</span><br><span class="line">	&#123; <span class="string">&quot;chip_name&quot;</span>,  (<span class="keyword">kernel_ulong_t</span>)<span class="literal">NULL</span> &#125;,</span><br><span class="line">	&#123; <span class="comment">/* END OF LIST */</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>i2c_driver跟i2c_client匹配成功后，就调用<strong>i2c_driver.probe</strong>函数。</p>
<h2 id="i2c-client"><a href="#i2c-client" class="headerlink" title="i2c_client"></a>i2c_client</h2><p>参考资料 Linux内核文档: 5.0版本内核</p>
<ul>
<li><code>Documentation\i2c\instantiating-devices.rst</code></li>
<li><code>Documentation\i2c\writing-clients.rst</code></li>
</ul>
<p>i2c_client表示一个I2C设备，创建i2c_client的方法有4种：</p>
<ul>
<li><p>方法1</p>
<ul>
<li>通过I2C bus number来创建</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i2c_register_board_info</span><span class="params">(<span class="keyword">int</span> busnum, struct i2c_board_info <span class="keyword">const</span> *info, <span class="keyword">unsigned</span> len)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过设备树结点</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在某个I2C控制器的节点下，添加如下代码： */</span>		</span><br><span class="line">		ap3216c@<span class="number">1</span>e &#123;</span><br><span class="line">			compatible = <span class="string">&quot;lite-on,ap3216c&quot;</span>;</span><br><span class="line">			reg = &lt;<span class="number">0x1e</span>&gt;;</span><br><span class="line">		&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>方法2</p>
<p>有时候无法知道该设备挂载哪个I2C bus下，无法知道它对应的I2C bus number。<br>但是可以通过其他方法知道对应的i2c_adapter结构体。<br>可以使用下面两个函数来创建i2c_client：</p>
<ul>
<li>i2c_new_device</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">ap3216c_client</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">i2c_client_ap3216c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_adapter</span> *<span class="title">adapter</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_board_info</span> <span class="title">board_info</span> =</span> &#123;</span><br><span class="line">        I2C_BOARD_INFO(<span class="string">&quot;ap3216c&quot;</span>, <span class="number">0x1e</span>),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">    <span class="comment">/* register I2C device */</span></span><br><span class="line">    adapter = i2c_get_adapter(<span class="number">0</span>);</span><br><span class="line">    ap3216c_client = i2c_new_device(adapter, &amp;board_info);</span><br><span class="line">    i2c_put_adapter(adapter);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>i2c_new_probed_device</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">ap3216c_client</span>;</span></span><br><span class="line"><span class="comment">/* 罗列出所有可能的地址,这里只有一个*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> normal_i2c[] = &#123; <span class="number">0x1e</span>, I2C_CLIENT_END &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">i2c_client_ap3216c_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_adapter</span> *<span class="title">adapter</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">i2c_board_info</span> <span class="title">i2c_info</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将名字信息写入i2c_info,先清0 */</span></span><br><span class="line">	<span class="built_in">memset</span>(&amp;i2c_info, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct i2c_board_info));</span><br><span class="line">	strscpy(i2c_info.type, <span class="string">&quot;ap3216c&quot;</span>, <span class="keyword">sizeof</span>(i2c_info.type));</span><br><span class="line"></span><br><span class="line">    adapter = i2c_get_adapter(<span class="number">0</span>); <span class="comment">/* 第0根i2c总线 */</span></span><br><span class="line">	ap3216c_client = i2c_new_probed_device(adapter, &amp;i2c_info,</span><br><span class="line">						   normal_i2c, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	i2c_put_adapter(adapter);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>差别</p>
<ul>
<li><p>i2c_new_device：</p>
<p>会创建i2c_client，即使该设备并不存在</p>
</li>
<li><p>i2c_new_probed_device：</p>
<p>它成功的话，会创建i2c_client，并且表示这个设备肯定存在</p>
<p>I2C设备的地址可能发生变化，比如AT24C02的引脚A2A1A0电平不一样时，设备地址就不一样</p>
<p>可以罗列出可能的地址</p>
<p>i2c_new_probed_device使用这些地址判断设备是否存在</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>方法3 (不推荐)：由i2c_driver.detect函数来判断是否有对应的I2C设备并生成i2c_client</p>
</li>
<li><p>方法4 : 通过用户空间(user-space)生成</p>
<p>调试时、或者不方便通过代码明确地生成i2c_client时，可以通过用户空间来生成。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个i2c_client, .name = &quot;eeprom&quot;, .addr=0x50, .adapter是i2c-3</span></span><br><span class="line"><span class="meta"># echo eeprom 0x50 &gt; /sys/bus/i2c/devices/i2c-3/new_device</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个i2c_client</span></span><br><span class="line"><span class="meta"># echo 0x50 &gt; /sys/bus/i2c/devices/i2c-3/delete_device</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="SMBus协议"><a href="#SMBus协议" class="headerlink" title="SMBus协议"></a>SMBus协议</h1><p>参考资料：</p>
<ul>
<li><p>Linux内核文档：<code>Documentation\i2c\smbus-protocol.rst</code></p>
</li>
<li><p>Linux内核代码：<code>drivers\i2c\i2c-core.c</code></p>
</li>
<li><p>SMBus协议：</p>
<ul>
<li><a href="http://www.smbus.org/specs/">http://www.smbus.org/specs/</a></li>
</ul>
</li>
</ul>
<h2 id="SMBus是I2C协议的一个子集。"><a href="#SMBus是I2C协议的一个子集。" class="headerlink" title="SMBus是I2C协议的一个子集。"></a>SMBus是I2C协议的一个子集。</h2><p>SMBus: System Management Bus，系统管理总线。</p>
<p>SMBus最初的目的是为智能电池、充电电池、其他微控制器之间的通信链路而定义的。<br>SMBus也被用来连接各种设备，包括电源相关设备，系统传感器，EEPROM通讯设备等等。<br>SMBus 为系统和电源管理这样的任务提供了一条控制总线，使用 SMBus 的系统，设备之间发送和接收消息都是通过 SMBus，而不是使用单独的控制线，这样可以节省设备的管脚数。<br>SMBus是基于I2C协议的，但SMBus要求更严格。</p>
<p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/NO2.png" alt="image"></p>
<p>如今很多设备都实现了SMBus，即使I2C控制器没有实现SMBus，软件方面也是可以使用I2C协议来模拟SMBus。<br><strong>在Linux上建议优先使用SMBus</strong>。</p>
<h2 id="SMBus与一般I2C协议的差别"><a href="#SMBus与一般I2C协议的差别" class="headerlink" title="SMBus与一般I2C协议的差别"></a>SMBus与一般I2C协议的差别</h2><ul>
<li><p>VDD的极限值不一样</p>
<ul>
<li>I2C协议：范围很广，甚至讨论了高达12V的情况</li>
<li>SMBus：1.8V~5V</li>
</ul>
</li>
<li><p>最小时钟频率、最大的<code>Clock Stretching </code></p>
<ul>
<li><p>Clock Stretching含义：某个设备需要更多时间进行内部的处理时，它可以把SCL拉低占住I2C总线</p>
</li>
<li><p>I2C协议：时钟频率最小值无限制，Clock Stretching时长也没有限制</p>
</li>
<li><p>SMBus：时钟频率最小值是10KHz，Clock Stretching的最大时间值也有限制</p>
</li>
</ul>
</li>
<li><p>地址回应(Address Acknowledge)</p>
<ul>
<li>I2C协议：没有强制要求必须发出回应信号</li>
<li>SMBus：强制要求必须发出回应信号，这样对方才知道该设备的状态：busy，failed，或是被移除了</li>
</ul>
</li>
<li><p>SMBus协议明确了数据的传输格式</p>
<ul>
<li>I2C协议：它只定义了怎么传输数据，但是并没有定义数据的格式，这完全由设备来定义</li>
<li>SMBus：定义了几种数据格式</li>
</ul>
</li>
<li><p>REPEATED START Condition(重复发出S信号)</p>
<ul>
<li>比如读EEPROM时，涉及2个操作：<ul>
<li>把存储地址发给设备</li>
<li>读数据</li>
</ul>
</li>
<li>在写、读之间，可以不发出P信号，而是直接发出S信号：这个S信号就是<code>REPEATED START</code></li>
<li>如下图所示<br><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/NO3.png" alt="image"></li>
</ul>
</li>
<li><p>SMBus Low Power Version </p>
<ul>
<li>SMBus也有低功耗的版本</li>
</ul>
</li>
</ul>
<h2 id="SMBus通信"><a href="#SMBus通信" class="headerlink" title="SMBus通信"></a>SMBus通信</h2><p>Linux内核上集成了SMBus，可以认为是对I2C的进一步封装，在与外设使用I2C子系统进行数据传输时，建议使用SMBus协议。</p>
<p>以下是常用的SMBus函数，更多资料参考内核源码：<code>drivers\i2c\i2c-core.c</code></p>
<h3 id="Receive-Byte"><a href="#Receive-Byte" class="headerlink" title="Receive Byte"></a>Receive Byte</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/04_smbus_receive_byte.png" alt="image"></p>
<p>读取一个字节，主机接收到一个字节后不需要回应(上图中N表示不回应)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_read_byte - SMBus &quot;receive byte&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;receive byte&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else the byte received from the device.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_read_byte</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Send-Byte"><a href="#Send-Byte" class="headerlink" title="Send Byte"></a>Send Byte</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/05_smbus_send_byte.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_write_byte - SMBus &quot;send byte&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @value: Byte to be sent</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;send byte&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else zero on success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_write_byte</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">	                      I2C_SMBUS_WRITE, value, I2C_SMBUS_BYTE, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Read-Byte"><a href="#Read-Byte" class="headerlink" title="Read Byte"></a>Read Byte</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/06_smbus_read_byte.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_read_byte_data - SMBus &quot;read byte&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @command: Byte interpreted by slave</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;read byte&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else a data byte received from the device.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_read_byte_data</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">i2c_smbus_data</span> <span class="title">data</span>;</span></span><br><span class="line">	<span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">	status = i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">				I2C_SMBUS_READ, command,</span><br><span class="line">				I2C_SMBUS_BYTE_DATA, &amp;data);</span><br><span class="line">	<span class="keyword">return</span> (status &lt; <span class="number">0</span>) ? status : data.byte;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Read-Word"><a href="#Read-Word" class="headerlink" title="Read Word"></a>Read Word</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/07_smbus_read_word.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_read_word_data - SMBus &quot;read word&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @command: Byte interpreted by slave</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;read word&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else a 16-bit unsigned &quot;word&quot; received from the device.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_read_word_data</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">i2c_smbus_data</span> <span class="title">data</span>;</span></span><br><span class="line">	<span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">	status = i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">				I2C_SMBUS_READ, command,</span><br><span class="line">				I2C_SMBUS_WORD_DATA, &amp;data);</span><br><span class="line">	<span class="keyword">return</span> (status &lt; <span class="number">0</span>) ? status : data.word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Write-Byte"><a href="#Write-Byte" class="headerlink" title="Write Byte"></a>Write Byte</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/08_smbus_write_byte.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_write_byte_data - SMBus &quot;write byte&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @command: Byte interpreted by slave</span></span><br><span class="line"><span class="comment"> * @value: Byte being written</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;write byte&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else zero on success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_write_byte_data</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 command,</span></span></span><br><span class="line"><span class="params"><span class="function">			      u8 value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">i2c_smbus_data</span> <span class="title">data</span>;</span></span><br><span class="line">	data.byte = value;</span><br><span class="line">	<span class="keyword">return</span> i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">			      I2C_SMBUS_WRITE, command,</span><br><span class="line">			      I2C_SMBUS_BYTE_DATA, &amp;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Write-Word"><a href="#Write-Word" class="headerlink" title="Write Word"></a>Write Word</h3><p><img src="/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-I2C%E5%AD%90%E7%B3%BB%E7%BB%9F/09_smbus_write_word.png" alt="image"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * i2c_smbus_write_word_data - SMBus &quot;write word&quot; protocol</span></span><br><span class="line"><span class="comment"> * @client: Handle to slave device</span></span><br><span class="line"><span class="comment"> * @command: Byte interpreted by slave</span></span><br><span class="line"><span class="comment"> * @value: 16-bit &quot;word&quot; being written</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This executes the SMBus &quot;write word&quot; protocol, returning negative errno</span></span><br><span class="line"><span class="comment"> * else zero on success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">s32 <span class="title">i2c_smbus_write_word_data</span><span class="params">(<span class="keyword">const</span> struct i2c_client *client, u8 command,</span></span></span><br><span class="line"><span class="params"><span class="function">			      u16 value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">i2c_smbus_data</span> <span class="title">data</span>;</span></span><br><span class="line">	data.word = value;</span><br><span class="line">	<span class="keyword">return</span> i2c_smbus_xfer(client-&gt;adapter, client-&gt;addr, client-&gt;flags,</span><br><span class="line">			      I2C_SMBUS_WRITE, command,</span><br><span class="line">			      I2C_SMBUS_WORD_DATA, &amp;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Linux驱动</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>driver</tag>
        <tag>I2C</tag>
      </tags>
  </entry>
  <entry>
    <title>SPI子系统</title>
    <url>/2021/09/12/Linux%E9%A9%B1%E5%8A%A8-SPI%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="SPI驱动框架"><a href="#SPI驱动框架" class="headerlink" title="SPI驱动框架"></a>SPI驱动框架</h1><p>SPI 驱动框架和 I2C 很类似 ，都分为主机控制器驱动和设备驱动。</p>
<h1 id="SPI主机驱动"><a href="#SPI主机驱动" class="headerlink" title="SPI主机驱动"></a>SPI主机驱动</h1><p>​    SPI 主机驱动就是 SOC 的 SPI 控制器驱动，类似 I2C 驱动里面的适配器驱动。 Linux 内核<br>使用结构体<code>spi_master</code> 表示 SPI 主机驱动 。</p>
<p>​    SPI 主机驱动的核心就是申请 spi_master，然后初始化 spi_master，最后向 Linux 内核注册<br>spi_master。  </p>
<p>​    和 I2C 适配器驱动一样， SPI 主机驱动一般都是半导体厂商去编写的。</p>
<h1 id="SPI-设备驱动"><a href="#SPI-设备驱动" class="headerlink" title="SPI 设备驱动"></a>SPI 设备驱动</h1><p>​    Linux 内核使用 spi_driver 结构体来表示 spi 设备驱动。 SPI 设备驱动的关键就是 <code>spi_driver</code> ，申请，设置，向内核注册 <code>spi_driver</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">spi_driver</span> <span class="title">chip_spi_driver</span> =</span> &#123;</span><br><span class="line">	.probe		= chip_spi_probe,</span><br><span class="line">	.remove     = chip_spi_remove,</span><br><span class="line">	.driver = &#123;</span><br><span class="line">		.name	= <span class="string">&quot;chip&quot;</span>,</span><br><span class="line">		.owner = THIS_MODULE,</span><br><span class="line">		.of_match_table = chip_of_match,</span><br><span class="line">	&#125;,</span><br><span class="line">	.id_table	= chip_id,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="spi-driver-注册"><a href="#spi-driver-注册" class="headerlink" title="spi_driver 注册"></a>spi_driver 注册</h2><ol>
<li>传统方法</li>
</ol>
<p>在驱动入口init函数中，调用<code>spi_register_driver</code> 来注册 spi_driver。  </p>
<p>在驱动出口exit函数中，调用<code>spi_unregister_driver</code> 来注销 spi_driver</p>
<ol start="2">
<li>使用宏定义<code>module_spi_driver</code> 来直接注册spi_driver</li>
</ol>
<p>这个宏定义将 spi_register/unregister_driver() 与 module_init 和 module_exit 封装了起来。</p>
<p>注册完成，匹配成功就可调用probe函数</p>
<h2 id="SPI-device-与-driver-匹配"><a href="#SPI-device-与-driver-匹配" class="headerlink" title="SPI device 与 driver 匹配"></a>SPI device 与 driver 匹配</h2><p>同样与I2C子系统非常相似，当匹配成功， probe 函数就会被调用。  </p>
<p>常用compatible属性进行匹配。</p>
<h2 id="spi-driver设置"><a href="#spi-driver设置" class="headerlink" title="spi_driver设置"></a>spi_driver设置</h2><p>spi设备驱动本质上任属于字符设备驱动范畴。</p>
<ul>
<li>在prob函数中</li>
</ul>
<p>进行字符设备的注册，设备节点的创建，将<code>file_operations</code>结构体注册进内核，并初始化<code>spi_device</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">spi_device</span> *<span class="title">spi</span>;</span> </span><br><span class="line"></span><br><span class="line">spi-&gt;mode = SPI_MODE_0; <span class="comment">/*MODE0，CPOL=0，CPHA=0*/</span></span><br><span class="line">spi_setup(spi);</span><br></pre></td></tr></table></figure>

<ul>
<li>在remove函数</li>
</ul>
<p>进行与prob函数中顺序相反的注销。</p>
<ul>
<li>填充<code>file_operations</code>结构体的open, read, write，release等函数。</li>
</ul>
<p>注意：platform_device 中如果不提供 <strong>release</strong> 函数 ，则在调用 platform_device_unregister 时会出现警告，</p>
<p>如果实在无事可做，可以提供一个空的release 函数。</p>
<h1 id="SPI-设备树节点"><a href="#SPI-设备树节点" class="headerlink" title="SPI 设备树节点"></a>SPI 设备树节点</h1><p>设备树添加节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&amp;ecspi3 &#123; </span><br><span class="line">    pinctrl-names = &quot;default&quot;;</span><br><span class="line">    pinctrl-0 = &lt;&amp;pinctrl_ecspi3&gt;;</span><br><span class="line">    cs-gpios = &lt;&amp;gpio1 20 GPIO_ACTIVE_LOW&gt;; /* 软件片选 */</span><br><span class="line">    status = &quot;okay&quot;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    spidev: icm20608@0&#123;</span><br><span class="line">        compatible = &quot;invensense,icm20608&quot;;</span><br><span class="line">        interrupt-parent = &lt;&amp;gpio1&gt;;</span><br><span class="line">        interrupts = &lt;1 1&gt;;</span><br><span class="line">        spi-max-frequency = &lt;8000000&gt;; </span><br><span class="line">        reg = &lt;0&gt;; </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>pinctrl子系统修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pinctrl_ecspi3: ecspi3 &#123;              </span><br><span class="line">            fsl,pins = &lt;</span><br><span class="line">        MX6UL_PAD_UART2_CTS_B__ECSPI3_MOSI         0x000010B0</span><br><span class="line">        MX6UL_PAD_UART2_RTS_B__ECSPI3_MISO         0x000010B0</span><br><span class="line">        MX6UL_PAD_UART2_RX_DATA__ECSPI3_SCLK       0x000010B0</span><br><span class="line">        //MX6UL_PAD_UART2_TX_DATA__ECSPI3_SS0        0x000010B0//硬件片选</span><br><span class="line">        MX6UL_PAD_UART2_TX_DATA__GPIO1_IO20        0x000010B0 //软件片选                </span><br><span class="line">    &gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>片选引脚使用软件片选，即使用一个GPIO引脚进行CS引脚模拟。</p>
<h1 id="SPI-通信过程"><a href="#SPI-通信过程" class="headerlink" title="SPI 通信过程"></a>SPI 通信过程</h1><h2 id="spi通信步骤"><a href="#spi通信步骤" class="headerlink" title="spi通信步骤"></a>spi通信步骤</h2><ol>
<li>申请并初始化 spi_transfer，设置 spi_transfer 的 tx_buf 成员变量， tx_buf 为要发送的数<br>据。然后设置 rx_buf 成员变量， rx_buf 保存着接收到的数据。最后设置 len 成员变量，也就是<br>要进行数据通信的长度。</li>
<li>使用 spi_message_init 函数初始化 spi_message。</li>
<li>使用spi_message_add_tail函数将前面设置好的spi_transfer添加到spi_message队列中。</li>
<li>使用 spi_sync 函数完成 SPI 数据同步传输。   </li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SPI 多字节发送 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">spi_send</span><span class="params">(struct spi_device *spi, u8 *buf, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_message</span> <span class="title">message</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_transfer</span> <span class="title">transfer</span> =</span> &#123;</span><br><span class="line">        .tx_buf = buf,</span><br><span class="line">        .len = len,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    spi_message_init(&amp;message); <span class="comment">/* 初始化 spi_message */</span></span><br><span class="line">    spi_message_add_tail(transfer, &amp;message);<span class="comment">/* 将 spi_transfer 添加到 spi_message 队列 */</span></span><br><span class="line">    ret = spi_sync(spi, &amp;message); <span class="comment">/* 同步传输 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI 多字节接收 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">spi_receive</span><span class="params">(struct spi_device *spi, u8 *buf, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_message</span> <span class="title">message</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_transfer</span> <span class="title">transfer</span> =</span> &#123;</span><br><span class="line">        .rx_buf = buf,</span><br><span class="line">        .len = len,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    spi_message_init(&amp;message); <span class="comment">/* 初始化 spi_message */</span></span><br><span class="line">    spi_message_add_tail(transfer, &amp;message);<span class="comment">/* 将 spi_transfer 添加到 spi_message 队列 */</span></span><br><span class="line">    ret = spi_sync(spi, &amp;message); <span class="comment">/* 同步传输 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        SPI 数据传输也支持异步传输，异步传输不会阻塞地等到完成，异步传输需要设置 spi_message 中的 complete成员变量， <code>complete</code> 是一个回调函数，当 SPI 异步传输完成以后此函数就会被调用。</p>
<p> SPI 异步传输函数为 spi_async，函数原型如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spi_async</span><span class="params">(struct spi_device *spi, struct spi_message *message)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="spi通信函数封装"><a href="#spi通信函数封装" class="headerlink" title="spi通信函数封装"></a>spi通信函数封装</h2><blockquote>
<p>参考内核源码 /kernel/driver/spi/spi.c spi.h</p>
</blockquote>
<p>实际还是 spi_transfer， spi_message进一步封装</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">spi_write</span><span class="params">(struct spi_device *spi, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">spi_read</span><span class="params">(struct spi_device *spi, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">spi_write_then_read</span><span class="params">(struct spi_device *spi,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="keyword">const</span> <span class="keyword">void</span> *txbuf, <span class="keyword">unsigned</span> n_tx,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="keyword">void</span> *rxbuf, <span class="keyword">unsigned</span> n_rx)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">ssize_t</span> <span class="title">spi_w8r8</span><span class="params">(struct spi_device *spi, u8 cmd)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">ssize_t</span> <span class="title">spi_w8r16</span><span class="params">(struct spi_device *spi, u8 cmd)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux驱动</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>driver</tag>
        <tag>SPI</tag>
      </tags>
  </entry>
</search>
